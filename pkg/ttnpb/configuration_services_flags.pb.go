// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v1.2.0
// - protoc              v4.23.4
// source: ttn/lorawan/v3/configuration_services.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	pflag "github.com/spf13/pflag"
)

// AddSetFlagsForListFrequencyPlansRequest adds flags to select fields in ListFrequencyPlansRequest.
func AddSetFlagsForListFrequencyPlansRequest(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("base-frequency", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("band-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gateways-only", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ListFrequencyPlansRequest message from flags.
func (m *ListFrequencyPlansRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("base_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BaseFrequency = val
		paths = append(paths, flagsplugin.Prefix("base_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("band_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BandId = val
		paths = append(paths, flagsplugin.Prefix("band_id", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gateways_only", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.GatewaysOnly = val
		paths = append(paths, flagsplugin.Prefix("gateways_only", prefix))
	}
	return paths, nil
}

// AddSetFlagsForGetPhyVersionsRequest adds flags to select fields in GetPhyVersionsRequest.
func AddSetFlagsForGetPhyVersionsRequest(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("band-id", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the GetPhyVersionsRequest message from flags.
func (m *GetPhyVersionsRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("band_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BandId = val
		paths = append(paths, flagsplugin.Prefix("band_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForListBandsRequest adds flags to select fields in ListBandsRequest.
func AddSetFlagsForListBandsRequest(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("band-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("phy-version", prefix), flagsplugin.EnumValueDesc(PHYVersion_value, PHYVersion_customvalue), flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ListBandsRequest message from flags.
func (m *ListBandsRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("band_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BandId = val
		paths = append(paths, flagsplugin.Prefix("band_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("phy_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, PHYVersion_value, PHYVersion_customvalue)
		if err != nil {
			return nil, err
		}
		m.PhyVersion = PHYVersion(enumValue)
		paths = append(paths, flagsplugin.Prefix("phy_version", prefix))
	}
	return paths, nil
}
