// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v1.6.0
// - protoc             v4.23.4
// source: ttn/lorawan/v3/qrcodegenerator.proto

package ttnpb

import (
	golang "github.com/TheThingsIndustries/protoc-gen-go-json/golang"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
)

// MarshalProtoJSON marshals the QRCodeFormat message to JSON.
func (x *QRCodeFormat) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if x.Description != "" || s.HasField("description") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("description")
		s.WriteString(x.Description)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the QRCodeFormat to JSON.
func (x *QRCodeFormat) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the QRCodeFormat message from JSON.
func (x *QRCodeFormat) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		case "description":
			s.AddField("description")
			x.Description = s.ReadString()
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the QRCodeFormat from JSON.
func (x *QRCodeFormat) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GenerateEndDeviceQRCodeRequest message to JSON.
func (x *GenerateEndDeviceQRCodeRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.FormatId != "" || s.HasField("format_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("format_id")
		s.WriteString(x.FormatId)
	}
	if x.EndDevice != nil || s.HasField("end_device") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device")
		x.EndDevice.MarshalProtoJSON(s.WithField("end_device"))
	}
	if x.Image != nil || s.HasField("image") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("image")
		// NOTE: GenerateEndDeviceQRCodeRequest_Image does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Image)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GenerateEndDeviceQRCodeRequest to JSON.
func (x *GenerateEndDeviceQRCodeRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GenerateEndDeviceQRCodeRequest message from JSON.
func (x *GenerateEndDeviceQRCodeRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "format_id", "formatId":
			s.AddField("format_id")
			x.FormatId = s.ReadString()
		case "end_device", "endDevice":
			if s.ReadNil() {
				x.EndDevice = nil
				return
			}
			x.EndDevice = &EndDevice{}
			x.EndDevice.UnmarshalProtoJSON(s.WithField("end_device", true))
		case "image":
			s.AddField("image")
			if s.ReadNil() {
				x.Image = nil
				return
			}
			// NOTE: GenerateEndDeviceQRCodeRequest_Image does not seem to implement UnmarshalProtoJSON.
			var v GenerateEndDeviceQRCodeRequest_Image
			golang.UnmarshalMessage(s, &v)
			x.Image = &v
		}
	})
}

// UnmarshalJSON unmarshals the GenerateEndDeviceQRCodeRequest from JSON.
func (x *GenerateEndDeviceQRCodeRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ParseEndDeviceQRCodeResponse message to JSON.
func (x *ParseEndDeviceQRCodeResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.FormatId != "" || s.HasField("format_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("format_id")
		s.WriteString(x.FormatId)
	}
	if x.EndDeviceTemplate != nil || s.HasField("end_device_template") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_template")
		x.EndDeviceTemplate.MarshalProtoJSON(s.WithField("end_device_template"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ParseEndDeviceQRCodeResponse to JSON.
func (x *ParseEndDeviceQRCodeResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ParseEndDeviceQRCodeResponse message from JSON.
func (x *ParseEndDeviceQRCodeResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "format_id", "formatId":
			s.AddField("format_id")
			x.FormatId = s.ReadString()
		case "end_device_template", "endDeviceTemplate":
			if s.ReadNil() {
				x.EndDeviceTemplate = nil
				return
			}
			x.EndDeviceTemplate = &EndDeviceTemplate{}
			x.EndDeviceTemplate.UnmarshalProtoJSON(s.WithField("end_device_template", true))
		}
	})
}

// UnmarshalJSON unmarshals the ParseEndDeviceQRCodeResponse from JSON.
func (x *ParseEndDeviceQRCodeResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ParseGatewayQRCodeResponse message to JSON.
func (x *ParseGatewayQRCodeResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.FormatId != "" || s.HasField("format_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("format_id")
		s.WriteString(x.FormatId)
	}
	if x.ClaimGatewayRequest != nil || s.HasField("claim_gateway_request") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("claim_gateway_request")
		x.ClaimGatewayRequest.MarshalProtoJSON(s.WithField("claim_gateway_request"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ParseGatewayQRCodeResponse to JSON.
func (x *ParseGatewayQRCodeResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ParseGatewayQRCodeResponse message from JSON.
func (x *ParseGatewayQRCodeResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "format_id", "formatId":
			s.AddField("format_id")
			x.FormatId = s.ReadString()
		case "claim_gateway_request", "claimGatewayRequest":
			if s.ReadNil() {
				x.ClaimGatewayRequest = nil
				return
			}
			x.ClaimGatewayRequest = &ClaimGatewayRequest{}
			x.ClaimGatewayRequest.UnmarshalProtoJSON(s.WithField("claim_gateway_request", true))
		}
	})
}

// UnmarshalJSON unmarshals the ParseGatewayQRCodeResponse from JSON.
func (x *ParseGatewayQRCodeResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
