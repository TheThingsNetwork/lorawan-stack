// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v1.2.0
// - protoc              v4.23.4
// source: ttn/lorawan/v3/end_device.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	golang "github.com/TheThingsIndustries/protoc-gen-go-flags/golang"
	pflag "github.com/spf13/pflag"
	customflags "go.thethings.network/lorawan-stack/v3/cmd/ttn-lw-cli/customflags"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// AddSelectFlagsForSession adds flags to select fields in Session.
func AddSelectFlagsForSession(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("dev-addr", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("dev-addr", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("keys", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("keys", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForSessionKeys(flags, flagsplugin.Prefix("keys", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-f-cnt-up", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-f-cnt-up", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-n-f-cnt-down", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-n-f-cnt-down", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-a-f-cnt-down", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-a-f-cnt-down", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-conf-f-cnt-down", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-conf-f-cnt-down", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("started-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("started-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-application-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-application-downlinks", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forSession message from select flags.
func PathsFromSelectFlagsForSession(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("dev_addr", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("dev_addr", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("keys", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("keys", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForSessionKeys(flags, flagsplugin.Prefix("keys", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_f_cnt_up", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_n_f_cnt_down", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_n_f_cnt_down", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_a_f_cnt_down", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_a_f_cnt_down", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_conf_f_cnt_down", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_conf_f_cnt_down", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("started_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("started_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued_application_downlinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("queued_application_downlinks", prefix))
	}
	return paths, nil
}

// AddSetFlagsForSession adds flags to select fields in Session.
func AddSetFlagsForSession(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(customflags.New4BytesFlag(flagsplugin.Prefix("dev-addr", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForSessionKeys(flags, flagsplugin.Prefix("keys", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-f-cnt-up", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-n-f-cnt-down", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-a-f-cnt-down", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-conf-f-cnt-down", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("started-at", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping QueuedApplicationDownlinks because repeated messages are currently not supported.
}

// SetFromFlags sets the Session message from flags.
func (m *Session) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := customflags.GetExactBytes(flags, flagsplugin.Prefix("dev_addr", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DevAddr = val
		paths = append(paths, flagsplugin.Prefix("dev_addr", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("keys", prefix)); changed {
		if m.Keys == nil {
			m.Keys = &SessionKeys{}
		}
		if setPaths, err := m.Keys.SetFromFlags(flags, flagsplugin.Prefix("keys", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastFCntUp = val
		paths = append(paths, flagsplugin.Prefix("last_f_cnt_up", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_n_f_cnt_down", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastNFCntDown = val
		paths = append(paths, flagsplugin.Prefix("last_n_f_cnt_down", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_a_f_cnt_down", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastAFCntDown = val
		paths = append(paths, flagsplugin.Prefix("last_a_f_cnt_down", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_conf_f_cnt_down", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastConfFCntDown = val
		paths = append(paths, flagsplugin.Prefix("last_conf_f_cnt_down", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("started_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.StartedAt = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("started_at", prefix))
	}
	// FIXME: Skipping QueuedApplicationDownlinks because it does not seem to implement AddSetFlags.
	return paths, nil
}

// AddSelectFlagsForBoolValue adds flags to select fields in BoolValue.
func AddSelectFlagsForBoolValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forBoolValue message from select flags.
func PathsFromSelectFlagsForBoolValue(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSetFlagsForBoolValue adds flags to select fields in BoolValue.
func AddSetFlagsForBoolValue(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the BoolValue message from flags.
func (m *BoolValue) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Value = val
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForServingRelayForwardingLimits adds flags to select fields in ServingRelayForwardingLimits.
func AddSelectFlagsForServingRelayForwardingLimits(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("reset-behavior", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("reset-behavior", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("join-requests", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("join-requests", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("join-requests", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("notifications", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("notifications", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("notifications", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-messages", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-messages", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("uplink-messages", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("overall", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("overall", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("overall", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forServingRelayForwardingLimits message from select flags.
func PathsFromSelectFlagsForServingRelayForwardingLimits(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("reset_behavior", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("reset_behavior", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("join_requests", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("join_requests", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("join_requests", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("notifications", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("notifications", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("notifications", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_messages", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_messages", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("uplink_messages", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("overall", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("overall", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("overall", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForServingRelayForwardingLimits adds flags to select fields in ServingRelayForwardingLimits.
func AddSetFlagsForServingRelayForwardingLimits(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("reset-behavior", prefix), flagsplugin.EnumValueDesc(RelayResetLimitCounter_value), flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("join-requests", prefix), hidden)
	AddSetFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("notifications", prefix), hidden)
	AddSetFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("uplink-messages", prefix), hidden)
	AddSetFlagsForRelayForwardLimits(flags, flagsplugin.Prefix("overall", prefix), hidden)
}

// SetFromFlags sets the ServingRelayForwardingLimits message from flags.
func (m *ServingRelayForwardingLimits) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("reset_behavior", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RelayResetLimitCounter_value)
		if err != nil {
			return nil, err
		}
		m.ResetBehavior = RelayResetLimitCounter(enumValue)
		paths = append(paths, flagsplugin.Prefix("reset_behavior", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("join_requests", prefix)); changed {
		if m.JoinRequests == nil {
			m.JoinRequests = &RelayForwardLimits{}
		}
		if setPaths, err := m.JoinRequests.SetFromFlags(flags, flagsplugin.Prefix("join_requests", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("notifications", prefix)); changed {
		if m.Notifications == nil {
			m.Notifications = &RelayForwardLimits{}
		}
		if setPaths, err := m.Notifications.SetFromFlags(flags, flagsplugin.Prefix("notifications", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("uplink_messages", prefix)); changed {
		if m.UplinkMessages == nil {
			m.UplinkMessages = &RelayForwardLimits{}
		}
		if setPaths, err := m.UplinkMessages.SetFromFlags(flags, flagsplugin.Prefix("uplink_messages", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("overall", prefix)); changed {
		if m.Overall == nil {
			m.Overall = &RelayForwardLimits{}
		}
		if setPaths, err := m.Overall.SetFromFlags(flags, flagsplugin.Prefix("overall", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForRelayUplinkForwardingRule adds flags to select fields in RelayUplinkForwardingRule.
func AddSelectFlagsForRelayUplinkForwardingRule(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("limits", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("limits", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayUplinkForwardLimits(flags, flagsplugin.Prefix("limits", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-w-f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-w-f-cnt", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("device-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("device-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forRelayUplinkForwardingRule message from select flags.
func PathsFromSelectFlagsForRelayUplinkForwardingRule(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("limits", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("limits", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayUplinkForwardLimits(flags, flagsplugin.Prefix("limits", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_w_f_cnt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_w_f_cnt", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("device_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("device_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session_key_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session_key_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForRelayUplinkForwardingRule adds flags to select fields in RelayUplinkForwardingRule.
func AddSetFlagsForRelayUplinkForwardingRule(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForRelayUplinkForwardLimits(flags, flagsplugin.Prefix("limits", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-w-f-cnt", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("device-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("session-key-id", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the RelayUplinkForwardingRule message from flags.
func (m *RelayUplinkForwardingRule) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("limits", prefix)); changed {
		if m.Limits == nil {
			m.Limits = &RelayUplinkForwardLimits{}
		}
		if setPaths, err := m.Limits.SetFromFlags(flags, flagsplugin.Prefix("limits", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_w_f_cnt", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastWFCnt = val
		paths = append(paths, flagsplugin.Prefix("last_w_f_cnt", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("device_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DeviceId = val
		paths = append(paths, flagsplugin.Prefix("device_id", prefix))
	}
	if val, changed, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("session_key_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SessionKeyId = val
		paths = append(paths, flagsplugin.Prefix("session_key_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForServingRelayParameters adds flags to select fields in ServingRelayParameters.
func AddSelectFlagsForServingRelayParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("second-channel", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("second-channel", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second-channel", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("default-channel-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("default-channel-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("cad-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("cad-periodicity", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-forwarding-rules", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-forwarding-rules", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("limits", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("limits", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForServingRelayForwardingLimits(flags, flagsplugin.Prefix("limits", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forServingRelayParameters message from select flags.
func PathsFromSelectFlagsForServingRelayParameters(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("second_channel", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("default_channel_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("default_channel_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("cad_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("cad_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_forwarding_rules", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_forwarding_rules", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("limits", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("limits", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForServingRelayForwardingLimits(flags, flagsplugin.Prefix("limits", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForServingRelayParameters adds flags to select fields in ServingRelayParameters.
func AddSetFlagsForServingRelayParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second-channel", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("default-channel-index", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("cad-periodicity", prefix), flagsplugin.EnumValueDesc(RelayCADPeriodicity_value), flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping UplinkForwardingRules because repeated messages are currently not supported.
	AddSetFlagsForServingRelayForwardingLimits(flags, flagsplugin.Prefix("limits", prefix), hidden)
}

// SetFromFlags sets the ServingRelayParameters message from flags.
func (m *ServingRelayParameters) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("second_channel", prefix)); changed {
		if m.SecondChannel == nil {
			m.SecondChannel = &RelaySecondChannel{}
		}
		if setPaths, err := m.SecondChannel.SetFromFlags(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("default_channel_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DefaultChannelIndex = val
		paths = append(paths, flagsplugin.Prefix("default_channel_index", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("cad_periodicity", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RelayCADPeriodicity_value)
		if err != nil {
			return nil, err
		}
		m.CadPeriodicity = RelayCADPeriodicity(enumValue)
		paths = append(paths, flagsplugin.Prefix("cad_periodicity", prefix))
	}
	// FIXME: Skipping UplinkForwardingRules because it does not seem to implement AddSetFlags.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("limits", prefix)); changed {
		if m.Limits == nil {
			m.Limits = &ServingRelayForwardingLimits{}
		}
		if setPaths, err := m.Limits.SetFromFlags(flags, flagsplugin.Prefix("limits", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForServedRelayParameters adds flags to select fields in ServedRelayParameters.
func AddSelectFlagsForServedRelayParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.always", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.always", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayEndDeviceAlwaysMode(flags, flagsplugin.Prefix("mode.always", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.dynamic", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.dynamic", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayEndDeviceDynamicMode(flags, flagsplugin.Prefix("mode.dynamic", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.end-device-controlled", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.end-device-controlled", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayEndDeviceControlledMode(flags, flagsplugin.Prefix("mode.end-device-controlled", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("backoff", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("backoff", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("second-channel", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("second-channel", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second-channel", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("serving-device-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("serving-device-id", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forServedRelayParameters message from select flags.
func PathsFromSelectFlagsForServedRelayParameters(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.always", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.always", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayEndDeviceAlwaysMode(flags, flagsplugin.Prefix("mode.always", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.dynamic", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.dynamic", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayEndDeviceDynamicMode(flags, flagsplugin.Prefix("mode.dynamic", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.end_device_controlled", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.end_device_controlled", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayEndDeviceControlledMode(flags, flagsplugin.Prefix("mode.end_device_controlled", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("backoff", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("backoff", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("second_channel", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("serving_device_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("serving_device_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForServedRelayParameters adds flags to select fields in ServedRelayParameters.
func AddSetFlagsForServedRelayParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForRelayEndDeviceAlwaysMode(flags, flagsplugin.Prefix("mode.always", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.always", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRelayEndDeviceDynamicMode(flags, flagsplugin.Prefix("mode.dynamic", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.dynamic", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRelayEndDeviceControlledMode(flags, flagsplugin.Prefix("mode.end-device-controlled", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.end-device-controlled", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("backoff", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second-channel", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("second-channel", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("serving-device-id", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ServedRelayParameters message from flags.
func (m *ServedRelayParameters) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.always", prefix)); changed {
		ov := &ServedRelayParameters_Always{}
		if ov.Always == nil {
			ov.Always = &RelayEndDeviceAlwaysMode{}
		}
		if setPaths, err := ov.Always.SetFromFlags(flags, flagsplugin.Prefix("mode.always", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.always")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.dynamic", prefix)); changed {
		ov := &ServedRelayParameters_Dynamic{}
		if ov.Dynamic == nil {
			ov.Dynamic = &RelayEndDeviceDynamicMode{}
		}
		if setPaths, err := ov.Dynamic.SetFromFlags(flags, flagsplugin.Prefix("mode.dynamic", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.dynamic")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.end_device_controlled", prefix)); changed {
		ov := &ServedRelayParameters_EndDeviceControlled{}
		if ov.EndDeviceControlled == nil {
			ov.EndDeviceControlled = &RelayEndDeviceControlledMode{}
		}
		if setPaths, err := ov.EndDeviceControlled.SetFromFlags(flags, flagsplugin.Prefix("mode.end_device_controlled", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.end_device_controlled")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("backoff", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Backoff = val
		paths = append(paths, flagsplugin.Prefix("backoff", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("second_channel", prefix)); changed {
		if m.SecondChannel == nil {
			m.SecondChannel = &RelaySecondChannel{}
		}
		if setPaths, err := m.SecondChannel.SetFromFlags(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "second_channel")
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("serving_device_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ServingDeviceId = val
		paths = append(paths, flagsplugin.Prefix("serving_device_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForRelayParameters adds flags to select fields in RelayParameters.
func AddSelectFlagsForRelayParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.serving", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.serving", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForServingRelayParameters(flags, flagsplugin.Prefix("mode.serving", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.served", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.served", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForServedRelayParameters(flags, flagsplugin.Prefix("mode.served", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forRelayParameters message from select flags.
func PathsFromSelectFlagsForRelayParameters(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.serving", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.serving", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForServingRelayParameters(flags, flagsplugin.Prefix("mode.serving", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.served", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.served", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForServedRelayParameters(flags, flagsplugin.Prefix("mode.served", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForRelayParameters adds flags to select fields in RelayParameters.
func AddSetFlagsForRelayParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForServingRelayParameters(flags, flagsplugin.Prefix("mode.serving", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.serving", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForServedRelayParameters(flags, flagsplugin.Prefix("mode.served", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.served", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the RelayParameters message from flags.
func (m *RelayParameters) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.serving", prefix)); changed {
		ov := &RelayParameters_Serving{}
		if ov.Serving == nil {
			ov.Serving = &ServingRelayParameters{}
		}
		if setPaths, err := ov.Serving.SetFromFlags(flags, flagsplugin.Prefix("mode.serving", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.serving")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.served", prefix)); changed {
		ov := &RelayParameters_Served{}
		if ov.Served == nil {
			ov.Served = &ServedRelayParameters{}
		}
		if setPaths, err := ov.Served.SetFromFlags(flags, flagsplugin.Prefix("mode.served", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.served")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	return paths, nil
}

// AddSelectFlagsForServingRelaySettings adds flags to select fields in ServingRelaySettings.
func AddSelectFlagsForServingRelaySettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("second-channel", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("second-channel", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second-channel", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("default-channel-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("default-channel-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("cad-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("cad-periodicity", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-forwarding-rules", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-forwarding-rules", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("limits", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("limits", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForServingRelayForwardingLimits(flags, flagsplugin.Prefix("limits", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forServingRelaySettings message from select flags.
func PathsFromSelectFlagsForServingRelaySettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("second_channel", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("default_channel_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("default_channel_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("cad_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("cad_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_forwarding_rules", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_forwarding_rules", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("limits", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("limits", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForServingRelayForwardingLimits(flags, flagsplugin.Prefix("limits", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForServingRelaySettings adds flags to select fields in ServingRelaySettings.
func AddSetFlagsForServingRelaySettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second-channel", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("default-channel-index", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("cad-periodicity", prefix), flagsplugin.EnumValueDesc(RelayCADPeriodicity_value), flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping UplinkForwardingRules because repeated messages are currently not supported.
	AddSetFlagsForServingRelayForwardingLimits(flags, flagsplugin.Prefix("limits", prefix), hidden)
}

// SetFromFlags sets the ServingRelaySettings message from flags.
func (m *ServingRelaySettings) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("second_channel", prefix)); changed {
		if m.SecondChannel == nil {
			m.SecondChannel = &RelaySecondChannel{}
		}
		if setPaths, err := m.SecondChannel.SetFromFlags(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("default_channel_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DefaultChannelIndex = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("default_channel_index", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("cad_periodicity", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RelayCADPeriodicity_value)
		if err != nil {
			return nil, err
		}
		m.CadPeriodicity = RelayCADPeriodicity(enumValue)
		paths = append(paths, flagsplugin.Prefix("cad_periodicity", prefix))
	}
	// FIXME: Skipping UplinkForwardingRules because it does not seem to implement AddSetFlags.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("limits", prefix)); changed {
		if m.Limits == nil {
			m.Limits = &ServingRelayForwardingLimits{}
		}
		if setPaths, err := m.Limits.SetFromFlags(flags, flagsplugin.Prefix("limits", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForServedRelaySettings adds flags to select fields in ServedRelaySettings.
func AddSelectFlagsForServedRelaySettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.always", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.always", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayEndDeviceAlwaysMode(flags, flagsplugin.Prefix("mode.always", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.dynamic", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.dynamic", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayEndDeviceDynamicMode(flags, flagsplugin.Prefix("mode.dynamic", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.end-device-controlled", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.end-device-controlled", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayEndDeviceControlledMode(flags, flagsplugin.Prefix("mode.end-device-controlled", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("backoff", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("backoff", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("second-channel", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("second-channel", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second-channel", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("serving-device-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("serving-device-id", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forServedRelaySettings message from select flags.
func PathsFromSelectFlagsForServedRelaySettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.always", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.always", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayEndDeviceAlwaysMode(flags, flagsplugin.Prefix("mode.always", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.dynamic", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.dynamic", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayEndDeviceDynamicMode(flags, flagsplugin.Prefix("mode.dynamic", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.end_device_controlled", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.end_device_controlled", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayEndDeviceControlledMode(flags, flagsplugin.Prefix("mode.end_device_controlled", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("backoff", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("backoff", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("second_channel", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("serving_device_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("serving_device_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForServedRelaySettings adds flags to select fields in ServedRelaySettings.
func AddSetFlagsForServedRelaySettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForRelayEndDeviceAlwaysMode(flags, flagsplugin.Prefix("mode.always", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.always", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRelayEndDeviceDynamicMode(flags, flagsplugin.Prefix("mode.dynamic", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.dynamic", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRelayEndDeviceControlledMode(flags, flagsplugin.Prefix("mode.end-device-controlled", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.end-device-controlled", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("backoff", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRelaySecondChannel(flags, flagsplugin.Prefix("second-channel", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("second-channel", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("serving-device-id", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ServedRelaySettings message from flags.
func (m *ServedRelaySettings) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.always", prefix)); changed {
		ov := &ServedRelaySettings_Always{}
		if ov.Always == nil {
			ov.Always = &RelayEndDeviceAlwaysMode{}
		}
		if setPaths, err := ov.Always.SetFromFlags(flags, flagsplugin.Prefix("mode.always", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.always")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.dynamic", prefix)); changed {
		ov := &ServedRelaySettings_Dynamic{}
		if ov.Dynamic == nil {
			ov.Dynamic = &RelayEndDeviceDynamicMode{}
		}
		if setPaths, err := ov.Dynamic.SetFromFlags(flags, flagsplugin.Prefix("mode.dynamic", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.dynamic")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.end_device_controlled", prefix)); changed {
		ov := &ServedRelaySettings_EndDeviceControlled{}
		if ov.EndDeviceControlled == nil {
			ov.EndDeviceControlled = &RelayEndDeviceControlledMode{}
		}
		if setPaths, err := ov.EndDeviceControlled.SetFromFlags(flags, flagsplugin.Prefix("mode.end_device_controlled", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.end_device_controlled")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("backoff", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Backoff = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("backoff", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("second_channel", prefix)); changed {
		if m.SecondChannel == nil {
			m.SecondChannel = &RelaySecondChannel{}
		}
		if setPaths, err := m.SecondChannel.SetFromFlags(flags, flagsplugin.Prefix("second_channel", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "second_channel")
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("serving_device_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ServingDeviceId = val
		paths = append(paths, flagsplugin.Prefix("serving_device_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForRelaySettings adds flags to select fields in RelaySettings.
func AddSelectFlagsForRelaySettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.serving", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.serving", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForServingRelaySettings(flags, flagsplugin.Prefix("mode.serving", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.served", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.served", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForServedRelaySettings(flags, flagsplugin.Prefix("mode.served", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forRelaySettings message from select flags.
func PathsFromSelectFlagsForRelaySettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.serving", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.serving", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForServingRelaySettings(flags, flagsplugin.Prefix("mode.serving", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.served", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.served", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForServedRelaySettings(flags, flagsplugin.Prefix("mode.served", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForRelaySettings adds flags to select fields in RelaySettings.
func AddSetFlagsForRelaySettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForServingRelaySettings(flags, flagsplugin.Prefix("mode.serving", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.serving", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForServedRelaySettings(flags, flagsplugin.Prefix("mode.served", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.served", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the RelaySettings message from flags.
func (m *RelaySettings) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.serving", prefix)); changed {
		ov := &RelaySettings_Serving{}
		if ov.Serving == nil {
			ov.Serving = &ServingRelaySettings{}
		}
		if setPaths, err := ov.Serving.SetFromFlags(flags, flagsplugin.Prefix("mode.serving", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.serving")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.served", prefix)); changed {
		ov := &RelaySettings_Served{}
		if ov.Served == nil {
			ov.Served = &ServedRelaySettings{}
		}
		if setPaths, err := ov.Served.SetFromFlags(flags, flagsplugin.Prefix("mode.served", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.served")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	return paths, nil
}

// AddSelectFlagsForMACParameters_Channel adds flags to select fields in MACParameters_Channel.
func AddSelectFlagsForMACParameters_Channel(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-frequency", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-frequency", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-data-rate-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-data-rate-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enable-uplink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("enable-uplink", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forMACParameters_Channel message from select flags.
func PathsFromSelectFlagsForMACParameters_Channel(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("min_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enable_uplink", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("enable_uplink", prefix))
	}
	return paths, nil
}

// AddSetFlagsForMACParameters_Channel adds flags to select fields in MACParameters_Channel.
func AddSetFlagsForMACParameters_Channel(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("uplink-frequency", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("downlink-frequency", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value, DataRateIndex_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value, DataRateIndex_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enable-uplink", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the MACParameters_Channel message from flags.
func (m *MACParameters_Channel) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("uplink_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.UplinkFrequency = val
		paths = append(paths, flagsplugin.Prefix("uplink_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("downlink_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DownlinkFrequency = val
		paths = append(paths, flagsplugin.Prefix("downlink_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value, DataRateIndex_customvalue)
		if err != nil {
			return nil, err
		}
		m.MinDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("min_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value, DataRateIndex_customvalue)
		if err != nil {
			return nil, err
		}
		m.MaxDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("max_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enable_uplink", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.EnableUplink = val
		paths = append(paths, flagsplugin.Prefix("enable_uplink", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForMACParameters adds flags to select fields in MACParameters.
func AddSelectFlagsForMACParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-eirp", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-eirp", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-data-rate-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-tx-power-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-tx-power-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-nb-trans", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-nb-trans", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-limit", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-limit", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-delay", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-delay", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-data-rate-offset", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-data-rate-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-frequency", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-duty-cycle", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejoin-time-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejoin-time-periodicity", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejoin-count-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejoin-count-periodicity", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-frequency", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("beacon-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("beacon-frequency", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("channels", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("channels", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-dwell-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-dwell-time", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("uplink-dwell-time", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-dwell-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-dwell-time", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("downlink-dwell-time", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-limit-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-limit-exponent", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-ack-delay-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-ack-delay-exponent", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("relay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("relay", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayParameters(flags, flagsplugin.Prefix("relay", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forMACParameters message from select flags.
func PathsFromSelectFlagsForMACParameters(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_eirp", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_eirp", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_tx_power_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_tx_power_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_nb_trans", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_nb_trans", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_ack_limit", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_ack_limit", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_ack_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_ack_delay", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx1_delay", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx1_data_rate_offset", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx2_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx2_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_duty_cycle", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejoin_time_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejoin_time_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejoin_count_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejoin_count_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("beacon_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("channels", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("channels", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_dwell_time", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_dwell_time", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_ack_limit_exponent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_ack_limit_exponent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("adr_ack_limit_exponent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_ack_delay_exponent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_ack_delay_exponent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("adr_ack_delay_exponent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("relay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("relay", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayParameters(flags, flagsplugin.Prefix("relay", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForMACParameters adds flags to select fields in MACParameters.
func AddSetFlagsForMACParameters(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("max-eirp", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("adr-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value, DataRateIndex_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-tx-power-index", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-nb-trans", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-ack-limit", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("adr-ack-delay", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.EnumValueDesc(RxDelay_value, RxDelay_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.EnumValueDesc(DataRateOffset_value, DataRateOffset_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value, DataRateIndex_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("rx2-frequency", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.EnumValueDesc(AggregatedDutyCycle_value), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rejoin-time-periodicity", prefix), flagsplugin.EnumValueDesc(RejoinTimeExponent_value), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rejoin-count-periodicity", prefix), flagsplugin.EnumValueDesc(RejoinCountExponent_value), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("ping-slot-frequency", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value, DataRateIndex_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("beacon-frequency", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping Channels because repeated messages are currently not supported.
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("uplink-dwell-time", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("uplink-dwell-time.value", prefix), flagsplugin.Prefix("uplink-dwell-time", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("downlink-dwell-time", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("downlink-dwell-time.value", prefix), flagsplugin.Prefix("downlink-dwell-time", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("adr-ack-limit-exponent", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("adr-ack-limit-exponent.value", prefix), flagsplugin.Prefix("adr-ack-limit-exponent", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("adr-ack-delay-exponent", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("adr-ack-delay-exponent.value", prefix), flagsplugin.Prefix("adr-ack-delay-exponent", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-data-rate-index-value.value", prefix), flagsplugin.Prefix("ping-slot-data-rate-index-value", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForRelayParameters(flags, flagsplugin.Prefix("relay", prefix), hidden)
}

// SetFromFlags sets the MACParameters message from flags.
func (m *MACParameters) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("max_eirp", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MaxEirp = val
		paths = append(paths, flagsplugin.Prefix("max_eirp", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("adr_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value, DataRateIndex_customvalue)
		if err != nil {
			return nil, err
		}
		m.AdrDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("adr_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr_tx_power_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrTxPowerIndex = val
		paths = append(paths, flagsplugin.Prefix("adr_tx_power_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr_nb_trans", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrNbTrans = val
		paths = append(paths, flagsplugin.Prefix("adr_nb_trans", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr_ack_limit", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrAckLimit = val
		paths = append(paths, flagsplugin.Prefix("adr_ack_limit", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("adr_ack_delay", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrAckDelay = val
		paths = append(paths, flagsplugin.Prefix("adr_ack_delay", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RxDelay_value, RxDelay_customvalue)
		if err != nil {
			return nil, err
		}
		m.Rx1Delay = RxDelay(enumValue)
		paths = append(paths, flagsplugin.Prefix("rx1_delay", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateOffset_value, DataRateOffset_customvalue)
		if err != nil {
			return nil, err
		}
		m.Rx1DataRateOffset = DataRateOffset(enumValue)
		paths = append(paths, flagsplugin.Prefix("rx1_data_rate_offset", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value, DataRateIndex_customvalue)
		if err != nil {
			return nil, err
		}
		m.Rx2DataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("rx2_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Rx2Frequency = val
		paths = append(paths, flagsplugin.Prefix("rx2_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, AggregatedDutyCycle_value)
		if err != nil {
			return nil, err
		}
		m.MaxDutyCycle = AggregatedDutyCycle(enumValue)
		paths = append(paths, flagsplugin.Prefix("max_duty_cycle", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rejoin_time_periodicity", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RejoinTimeExponent_value)
		if err != nil {
			return nil, err
		}
		m.RejoinTimePeriodicity = RejoinTimeExponent(enumValue)
		paths = append(paths, flagsplugin.Prefix("rejoin_time_periodicity", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rejoin_count_periodicity", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RejoinCountExponent_value)
		if err != nil {
			return nil, err
		}
		m.RejoinCountPeriodicity = RejoinCountExponent(enumValue)
		paths = append(paths, flagsplugin.Prefix("rejoin_count_periodicity", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.PingSlotFrequency = val
		paths = append(paths, flagsplugin.Prefix("ping_slot_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value, DataRateIndex_customvalue)
		if err != nil {
			return nil, err
		}
		m.PingSlotDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("ping_slot_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BeaconFrequency = val
		paths = append(paths, flagsplugin.Prefix("beacon_frequency", prefix))
	}
	// FIXME: Skipping Channels because it does not seem to implement AddSetFlags.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); changed {
		if m.UplinkDwellTime == nil {
			m.UplinkDwellTime = &BoolValue{}
		}
		if setPaths, err := m.UplinkDwellTime.SetFromFlags(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); changed {
		if m.DownlinkDwellTime == nil {
			m.DownlinkDwellTime = &BoolValue{}
		}
		if setPaths, err := m.DownlinkDwellTime.SetFromFlags(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("adr_ack_limit_exponent", prefix)); changed {
		if m.AdrAckLimitExponent == nil {
			m.AdrAckLimitExponent = &ADRAckLimitExponentValue{}
		}
		if setPaths, err := m.AdrAckLimitExponent.SetFromFlags(flags, flagsplugin.Prefix("adr_ack_limit_exponent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("adr_ack_delay_exponent", prefix)); changed {
		if m.AdrAckDelayExponent == nil {
			m.AdrAckDelayExponent = &ADRAckDelayExponentValue{}
		}
		if setPaths, err := m.AdrAckDelayExponent.SetFromFlags(flags, flagsplugin.Prefix("adr_ack_delay_exponent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix)); changed {
		if m.PingSlotDataRateIndexValue == nil {
			m.PingSlotDataRateIndexValue = &DataRateIndexValue{}
		}
		if setPaths, err := m.PingSlotDataRateIndexValue.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_data_rate_index_value", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("relay", prefix)); changed {
		if m.Relay == nil {
			m.Relay = &RelayParameters{}
		}
		if setPaths, err := m.Relay.SetFromFlags(flags, flagsplugin.Prefix("relay", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForADRSettings_StaticMode adds flags to select fields in ADRSettings_StaticMode.
func AddSelectFlagsForADRSettings_StaticMode(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("tx-power-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("tx-power-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("nb-trans", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("nb-trans", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forADRSettings_StaticMode message from select flags.
func PathsFromSelectFlagsForADRSettings_StaticMode(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("tx_power_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("tx_power_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("nb_trans", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("nb_trans", prefix))
	}
	return paths, nil
}

// AddSetFlagsForADRSettings_StaticMode adds flags to select fields in ADRSettings_StaticMode.
func AddSetFlagsForADRSettings_StaticMode(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value, DataRateIndex_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("tx-power-index", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("nb-trans", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ADRSettings_StaticMode message from flags.
func (m *ADRSettings_StaticMode) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value, DataRateIndex_customvalue)
		if err != nil {
			return nil, err
		}
		m.DataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("tx_power_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.TxPowerIndex = val
		paths = append(paths, flagsplugin.Prefix("tx_power_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("nb_trans", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.NbTrans = val
		paths = append(paths, flagsplugin.Prefix("nb_trans", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode adds flags to select fields in ADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode.
func AddSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode(flags *pflag.FlagSet, prefix string, hidden bool) {
}

// SelectFromFlags outputs the fieldmask paths forADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode message from select flags.
func PathsFromSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	return paths, nil
}

// AddSetFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode adds flags to select fields in ADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode.
func AddSetFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode(flags *pflag.FlagSet, prefix string, hidden bool) {
}

// SetFromFlags sets the ADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode message from flags.
func (m *ADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	return paths, nil
}

// AddSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode adds flags to select fields in ADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode.
func AddSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode(flags *pflag.FlagSet, prefix string, hidden bool) {
}

// SelectFromFlags outputs the fieldmask paths forADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode message from select flags.
func PathsFromSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	return paths, nil
}

// AddSetFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode adds flags to select fields in ADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode.
func AddSetFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode(flags *pflag.FlagSet, prefix string, hidden bool) {
}

// SetFromFlags sets the ADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode message from flags.
func (m *ADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	return paths, nil
}

// AddSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings adds flags to select fields in ADRSettings_DynamicMode_ChannelSteeringSettings.
func AddSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.lora-narrow", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.lora-narrow", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode(flags, flagsplugin.Prefix("mode.lora-narrow", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.disabled", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.disabled", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode(flags, flagsplugin.Prefix("mode.disabled", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forADRSettings_DynamicMode_ChannelSteeringSettings message from select flags.
func PathsFromSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.lora_narrow", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.lora_narrow", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode(flags, flagsplugin.Prefix("mode.lora_narrow", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.disabled", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.disabled", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode(flags, flagsplugin.Prefix("mode.disabled", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForADRSettings_DynamicMode_ChannelSteeringSettings adds flags to select fields in ADRSettings_DynamicMode_ChannelSteeringSettings.
func AddSetFlagsForADRSettings_DynamicMode_ChannelSteeringSettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode(flags, flagsplugin.Prefix("mode.lora-narrow", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.lora-narrow", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode(flags, flagsplugin.Prefix("mode.disabled", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.disabled", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ADRSettings_DynamicMode_ChannelSteeringSettings message from flags.
func (m *ADRSettings_DynamicMode_ChannelSteeringSettings) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.lora_narrow", prefix)); changed {
		ov := &ADRSettings_DynamicMode_ChannelSteeringSettings_LoraNarrow{}
		if ov.LoraNarrow == nil {
			ov.LoraNarrow = &ADRSettings_DynamicMode_ChannelSteeringSettings_LoRaNarrowMode{}
		}
		if setPaths, err := ov.LoraNarrow.SetFromFlags(flags, flagsplugin.Prefix("mode.lora_narrow", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.lora_narrow")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.disabled", prefix)); changed {
		ov := &ADRSettings_DynamicMode_ChannelSteeringSettings_Disabled{}
		if ov.Disabled == nil {
			ov.Disabled = &ADRSettings_DynamicMode_ChannelSteeringSettings_DisabledMode{}
		}
		if setPaths, err := ov.Disabled.SetFromFlags(flags, flagsplugin.Prefix("mode.disabled", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.disabled")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	return paths, nil
}

// AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride adds flags to select fields in ADRSettings_DynamicMode_PerDataRateIndexOverride.
func AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-nb-trans", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-nb-trans", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-nb-trans", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-nb-trans", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forADRSettings_DynamicMode_PerDataRateIndexOverride message from select flags.
func PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min_nb_trans", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("min_nb_trans", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_nb_trans", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_nb_trans", prefix))
	}
	return paths, nil
}

// AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride adds flags to select fields in ADRSettings_DynamicMode_PerDataRateIndexOverride.
func AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("min-nb-trans", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("max-nb-trans", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ADRSettings_DynamicMode_PerDataRateIndexOverride message from flags.
func (m *ADRSettings_DynamicMode_PerDataRateIndexOverride) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("min_nb_trans", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MinNbTrans = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("min_nb_trans", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("max_nb_trans", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MaxNbTrans = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("max_nb_trans", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForADRSettings_DynamicMode_Overrides adds flags to select fields in ADRSettings_DynamicMode_Overrides.
func AddSelectFlagsForADRSettings_DynamicMode_Overrides(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-0", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-0", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-0", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-1", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-1", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-1", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-2", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-2", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-2", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-3", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-3", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-3", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-4", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-4", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-4", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-5", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-5", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-5", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-6", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-6", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-6", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-7", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-7", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-7", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-8", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-8", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-8", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-9", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-9", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-9", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-10", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-10", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-10", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-11", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-11", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-11", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-12", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-12", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-12", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-13", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-13", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-13", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-14", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-14", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-14", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data-rate-15", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data-rate-15", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-15", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forADRSettings_DynamicMode_Overrides message from select flags.
func PathsFromSelectFlagsForADRSettings_DynamicMode_Overrides(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_0", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_0", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_0", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_1", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_1", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_1", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_2", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_2", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_2", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_3", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_3", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_3", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_4", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_4", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_4", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_5", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_5", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_5", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_6", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_6", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_6", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_7", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_7", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_7", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_8", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_8", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_8", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_9", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_9", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_9", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_10", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_10", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_10", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_11", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_11", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_11", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_12", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_12", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_12", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_13", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_13", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_13", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_14", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_14", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_14", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data_rate_15", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data_rate_15", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data_rate_15", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForADRSettings_DynamicMode_Overrides adds flags to select fields in ADRSettings_DynamicMode_Overrides.
func AddSetFlagsForADRSettings_DynamicMode_Overrides(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-0", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-1", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-2", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-3", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-4", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-5", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-6", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-7", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-8", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-9", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-10", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-11", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-12", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-13", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-14", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_PerDataRateIndexOverride(flags, flagsplugin.Prefix("data-rate-15", prefix), hidden)
}

// SetFromFlags sets the ADRSettings_DynamicMode_Overrides message from flags.
func (m *ADRSettings_DynamicMode_Overrides) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_0", prefix)); changed {
		if m.DataRate_0 == nil {
			m.DataRate_0 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_0.SetFromFlags(flags, flagsplugin.Prefix("data_rate_0", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_1", prefix)); changed {
		if m.DataRate_1 == nil {
			m.DataRate_1 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_1.SetFromFlags(flags, flagsplugin.Prefix("data_rate_1", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_2", prefix)); changed {
		if m.DataRate_2 == nil {
			m.DataRate_2 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_2.SetFromFlags(flags, flagsplugin.Prefix("data_rate_2", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_3", prefix)); changed {
		if m.DataRate_3 == nil {
			m.DataRate_3 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_3.SetFromFlags(flags, flagsplugin.Prefix("data_rate_3", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_4", prefix)); changed {
		if m.DataRate_4 == nil {
			m.DataRate_4 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_4.SetFromFlags(flags, flagsplugin.Prefix("data_rate_4", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_5", prefix)); changed {
		if m.DataRate_5 == nil {
			m.DataRate_5 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_5.SetFromFlags(flags, flagsplugin.Prefix("data_rate_5", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_6", prefix)); changed {
		if m.DataRate_6 == nil {
			m.DataRate_6 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_6.SetFromFlags(flags, flagsplugin.Prefix("data_rate_6", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_7", prefix)); changed {
		if m.DataRate_7 == nil {
			m.DataRate_7 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_7.SetFromFlags(flags, flagsplugin.Prefix("data_rate_7", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_8", prefix)); changed {
		if m.DataRate_8 == nil {
			m.DataRate_8 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_8.SetFromFlags(flags, flagsplugin.Prefix("data_rate_8", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_9", prefix)); changed {
		if m.DataRate_9 == nil {
			m.DataRate_9 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_9.SetFromFlags(flags, flagsplugin.Prefix("data_rate_9", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_10", prefix)); changed {
		if m.DataRate_10 == nil {
			m.DataRate_10 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_10.SetFromFlags(flags, flagsplugin.Prefix("data_rate_10", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_11", prefix)); changed {
		if m.DataRate_11 == nil {
			m.DataRate_11 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_11.SetFromFlags(flags, flagsplugin.Prefix("data_rate_11", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_12", prefix)); changed {
		if m.DataRate_12 == nil {
			m.DataRate_12 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_12.SetFromFlags(flags, flagsplugin.Prefix("data_rate_12", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_13", prefix)); changed {
		if m.DataRate_13 == nil {
			m.DataRate_13 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_13.SetFromFlags(flags, flagsplugin.Prefix("data_rate_13", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_14", prefix)); changed {
		if m.DataRate_14 == nil {
			m.DataRate_14 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_14.SetFromFlags(flags, flagsplugin.Prefix("data_rate_14", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("data_rate_15", prefix)); changed {
		if m.DataRate_15 == nil {
			m.DataRate_15 = &ADRSettings_DynamicMode_PerDataRateIndexOverride{}
		}
		if setPaths, err := m.DataRate_15.SetFromFlags(flags, flagsplugin.Prefix("data_rate_15", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForADRSettings_DynamicMode adds flags to select fields in ADRSettings_DynamicMode.
func AddSelectFlagsForADRSettings_DynamicMode(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("margin", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("margin", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-data-rate-index", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("min-data-rate-index", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-data-rate-index", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("max-data-rate-index", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-tx-power-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-tx-power-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-tx-power-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-tx-power-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-nb-trans", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-nb-trans", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-nb-trans", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-nb-trans", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("channel-steering", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("channel-steering", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings(flags, flagsplugin.Prefix("channel-steering", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("overrides", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("overrides", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode_Overrides(flags, flagsplugin.Prefix("overrides", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forADRSettings_DynamicMode message from select flags.
func PathsFromSelectFlagsForADRSettings_DynamicMode(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("margin", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("margin", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("min_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min_tx_power_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("min_tx_power_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_tx_power_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_tx_power_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min_nb_trans", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("min_nb_trans", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_nb_trans", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_nb_trans", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("channel_steering", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("channel_steering", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_ChannelSteeringSettings(flags, flagsplugin.Prefix("channel_steering", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("overrides", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("overrides", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode_Overrides(flags, flagsplugin.Prefix("overrides", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForADRSettings_DynamicMode adds flags to select fields in ADRSettings_DynamicMode.
func AddSetFlagsForADRSettings_DynamicMode(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("margin", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("min-data-rate-index", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("min-data-rate-index.value", prefix), flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("max-data-rate-index", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("max-data-rate-index.value", prefix), flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.WithHidden(hidden))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("min-tx-power-index", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("max-tx-power-index", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("min-nb-trans", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("max-nb-trans", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForADRSettings_DynamicMode_ChannelSteeringSettings(flags, flagsplugin.Prefix("channel-steering", prefix), hidden)
	AddSetFlagsForADRSettings_DynamicMode_Overrides(flags, flagsplugin.Prefix("overrides", prefix), hidden)
}

// SetFromFlags sets the ADRSettings_DynamicMode message from flags.
func (m *ADRSettings_DynamicMode) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("margin", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Margin = &wrapperspb.FloatValue{Value: val}
		paths = append(paths, flagsplugin.Prefix("margin", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); changed {
		if m.MinDataRateIndex == nil {
			m.MinDataRateIndex = &DataRateIndexValue{}
		}
		if setPaths, err := m.MinDataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); changed {
		if m.MaxDataRateIndex == nil {
			m.MaxDataRateIndex = &DataRateIndexValue{}
		}
		if setPaths, err := m.MaxDataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("min_tx_power_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MinTxPowerIndex = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("min_tx_power_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("max_tx_power_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MaxTxPowerIndex = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("max_tx_power_index", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("min_nb_trans", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MinNbTrans = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("min_nb_trans", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("max_nb_trans", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MaxNbTrans = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("max_nb_trans", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("channel_steering", prefix)); changed {
		if m.ChannelSteering == nil {
			m.ChannelSteering = &ADRSettings_DynamicMode_ChannelSteeringSettings{}
		}
		if setPaths, err := m.ChannelSteering.SetFromFlags(flags, flagsplugin.Prefix("channel_steering", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("overrides", prefix)); changed {
		if m.Overrides == nil {
			m.Overrides = &ADRSettings_DynamicMode_Overrides{}
		}
		if setPaths, err := m.Overrides.SetFromFlags(flags, flagsplugin.Prefix("overrides", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForADRSettings_DisabledMode adds flags to select fields in ADRSettings_DisabledMode.
func AddSelectFlagsForADRSettings_DisabledMode(flags *pflag.FlagSet, prefix string, hidden bool) {
}

// SelectFromFlags outputs the fieldmask paths forADRSettings_DisabledMode message from select flags.
func PathsFromSelectFlagsForADRSettings_DisabledMode(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	return paths, nil
}

// AddSetFlagsForADRSettings_DisabledMode adds flags to select fields in ADRSettings_DisabledMode.
func AddSetFlagsForADRSettings_DisabledMode(flags *pflag.FlagSet, prefix string, hidden bool) {
}

// SetFromFlags sets the ADRSettings_DisabledMode message from flags.
func (m *ADRSettings_DisabledMode) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	return paths, nil
}

// AddSelectFlagsForADRSettings adds flags to select fields in ADRSettings.
func AddSelectFlagsForADRSettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.static", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.static", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_StaticMode(flags, flagsplugin.Prefix("mode.static", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.dynamic", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.dynamic", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DynamicMode(flags, flagsplugin.Prefix("mode.dynamic", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.disabled", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mode.disabled", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings_DisabledMode(flags, flagsplugin.Prefix("mode.disabled", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forADRSettings message from select flags.
func PathsFromSelectFlagsForADRSettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.static", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.static", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_StaticMode(flags, flagsplugin.Prefix("mode.static", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.dynamic", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.dynamic", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DynamicMode(flags, flagsplugin.Prefix("mode.dynamic", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mode.disabled", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mode.disabled", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings_DisabledMode(flags, flagsplugin.Prefix("mode.disabled", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForADRSettings adds flags to select fields in ADRSettings.
func AddSetFlagsForADRSettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForADRSettings_StaticMode(flags, flagsplugin.Prefix("mode.static", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.static", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForADRSettings_DynamicMode(flags, flagsplugin.Prefix("mode.dynamic", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.dynamic", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForADRSettings_DisabledMode(flags, flagsplugin.Prefix("mode.disabled", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mode.disabled", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ADRSettings message from flags.
func (m *ADRSettings) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.static", prefix)); changed {
		ov := &ADRSettings_Static{}
		if ov.Static == nil {
			ov.Static = &ADRSettings_StaticMode{}
		}
		if setPaths, err := ov.Static.SetFromFlags(flags, flagsplugin.Prefix("mode.static", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.static")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.dynamic", prefix)); changed {
		ov := &ADRSettings_Dynamic{}
		if ov.Dynamic == nil {
			ov.Dynamic = &ADRSettings_DynamicMode{}
		}
		if setPaths, err := ov.Dynamic.SetFromFlags(flags, flagsplugin.Prefix("mode.dynamic", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.dynamic")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mode.disabled", prefix)); changed {
		ov := &ADRSettings_Disabled{}
		if ov.Disabled == nil {
			ov.Disabled = &ADRSettings_DisabledMode{}
		}
		if setPaths, err := ov.Disabled.SetFromFlags(flags, flagsplugin.Prefix("mode.disabled", prefix)); err != nil {
			return nil, err
		} else if len(setPaths) == 0 {
			paths = append(paths, "mode.disabled")
		} else {
			paths = append(paths, setPaths...)
		}
		m.Mode = ov
	}
	return paths, nil
}

// AddSelectFlagsForMACSettings adds flags to select fields in MACSettings.
func AddSelectFlagsForMACSettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-b-timeout", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-b-timeout", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-periodicity", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-data-rate-index", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-frequency", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("ping-slot-frequency", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("beacon-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("beacon-frequency", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("beacon-frequency", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-c-timeout", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-c-timeout", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-delay", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("rx1-delay", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx1-data-rate-offset", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-data-rate-index", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx2-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx2-frequency", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("rx2-frequency", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("factory-preset-frequencies", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("factory-preset-frequencies", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-duty-cycle", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("max-duty-cycle", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("use-adr", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("use-adr", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("use-adr", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr-margin", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr-margin", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("resets-f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("resets-f-cnt", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("resets-f-cnt", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-time-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status-time-periodicity", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-count-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status-count-periodicity", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx1-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx1-delay", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("desired-rx1-delay", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-rx2-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-rx2-frequency", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-max-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-max-duty-cycle", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-ping-slot-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-ping-slot-frequency", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-beacon-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-beacon-frequency", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-max-eirp", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-max-eirp", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDeviceEIRPValue(flags, flagsplugin.Prefix("desired-max-eirp", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-b-c-downlink-interval", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-b-c-downlink-interval", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("uplink-dwell-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("uplink-dwell-time", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("uplink-dwell-time", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-dwell-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-dwell-time", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("downlink-dwell-time", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("adr", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("adr", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForADRSettings(flags, flagsplugin.Prefix("adr", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("schedule-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("schedule-downlinks", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForBoolValue(flags, flagsplugin.Prefix("schedule-downlinks", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("relay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("relay", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelaySettings(flags, flagsplugin.Prefix("relay", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-relay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-relay", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelaySettings(flags, flagsplugin.Prefix("desired-relay", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forMACSettings message from select flags.
func PathsFromSelectFlagsForMACSettings(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class_b_timeout", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("class_b_timeout", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_periodicity", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("beacon_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class_c_timeout", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("class_c_timeout", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx1_delay", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx1_data_rate_offset", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx2_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx2_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("factory_preset_frequencies", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("factory_preset_frequencies", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_duty_cycle", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("use_adr", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("use_adr", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("use_adr", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr_margin", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr_margin", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("resets_f_cnt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("resets_f_cnt", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("resets_f_cnt", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status_time_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("status_time_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status_count_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("status_count_periodicity", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_rx1_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_rx1_delay", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRxDelayValue(flags, flagsplugin.Prefix("desired_rx1_delay", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_rx2_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_rx2_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired_rx2_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_max_duty_cycle", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("desired_max_duty_cycle", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_ping_slot_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("desired_ping_slot_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_beacon_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_beacon_frequency", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("desired_beacon_frequency", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_max_eirp", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_max_eirp", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDeviceEIRPValue(flags, flagsplugin.Prefix("desired_max_eirp", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class_b_c_downlink_interval", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("class_b_c_downlink_interval", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("uplink_dwell_time", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_dwell_time", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("adr", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("adr", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForADRSettings(flags, flagsplugin.Prefix("adr", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("schedule_downlinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("schedule_downlinks", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForBoolValue(flags, flagsplugin.Prefix("schedule_downlinks", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("relay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("relay", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelaySettings(flags, flagsplugin.Prefix("relay", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_relay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_relay", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelaySettings(flags, flagsplugin.Prefix("desired_relay", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForMACSettings adds flags to select fields in MACSettings.
func AddSetFlagsForMACSettings(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("class-b-timeout", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-periodicity.value", prefix), flagsplugin.Prefix("ping-slot-periodicity", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("ping-slot-data-rate-index", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-data-rate-index.value", prefix), flagsplugin.Prefix("ping-slot-data-rate-index", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("ping-slot-frequency", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-frequency.value", prefix), flagsplugin.Prefix("ping-slot-frequency", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("beacon-frequency", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("beacon-frequency.value", prefix), flagsplugin.Prefix("beacon-frequency", prefix), flagsplugin.WithHidden(hidden))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("class-c-timeout", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRxDelayValue(flags, flagsplugin.Prefix("rx1-delay", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx1-delay.value", prefix), flagsplugin.Prefix("rx1-delay", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("rx1-data-rate-offset", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx1-data-rate-offset.value", prefix), flagsplugin.Prefix("rx1-data-rate-offset", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("rx2-data-rate-index", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx2-data-rate-index.value", prefix), flagsplugin.Prefix("rx2-data-rate-index", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("rx2-frequency", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("rx2-frequency.value", prefix), flagsplugin.Prefix("rx2-frequency", prefix), flagsplugin.WithHidden(hidden))
	flags.AddFlag(flagsplugin.NewUint64SliceFlag(flagsplugin.Prefix("factory-preset-frequencies", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("max-duty-cycle", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("max-duty-cycle.value", prefix), flagsplugin.Prefix("max-duty-cycle", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("supports-32-bit-f-cnt.value", prefix), flagsplugin.Prefix("supports-32-bit-f-cnt", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("use-adr", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("use-adr.value", prefix), flagsplugin.Prefix("use-adr", prefix), flagsplugin.WithHidden(hidden))
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("adr-margin", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("resets-f-cnt", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("resets-f-cnt.value", prefix), flagsplugin.Prefix("resets-f-cnt", prefix), flagsplugin.WithHidden(hidden))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("status-time-periodicity", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("status-count-periodicity", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRxDelayValue(flags, flagsplugin.Prefix("desired-rx1-delay", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx1-delay.value", prefix), flagsplugin.Prefix("desired-rx1-delay", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForDataRateOffsetValue(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx1-data-rate-offset.value", prefix), flagsplugin.Prefix("desired-rx1-data-rate-offset", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx2-data-rate-index.value", prefix), flagsplugin.Prefix("desired-rx2-data-rate-index", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForFrequencyValue(flags, flagsplugin.Prefix("desired-rx2-frequency", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-rx2-frequency.value", prefix), flagsplugin.Prefix("desired-rx2-frequency", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForAggregatedDutyCycleValue(flags, flagsplugin.Prefix("desired-max-duty-cycle", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-max-duty-cycle.value", prefix), flagsplugin.Prefix("desired-max-duty-cycle", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForADRAckLimitExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-adr-ack-limit-exponent.value", prefix), flagsplugin.Prefix("desired-adr-ack-limit-exponent", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForADRAckDelayExponentValue(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-adr-ack-delay-exponent.value", prefix), flagsplugin.Prefix("desired-adr-ack-delay-exponent", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForDataRateIndexValue(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-ping-slot-data-rate-index.value", prefix), flagsplugin.Prefix("desired-ping-slot-data-rate-index", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("desired-ping-slot-frequency", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-ping-slot-frequency.value", prefix), flagsplugin.Prefix("desired-ping-slot-frequency", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForZeroableFrequencyValue(flags, flagsplugin.Prefix("desired-beacon-frequency", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-beacon-frequency.value", prefix), flagsplugin.Prefix("desired-beacon-frequency", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForDeviceEIRPValue(flags, flagsplugin.Prefix("desired-max-eirp", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("desired-max-eirp.value", prefix), flagsplugin.Prefix("desired-max-eirp", prefix), flagsplugin.WithHidden(hidden))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("class-b-c-downlink-interval", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("uplink-dwell-time", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("uplink-dwell-time.value", prefix), flagsplugin.Prefix("uplink-dwell-time", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("downlink-dwell-time", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("downlink-dwell-time.value", prefix), flagsplugin.Prefix("downlink-dwell-time", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForADRSettings(flags, flagsplugin.Prefix("adr", prefix), hidden)
	AddSetFlagsForBoolValue(flags, flagsplugin.Prefix("schedule-downlinks", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("schedule-downlinks.value", prefix), flagsplugin.Prefix("schedule-downlinks", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForRelaySettings(flags, flagsplugin.Prefix("relay", prefix), hidden)
	AddSetFlagsForRelaySettings(flags, flagsplugin.Prefix("desired-relay", prefix), hidden)
}

// SetFromFlags sets the MACSettings message from flags.
func (m *MACSettings) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("class_b_timeout", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ClassBTimeout = golang.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("class_b_timeout", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); changed {
		if m.PingSlotPeriodicity == nil {
			m.PingSlotPeriodicity = &PingSlotPeriodValue{}
		}
		if setPaths, err := m.PingSlotPeriodicity.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); changed {
		if m.PingSlotDataRateIndex == nil {
			m.PingSlotDataRateIndex = &DataRateIndexValue{}
		}
		if setPaths, err := m.PingSlotDataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); changed {
		if m.PingSlotFrequency == nil {
			m.PingSlotFrequency = &ZeroableFrequencyValue{}
		}
		if setPaths, err := m.PingSlotFrequency.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("beacon_frequency", prefix)); changed {
		if m.BeaconFrequency == nil {
			m.BeaconFrequency = &ZeroableFrequencyValue{}
		}
		if setPaths, err := m.BeaconFrequency.SetFromFlags(flags, flagsplugin.Prefix("beacon_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("class_c_timeout", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ClassCTimeout = golang.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("class_c_timeout", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx1_delay", prefix)); changed {
		if m.Rx1Delay == nil {
			m.Rx1Delay = &RxDelayValue{}
		}
		if setPaths, err := m.Rx1Delay.SetFromFlags(flags, flagsplugin.Prefix("rx1_delay", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); changed {
		if m.Rx1DataRateOffset == nil {
			m.Rx1DataRateOffset = &DataRateOffsetValue{}
		}
		if setPaths, err := m.Rx1DataRateOffset.SetFromFlags(flags, flagsplugin.Prefix("rx1_data_rate_offset", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); changed {
		if m.Rx2DataRateIndex == nil {
			m.Rx2DataRateIndex = &DataRateIndexValue{}
		}
		if setPaths, err := m.Rx2DataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("rx2_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("rx2_frequency", prefix)); changed {
		if m.Rx2Frequency == nil {
			m.Rx2Frequency = &FrequencyValue{}
		}
		if setPaths, err := m.Rx2Frequency.SetFromFlags(flags, flagsplugin.Prefix("rx2_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint64Slice(flags, flagsplugin.Prefix("factory_preset_frequencies", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FactoryPresetFrequencies = val
		paths = append(paths, flagsplugin.Prefix("factory_preset_frequencies", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); changed {
		if m.MaxDutyCycle == nil {
			m.MaxDutyCycle = &AggregatedDutyCycleValue{}
		}
		if setPaths, err := m.MaxDutyCycle.SetFromFlags(flags, flagsplugin.Prefix("max_duty_cycle", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix)); changed {
		if m.Supports_32BitFCnt == nil {
			m.Supports_32BitFCnt = &BoolValue{}
		}
		if setPaths, err := m.Supports_32BitFCnt.SetFromFlags(flags, flagsplugin.Prefix("supports_32_bit_f_cnt", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("use_adr", prefix)); changed {
		if m.UseAdr == nil {
			m.UseAdr = &BoolValue{}
		}
		if setPaths, err := m.UseAdr.SetFromFlags(flags, flagsplugin.Prefix("use_adr", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("adr_margin", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AdrMargin = &wrapperspb.FloatValue{Value: val}
		paths = append(paths, flagsplugin.Prefix("adr_margin", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("resets_f_cnt", prefix)); changed {
		if m.ResetsFCnt == nil {
			m.ResetsFCnt = &BoolValue{}
		}
		if setPaths, err := m.ResetsFCnt.SetFromFlags(flags, flagsplugin.Prefix("resets_f_cnt", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("status_time_periodicity", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.StatusTimePeriodicity = golang.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("status_time_periodicity", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("status_count_periodicity", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.StatusCountPeriodicity = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("status_count_periodicity", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_rx1_delay", prefix)); changed {
		if m.DesiredRx1Delay == nil {
			m.DesiredRx1Delay = &RxDelayValue{}
		}
		if setPaths, err := m.DesiredRx1Delay.SetFromFlags(flags, flagsplugin.Prefix("desired_rx1_delay", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix)); changed {
		if m.DesiredRx1DataRateOffset == nil {
			m.DesiredRx1DataRateOffset = &DataRateOffsetValue{}
		}
		if setPaths, err := m.DesiredRx1DataRateOffset.SetFromFlags(flags, flagsplugin.Prefix("desired_rx1_data_rate_offset", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix)); changed {
		if m.DesiredRx2DataRateIndex == nil {
			m.DesiredRx2DataRateIndex = &DataRateIndexValue{}
		}
		if setPaths, err := m.DesiredRx2DataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("desired_rx2_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_rx2_frequency", prefix)); changed {
		if m.DesiredRx2Frequency == nil {
			m.DesiredRx2Frequency = &FrequencyValue{}
		}
		if setPaths, err := m.DesiredRx2Frequency.SetFromFlags(flags, flagsplugin.Prefix("desired_rx2_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_max_duty_cycle", prefix)); changed {
		if m.DesiredMaxDutyCycle == nil {
			m.DesiredMaxDutyCycle = &AggregatedDutyCycleValue{}
		}
		if setPaths, err := m.DesiredMaxDutyCycle.SetFromFlags(flags, flagsplugin.Prefix("desired_max_duty_cycle", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix)); changed {
		if m.DesiredAdrAckLimitExponent == nil {
			m.DesiredAdrAckLimitExponent = &ADRAckLimitExponentValue{}
		}
		if setPaths, err := m.DesiredAdrAckLimitExponent.SetFromFlags(flags, flagsplugin.Prefix("desired_adr_ack_limit_exponent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix)); changed {
		if m.DesiredAdrAckDelayExponent == nil {
			m.DesiredAdrAckDelayExponent = &ADRAckDelayExponentValue{}
		}
		if setPaths, err := m.DesiredAdrAckDelayExponent.SetFromFlags(flags, flagsplugin.Prefix("desired_adr_ack_delay_exponent", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix)); changed {
		if m.DesiredPingSlotDataRateIndex == nil {
			m.DesiredPingSlotDataRateIndex = &DataRateIndexValue{}
		}
		if setPaths, err := m.DesiredPingSlotDataRateIndex.SetFromFlags(flags, flagsplugin.Prefix("desired_ping_slot_data_rate_index", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_ping_slot_frequency", prefix)); changed {
		if m.DesiredPingSlotFrequency == nil {
			m.DesiredPingSlotFrequency = &ZeroableFrequencyValue{}
		}
		if setPaths, err := m.DesiredPingSlotFrequency.SetFromFlags(flags, flagsplugin.Prefix("desired_ping_slot_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_beacon_frequency", prefix)); changed {
		if m.DesiredBeaconFrequency == nil {
			m.DesiredBeaconFrequency = &ZeroableFrequencyValue{}
		}
		if setPaths, err := m.DesiredBeaconFrequency.SetFromFlags(flags, flagsplugin.Prefix("desired_beacon_frequency", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_max_eirp", prefix)); changed {
		if m.DesiredMaxEirp == nil {
			m.DesiredMaxEirp = &DeviceEIRPValue{}
		}
		if setPaths, err := m.DesiredMaxEirp.SetFromFlags(flags, flagsplugin.Prefix("desired_max_eirp", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("class_b_c_downlink_interval", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ClassBCDownlinkInterval = golang.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("class_b_c_downlink_interval", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); changed {
		if m.UplinkDwellTime == nil {
			m.UplinkDwellTime = &BoolValue{}
		}
		if setPaths, err := m.UplinkDwellTime.SetFromFlags(flags, flagsplugin.Prefix("uplink_dwell_time", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); changed {
		if m.DownlinkDwellTime == nil {
			m.DownlinkDwellTime = &BoolValue{}
		}
		if setPaths, err := m.DownlinkDwellTime.SetFromFlags(flags, flagsplugin.Prefix("downlink_dwell_time", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("adr", prefix)); changed {
		if m.Adr == nil {
			m.Adr = &ADRSettings{}
		}
		if setPaths, err := m.Adr.SetFromFlags(flags, flagsplugin.Prefix("adr", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("schedule_downlinks", prefix)); changed {
		if m.ScheduleDownlinks == nil {
			m.ScheduleDownlinks = &BoolValue{}
		}
		if setPaths, err := m.ScheduleDownlinks.SetFromFlags(flags, flagsplugin.Prefix("schedule_downlinks", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("relay", prefix)); changed {
		if m.Relay == nil {
			m.Relay = &RelaySettings{}
		}
		if setPaths, err := m.Relay.SetFromFlags(flags, flagsplugin.Prefix("relay", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_relay", prefix)); changed {
		if m.DesiredRelay == nil {
			m.DesiredRelay = &RelaySettings{}
		}
		if setPaths, err := m.DesiredRelay.SetFromFlags(flags, flagsplugin.Prefix("desired_relay", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForMACState_JoinRequest adds flags to select fields in MACState_JoinRequest.
func AddSelectFlagsForMACState_JoinRequest(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-settings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-settings", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForDLSettings(flags, flagsplugin.Prefix("downlink-settings", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx-delay", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("cf-list", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("cf-list", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForCFList(flags, flagsplugin.Prefix("cf-list", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forMACState_JoinRequest message from select flags.
func PathsFromSelectFlagsForMACState_JoinRequest(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_settings", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_settings", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForDLSettings(flags, flagsplugin.Prefix("downlink_settings", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx_delay", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("cf_list", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("cf_list", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForCFList(flags, flagsplugin.Prefix("cf_list", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForMACState_JoinRequest adds flags to select fields in MACState_JoinRequest.
func AddSetFlagsForMACState_JoinRequest(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForDLSettings(flags, flagsplugin.Prefix("downlink-settings", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("rx-delay", prefix), flagsplugin.EnumValueDesc(RxDelay_value, RxDelay_customvalue), flagsplugin.WithHidden(hidden)))
	AddSetFlagsForCFList(flags, flagsplugin.Prefix("cf-list", prefix), hidden)
}

// SetFromFlags sets the MACState_JoinRequest message from flags.
func (m *MACState_JoinRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("downlink_settings", prefix)); changed {
		if m.DownlinkSettings == nil {
			m.DownlinkSettings = &DLSettings{}
		}
		if setPaths, err := m.DownlinkSettings.SetFromFlags(flags, flagsplugin.Prefix("downlink_settings", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("rx_delay", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, RxDelay_value, RxDelay_customvalue)
		if err != nil {
			return nil, err
		}
		m.RxDelay = RxDelay(enumValue)
		paths = append(paths, flagsplugin.Prefix("rx_delay", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("cf_list", prefix)); changed {
		if m.CfList == nil {
			m.CfList = &CFList{}
		}
		if setPaths, err := m.CfList.SetFromFlags(flags, flagsplugin.Prefix("cf_list", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForMACState_JoinAccept adds flags to select fields in MACState_JoinAccept.
func AddSelectFlagsForMACState_JoinAccept(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("payload", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("request", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("request", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForMACState_JoinRequest(flags, flagsplugin.Prefix("request", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("keys", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("keys", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForSessionKeys(flags, flagsplugin.Prefix("keys", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("correlation-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("correlation-ids", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("dev-addr", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("dev-addr", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("net-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("net-id", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forMACState_JoinAccept message from select flags.
func PathsFromSelectFlagsForMACState_JoinAccept(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("payload", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("payload", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("request", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("request", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACState_JoinRequest(flags, flagsplugin.Prefix("request", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("keys", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("keys", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForSessionKeys(flags, flagsplugin.Prefix("keys", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("correlation_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("correlation_ids", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("dev_addr", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("dev_addr", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("net_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("net_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForMACState_JoinAccept adds flags to select fields in MACState_JoinAccept.
func AddSetFlagsForMACState_JoinAccept(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("payload", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForMACState_JoinRequest(flags, flagsplugin.Prefix("request", prefix), hidden)
	AddSetFlagsForSessionKeys(flags, flagsplugin.Prefix("keys", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("correlation-ids", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(customflags.New4BytesFlag(flagsplugin.Prefix("dev-addr", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(customflags.New3BytesFlag(flagsplugin.Prefix("net-id", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the MACState_JoinAccept message from flags.
func (m *MACState_JoinAccept) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("payload", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Payload = val
		paths = append(paths, flagsplugin.Prefix("payload", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("request", prefix)); changed {
		if m.Request == nil {
			m.Request = &MACState_JoinRequest{}
		}
		if setPaths, err := m.Request.SetFromFlags(flags, flagsplugin.Prefix("request", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("keys", prefix)); changed {
		if m.Keys == nil {
			m.Keys = &SessionKeys{}
		}
		if setPaths, err := m.Keys.SetFromFlags(flags, flagsplugin.Prefix("keys", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("correlation_ids", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.CorrelationIds = val
		paths = append(paths, flagsplugin.Prefix("correlation_ids", prefix))
	}
	if val, changed, err := customflags.GetExactBytes(flags, flagsplugin.Prefix("dev_addr", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DevAddr = val
		paths = append(paths, flagsplugin.Prefix("dev_addr", prefix))
	}
	if val, changed, err := customflags.GetExactBytes(flags, flagsplugin.Prefix("net_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.NetId = val
		paths = append(paths, flagsplugin.Prefix("net_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForMACState_DataRateRange adds flags to select fields in MACState_DataRateRange.
func AddSelectFlagsForMACState_DataRateRange(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-data-rate-index", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-data-rate-index", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forMACState_DataRateRange message from select flags.
func PathsFromSelectFlagsForMACState_DataRateRange(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("min_data_rate_index", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_data_rate_index", prefix))
	}
	return paths, nil
}

// AddSetFlagsForMACState_DataRateRange adds flags to select fields in MACState_DataRateRange.
func AddSetFlagsForMACState_DataRateRange(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("min-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value, DataRateIndex_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("max-data-rate-index", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value, DataRateIndex_customvalue), flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the MACState_DataRateRange message from flags.
func (m *MACState_DataRateRange) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("min_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value, DataRateIndex_customvalue)
		if err != nil {
			return nil, err
		}
		m.MinDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("min_data_rate_index", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("max_data_rate_index", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DataRateIndex_value, DataRateIndex_customvalue)
		if err != nil {
			return nil, err
		}
		m.MaxDataRateIndex = DataRateIndex(enumValue)
		paths = append(paths, flagsplugin.Prefix("max_data_rate_index", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForMACState_DataRateRanges adds flags to select fields in MACState_DataRateRanges.
func AddSelectFlagsForMACState_DataRateRanges(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ranges", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ranges", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forMACState_DataRateRanges message from select flags.
func PathsFromSelectFlagsForMACState_DataRateRanges(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ranges", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ranges", prefix))
	}
	return paths, nil
}

// AddSetFlagsForMACState_DataRateRanges adds flags to select fields in MACState_DataRateRanges.
func AddSetFlagsForMACState_DataRateRanges(flags *pflag.FlagSet, prefix string, hidden bool) {
	// FIXME: Skipping Ranges because repeated messages are currently not supported.
}

// SetFromFlags sets the MACState_DataRateRanges message from flags.
func (m *MACState_DataRateRanges) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	// FIXME: Skipping Ranges because it does not seem to implement AddSetFlags.
	return paths, nil
}

// AddSelectFlagsForMACState adds flags to select fields in MACState.
func AddSelectFlagsForMACState(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("current-parameters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("current-parameters", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForMACParameters(flags, flagsplugin.Prefix("current-parameters", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("desired-parameters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("desired-parameters", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForMACParameters(flags, flagsplugin.Prefix("desired-parameters", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("device-class", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("device-class", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lorawan-version", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-confirmed-downlink-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-confirmed-downlink-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ping-slot-periodicity", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ping-slot-periodicity", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix), true)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-application-downlink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-application-downlink", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("pending-application-downlink", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-responses", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-responses", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-requests", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-requests", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-join-accept", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-join-accept", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForMACState_JoinAccept(flags, flagsplugin.Prefix("queued-join-accept", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-join-request", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-join-request", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForMACState_JoinRequest(flags, flagsplugin.Prefix("pending-join-request", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-windows-available", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx-windows-available", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("recent-uplinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("recent-uplinks", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("recent-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("recent-downlinks", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-frequencies", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-frequencies", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-downlink-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-downlink-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rejected-data-rate-ranges", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rejected-data-rate-ranges", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("recent-mac-command-identifiers", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("recent-mac-command-identifiers", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-relay-downlink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-relay-downlink", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRelayForwardDownlinkReq(flags, flagsplugin.Prefix("pending-relay-downlink", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("cipher-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("cipher-id", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forMACState message from select flags.
func PathsFromSelectFlagsForMACState(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("current_parameters", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("current_parameters", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACParameters(flags, flagsplugin.Prefix("current_parameters", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("desired_parameters", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("desired_parameters", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACParameters(flags, flagsplugin.Prefix("desired_parameters", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("device_class", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("device_class", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lorawan_version", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lorawan_version", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_confirmed_downlink_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_confirmed_downlink_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_dev_status_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_dev_status_f_cnt_up", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ping_slot_periodicity", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_application_downlink", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_application_downlink", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("pending_application_downlink", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued_responses", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("queued_responses", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_requests", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_requests", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued_join_accept", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("queued_join_accept", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACState_JoinAccept(flags, flagsplugin.Prefix("queued_join_accept", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_join_request", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_join_request", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACState_JoinRequest(flags, flagsplugin.Prefix("pending_join_request", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx_windows_available", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx_windows_available", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("recent_uplinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("recent_uplinks", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("recent_downlinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("recent_downlinks", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_network_initiated_downlink_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_network_initiated_downlink_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected_adr_data_rate_indexes", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejected_adr_data_rate_indexes", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected_adr_tx_power_indexes", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejected_adr_tx_power_indexes", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected_frequencies", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejected_frequencies", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_downlink_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_downlink_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rejected_data_rate_ranges", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rejected_data_rate_ranges", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_adr_change_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_adr_change_f_cnt_up", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("recent_mac_command_identifiers", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("recent_mac_command_identifiers", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_relay_downlink", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_relay_downlink", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRelayForwardDownlinkReq(flags, flagsplugin.Prefix("pending_relay_downlink", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("cipher_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("cipher_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForMACState adds flags to select fields in MACState.
func AddSetFlagsForMACState(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForMACParameters(flags, flagsplugin.Prefix("current-parameters", prefix), hidden)
	AddSetFlagsForMACParameters(flags, flagsplugin.Prefix("desired-parameters", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("device-class", prefix), flagsplugin.EnumValueDesc(Class_value), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.EnumValueDesc(MACVersion_value, MACVersion_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-confirmed-downlink-at", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-dev-status-f-cnt-up", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForPingSlotPeriodValue(flags, flagsplugin.Prefix("ping-slot-periodicity", prefix), true)
	flagsplugin.AddAlias(flags, flagsplugin.Prefix("ping-slot-periodicity.value", prefix), flagsplugin.Prefix("ping-slot-periodicity", prefix), flagsplugin.WithHidden(hidden))
	AddSetFlagsForApplicationDownlink(flags, flagsplugin.Prefix("pending-application-downlink", prefix), hidden)
	// FIXME: Skipping QueuedResponses because repeated messages are currently not supported.
	// FIXME: Skipping PendingRequests because repeated messages are currently not supported.
	AddSetFlagsForMACState_JoinAccept(flags, flagsplugin.Prefix("queued-join-accept", prefix), hidden)
	AddSetFlagsForMACState_JoinRequest(flags, flagsplugin.Prefix("pending-join-request", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-windows-available", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping RecentUplinks because repeated messages are currently not supported.
	// FIXME: Skipping RecentDownlinks because repeated messages are currently not supported.
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-network-initiated-downlink-at", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("rejected-adr-data-rate-indexes", prefix), flagsplugin.EnumValueDesc(DataRateIndex_value, DataRateIndex_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32SliceFlag(flagsplugin.Prefix("rejected-adr-tx-power-indexes", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint64SliceFlag(flagsplugin.Prefix("rejected-frequencies", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-downlink-at", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping RejectedDataRateRanges because maps with uint64 key types are currently not supported.
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-adr-change-f-cnt-up", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("recent-mac-command-identifiers", prefix), flagsplugin.EnumValueDesc(MACCommandIdentifier_value), flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRelayForwardDownlinkReq(flags, flagsplugin.Prefix("pending-relay-downlink", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("cipher-id", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the MACState message from flags.
func (m *MACState) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("current_parameters", prefix)); changed {
		if m.CurrentParameters == nil {
			m.CurrentParameters = &MACParameters{}
		}
		if setPaths, err := m.CurrentParameters.SetFromFlags(flags, flagsplugin.Prefix("current_parameters", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("desired_parameters", prefix)); changed {
		if m.DesiredParameters == nil {
			m.DesiredParameters = &MACParameters{}
		}
		if setPaths, err := m.DesiredParameters.SetFromFlags(flags, flagsplugin.Prefix("desired_parameters", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("device_class", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, Class_value)
		if err != nil {
			return nil, err
		}
		m.DeviceClass = Class(enumValue)
		paths = append(paths, flagsplugin.Prefix("device_class", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("lorawan_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, MACVersion_value, MACVersion_customvalue)
		if err != nil {
			return nil, err
		}
		m.LorawanVersion = MACVersion(enumValue)
		paths = append(paths, flagsplugin.Prefix("lorawan_version", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last_confirmed_downlink_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastConfirmedDownlinkAt = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("last_confirmed_downlink_at", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_dev_status_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastDevStatusFCntUp = val
		paths = append(paths, flagsplugin.Prefix("last_dev_status_f_cnt_up", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); changed {
		if m.PingSlotPeriodicity == nil {
			m.PingSlotPeriodicity = &PingSlotPeriodValue{}
		}
		if setPaths, err := m.PingSlotPeriodicity.SetFromFlags(flags, flagsplugin.Prefix("ping_slot_periodicity", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("pending_application_downlink", prefix)); changed {
		if m.PendingApplicationDownlink == nil {
			m.PendingApplicationDownlink = &ApplicationDownlink{}
		}
		if setPaths, err := m.PendingApplicationDownlink.SetFromFlags(flags, flagsplugin.Prefix("pending_application_downlink", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	// FIXME: Skipping QueuedResponses because it does not seem to implement AddSetFlags.
	// FIXME: Skipping PendingRequests because it does not seem to implement AddSetFlags.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("queued_join_accept", prefix)); changed {
		if m.QueuedJoinAccept == nil {
			m.QueuedJoinAccept = &MACState_JoinAccept{}
		}
		if setPaths, err := m.QueuedJoinAccept.SetFromFlags(flags, flagsplugin.Prefix("queued_join_accept", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("pending_join_request", prefix)); changed {
		if m.PendingJoinRequest == nil {
			m.PendingJoinRequest = &MACState_JoinRequest{}
		}
		if setPaths, err := m.PendingJoinRequest.SetFromFlags(flags, flagsplugin.Prefix("pending_join_request", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx_windows_available", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RxWindowsAvailable = val
		paths = append(paths, flagsplugin.Prefix("rx_windows_available", prefix))
	}
	// FIXME: Skipping RecentUplinks because it does not seem to implement AddSetFlags.
	// FIXME: Skipping RecentDownlinks because it does not seem to implement AddSetFlags.
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last_network_initiated_downlink_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastNetworkInitiatedDownlinkAt = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("last_network_initiated_downlink_at", prefix))
	}
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("rejected_adr_data_rate_indexes", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RejectedAdrDataRateIndexes = make([]DataRateIndex, len(val))
		for i, v := range val {
			enumValue, err := flagsplugin.SetEnumString(v, DataRateIndex_value, DataRateIndex_customvalue)
			if err != nil {
				return nil, err
			}
			m.RejectedAdrDataRateIndexes[i] = DataRateIndex(enumValue)
		}
		paths = append(paths, flagsplugin.Prefix("rejected_adr_data_rate_indexes", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32Slice(flags, flagsplugin.Prefix("rejected_adr_tx_power_indexes", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RejectedAdrTxPowerIndexes = val
		paths = append(paths, flagsplugin.Prefix("rejected_adr_tx_power_indexes", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64Slice(flags, flagsplugin.Prefix("rejected_frequencies", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RejectedFrequencies = val
		paths = append(paths, flagsplugin.Prefix("rejected_frequencies", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last_downlink_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastDownlinkAt = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("last_downlink_at", prefix))
	}
	// FIXME: Skipping RejectedDataRateRanges because maps with uint64 key types are currently not supported.
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_adr_change_f_cnt_up", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastAdrChangeFCntUp = val
		paths = append(paths, flagsplugin.Prefix("last_adr_change_f_cnt_up", prefix))
	}
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("recent_mac_command_identifiers", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RecentMacCommandIdentifiers = make([]MACCommandIdentifier, len(val))
		for i, v := range val {
			enumValue, err := flagsplugin.SetEnumString(v, MACCommandIdentifier_value)
			if err != nil {
				return nil, err
			}
			m.RecentMacCommandIdentifiers[i] = MACCommandIdentifier(enumValue)
		}
		paths = append(paths, flagsplugin.Prefix("recent_mac_command_identifiers", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("pending_relay_downlink", prefix)); changed {
		if m.PendingRelayDownlink == nil {
			m.PendingRelayDownlink = &RelayForwardDownlinkReq{}
		}
		if setPaths, err := m.PendingRelayDownlink.SetFromFlags(flags, flagsplugin.Prefix("pending_relay_downlink", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("cipher_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.CipherId = val
		paths = append(paths, flagsplugin.Prefix("cipher_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForEndDeviceAuthenticationCode adds flags to select fields in EndDeviceAuthenticationCode.
func AddSelectFlagsForEndDeviceAuthenticationCode(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("value", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("value", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("valid-from", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("valid-from", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("valid-to", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("valid-to", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forEndDeviceAuthenticationCode message from select flags.
func PathsFromSelectFlagsForEndDeviceAuthenticationCode(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("valid_from", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("valid_from", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("valid_to", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("valid_to", prefix))
	}
	return paths, nil
}

// AddSetFlagsForEndDeviceAuthenticationCode adds flags to select fields in EndDeviceAuthenticationCode.
func AddSetFlagsForEndDeviceAuthenticationCode(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("value", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("valid-from", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("valid-to", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the EndDeviceAuthenticationCode message from flags.
func (m *EndDeviceAuthenticationCode) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("value", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Value = val
		paths = append(paths, flagsplugin.Prefix("value", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("valid_from", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ValidFrom = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("valid_from", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("valid_to", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ValidTo = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("valid_to", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForEndDevice adds flags to select fields in EndDevice.
func AddSelectFlagsForEndDevice(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("name", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("description", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("description", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("version-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("version-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service-profile-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service-profile-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-server-address", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-server-kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-server-kek-label", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-address", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-kek-label", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-kek-label", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("application-server-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("application-server-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("join-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("join-server-address", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("locations", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("locations", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("picture", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("picture", prefix), true), flagsplugin.WithHidden(hidden)))
	// NOTE: picture (Picture) does not seem to have select flags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-b", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-class-b", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-c", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-class-c", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lorawan-version", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lorawan-phy-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lorawan-phy-version", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frequency-plan-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frequency-plan-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("min-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("min-frequency", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-frequency", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-frequency", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-join", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supports-join", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("resets-join-nonces", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("resets-join-nonces", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("root-keys", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("root-keys", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForRootKeys(flags, flagsplugin.Prefix("root-keys", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("net-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("net-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mac-settings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mac-settings", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForMACSettings(flags, flagsplugin.Prefix("mac-settings", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("mac-state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("mac-state", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForMACState(flags, flagsplugin.Prefix("mac-state", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-mac-state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-mac-state", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForMACState(flags, flagsplugin.Prefix("pending-mac-state", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForSession(flags, flagsplugin.Prefix("session", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-session", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-session", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForSession(flags, flagsplugin.Prefix("pending-session", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-dev-nonce", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-dev-nonce", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("used-dev-nonces", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("used-dev-nonces", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-join-nonce", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-join-nonce", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-rj-count-0", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-rj-count-0", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-rj-count-1", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-rj-count-1", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-dev-status-received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-dev-status-received-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("power-state", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("power-state", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("battery-percentage", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("battery-percentage", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-margin", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-margin", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("queued-application-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("queued-application-downlinks", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("formatters", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("formatters", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("formatters", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provisioner-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provisioner-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("provisioning-data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("provisioning-data", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("multicast", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("multicast", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("claim-authentication-code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("claim-authentication-code", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForEndDeviceAuthenticationCode(flags, flagsplugin.Prefix("claim-authentication-code", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("skip-payload-crypto", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto-override", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("skip-payload-crypto-override", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("activated-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("activated-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-seen-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-seen-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("serial-number", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("serial-number", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lora-alliance-profile-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lora-alliance-profile-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	// NOTE: lora_alliance_profile_ids (LoRaAllianceProfileIdentifiers) does not seem to have select flags.
}

// SelectFromFlags outputs the fieldmask paths forEndDevice message from select flags.
func PathsFromSelectFlagsForEndDevice(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("name", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("name", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("description", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("description", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("attributes", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("version_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service_profile_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("service_profile_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("network_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("network_server_kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_server_kek_label", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("application_server_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("application_server_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("join_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("join_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("locations", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("locations", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("picture", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("picture", prefix))
	}
	// NOTE: picture (Picture) does not seem to have select flags.
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_class_b", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("supports_class_b", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_class_c", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("supports_class_c", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lorawan_version", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lorawan_version", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lorawan_phy_version", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lorawan_phy_version", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frequency_plan_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("frequency_plan_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("min_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("min_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_frequency", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_frequency", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_join", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("supports_join", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("resets_join_nonces", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("resets_join_nonces", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("root_keys", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("root_keys", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForRootKeys(flags, flagsplugin.Prefix("root_keys", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("net_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("net_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mac_settings", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mac_settings", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACSettings(flags, flagsplugin.Prefix("mac_settings", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("mac_state", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("mac_state", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACState(flags, flagsplugin.Prefix("mac_state", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_mac_state", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_mac_state", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMACState(flags, flagsplugin.Prefix("pending_mac_state", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForSession(flags, flagsplugin.Prefix("session", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_session", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_session", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForSession(flags, flagsplugin.Prefix("pending_session", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_dev_nonce", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_dev_nonce", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("used_dev_nonces", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("used_dev_nonces", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_join_nonce", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_join_nonce", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_rj_count_0", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_rj_count_0", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_rj_count_1", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_rj_count_1", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_dev_status_received_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_dev_status_received_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("power_state", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("power_state", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("battery_percentage", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("battery_percentage", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_margin", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_margin", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("queued_application_downlinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("queued_application_downlinks", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("formatters", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("formatters", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("formatters", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provisioner_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("provisioner_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("provisioning_data", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("provisioning_data", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("multicast", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("multicast", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("claim_authentication_code", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("claim_authentication_code", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceAuthenticationCode(flags, flagsplugin.Prefix("claim_authentication_code", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip_payload_crypto", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("skip_payload_crypto", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip_payload_crypto_override", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("skip_payload_crypto_override", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("activated_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("activated_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_seen_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_seen_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("serial_number", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("serial_number", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lora_alliance_profile_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lora_alliance_profile_ids", prefix))
	}
	// NOTE: lora_alliance_profile_ids (LoRaAllianceProfileIdentifiers) does not seem to have select flags.
	return paths, nil
}

// AddSetFlagsForEndDevice adds flags to select fields in EndDevice.
func AddSetFlagsForEndDevice(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("ids", prefix), true)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("name", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("description", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("attributes", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("service-profile-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("network-server-address", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("network-server-kek-label", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-address", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-kek-label", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("application-server-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("join-server-address", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping Locations because maps with message value types are currently not supported.
	// FIXME: Skipping Picture because it does not seem to implement AddSetFlags.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-b", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-class-c", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("lorawan-version", prefix), flagsplugin.EnumValueDesc(MACVersion_value, MACVersion_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("lorawan-phy-version", prefix), flagsplugin.EnumValueDesc(PHYVersion_value, PHYVersion_customvalue), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("frequency-plan-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("min-frequency", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint64Flag(flagsplugin.Prefix("max-frequency", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supports-join", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("resets-join-nonces", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForRootKeys(flags, flagsplugin.Prefix("root-keys", prefix), hidden)
	flags.AddFlag(customflags.New3BytesFlag(flagsplugin.Prefix("net-id", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForMACSettings(flags, flagsplugin.Prefix("mac-settings", prefix), hidden)
	AddSetFlagsForMACState(flags, flagsplugin.Prefix("mac-state", prefix), hidden)
	AddSetFlagsForMACState(flags, flagsplugin.Prefix("pending-mac-state", prefix), hidden)
	AddSetFlagsForSession(flags, flagsplugin.Prefix("session", prefix), hidden)
	AddSetFlagsForSession(flags, flagsplugin.Prefix("pending-session", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-dev-nonce", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32SliceFlag(flagsplugin.Prefix("used-dev-nonces", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-join-nonce", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-rj-count-0", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-rj-count-1", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-dev-status-received-at", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("battery-percentage", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewInt32Flag(flagsplugin.Prefix("downlink-margin", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping QueuedApplicationDownlinks because repeated messages are currently not supported.
	AddSetFlagsForMessagePayloadFormatters(flags, flagsplugin.Prefix("formatters", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("provisioner-id", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping ProvisioningData because this WKT is currently not supported.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("multicast", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForEndDeviceAuthenticationCode(flags, flagsplugin.Prefix("claim-authentication-code", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("skip-payload-crypto-override", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("activated-at", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("last-seen-at", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("serial-number", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping LoraAllianceProfileIds because it does not seem to implement AddSetFlags.
}

// SetFromFlags sets the EndDevice message from flags.
func (m *EndDevice) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix)); changed {
		if m.Ids == nil {
			m.Ids = &EndDeviceIdentifiers{}
		}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("name", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Name = val
		paths = append(paths, flagsplugin.Prefix("name", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("description", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Description = val
		paths = append(paths, flagsplugin.Prefix("description", prefix))
	}
	if val, changed, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("attributes", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Attributes = val
		paths = append(paths, flagsplugin.Prefix("attributes", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("version_ids", prefix)); changed {
		if m.VersionIds == nil {
			m.VersionIds = &EndDeviceVersionIdentifiers{}
		}
		if setPaths, err := m.VersionIds.SetFromFlags(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("service_profile_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ServiceProfileId = val
		paths = append(paths, flagsplugin.Prefix("service_profile_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("network_server_address", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.NetworkServerAddress = val
		paths = append(paths, flagsplugin.Prefix("network_server_address", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("network_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.NetworkServerKekLabel = val
		paths = append(paths, flagsplugin.Prefix("network_server_kek_label", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application_server_address", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ApplicationServerAddress = val
		paths = append(paths, flagsplugin.Prefix("application_server_address", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application_server_kek_label", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ApplicationServerKekLabel = val
		paths = append(paths, flagsplugin.Prefix("application_server_kek_label", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("application_server_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ApplicationServerId = val
		paths = append(paths, flagsplugin.Prefix("application_server_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("join_server_address", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.JoinServerAddress = val
		paths = append(paths, flagsplugin.Prefix("join_server_address", prefix))
	}
	// FIXME: Skipping Locations because maps with message value types are currently not supported.
	// FIXME: Skipping Picture because it does not seem to implement AddSetFlags.
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_class_b", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SupportsClassB = val
		paths = append(paths, flagsplugin.Prefix("supports_class_b", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_class_c", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SupportsClassC = val
		paths = append(paths, flagsplugin.Prefix("supports_class_c", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("lorawan_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, MACVersion_value, MACVersion_customvalue)
		if err != nil {
			return nil, err
		}
		m.LorawanVersion = MACVersion(enumValue)
		paths = append(paths, flagsplugin.Prefix("lorawan_version", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("lorawan_phy_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, PHYVersion_value, PHYVersion_customvalue)
		if err != nil {
			return nil, err
		}
		m.LorawanPhyVersion = PHYVersion(enumValue)
		paths = append(paths, flagsplugin.Prefix("lorawan_phy_version", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("frequency_plan_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FrequencyPlanId = val
		paths = append(paths, flagsplugin.Prefix("frequency_plan_id", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("min_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MinFrequency = val
		paths = append(paths, flagsplugin.Prefix("min_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetUint64(flags, flagsplugin.Prefix("max_frequency", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MaxFrequency = val
		paths = append(paths, flagsplugin.Prefix("max_frequency", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supports_join", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SupportsJoin = val
		paths = append(paths, flagsplugin.Prefix("supports_join", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("resets_join_nonces", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ResetsJoinNonces = val
		paths = append(paths, flagsplugin.Prefix("resets_join_nonces", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("root_keys", prefix)); changed {
		if m.RootKeys == nil {
			m.RootKeys = &RootKeys{}
		}
		if setPaths, err := m.RootKeys.SetFromFlags(flags, flagsplugin.Prefix("root_keys", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := customflags.GetExactBytes(flags, flagsplugin.Prefix("net_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.NetId = val
		paths = append(paths, flagsplugin.Prefix("net_id", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mac_settings", prefix)); changed {
		if m.MacSettings == nil {
			m.MacSettings = &MACSettings{}
		}
		if setPaths, err := m.MacSettings.SetFromFlags(flags, flagsplugin.Prefix("mac_settings", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("mac_state", prefix)); changed {
		if m.MacState == nil {
			m.MacState = &MACState{}
		}
		if setPaths, err := m.MacState.SetFromFlags(flags, flagsplugin.Prefix("mac_state", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("pending_mac_state", prefix)); changed {
		if m.PendingMacState == nil {
			m.PendingMacState = &MACState{}
		}
		if setPaths, err := m.PendingMacState.SetFromFlags(flags, flagsplugin.Prefix("pending_mac_state", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("session", prefix)); changed {
		if m.Session == nil {
			m.Session = &Session{}
		}
		if setPaths, err := m.Session.SetFromFlags(flags, flagsplugin.Prefix("session", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("pending_session", prefix)); changed {
		if m.PendingSession == nil {
			m.PendingSession = &Session{}
		}
		if setPaths, err := m.PendingSession.SetFromFlags(flags, flagsplugin.Prefix("pending_session", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_dev_nonce", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastDevNonce = val
		paths = append(paths, flagsplugin.Prefix("last_dev_nonce", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32Slice(flags, flagsplugin.Prefix("used_dev_nonces", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.UsedDevNonces = val
		paths = append(paths, flagsplugin.Prefix("used_dev_nonces", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_join_nonce", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastJoinNonce = val
		paths = append(paths, flagsplugin.Prefix("last_join_nonce", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_rj_count_0", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastRjCount_0 = val
		paths = append(paths, flagsplugin.Prefix("last_rj_count_0", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_rj_count_1", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastRjCount_1 = val
		paths = append(paths, flagsplugin.Prefix("last_rj_count_1", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last_dev_status_received_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastDevStatusReceivedAt = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("last_dev_status_received_at", prefix))
	}
	if val, changed, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("battery_percentage", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BatteryPercentage = &wrapperspb.FloatValue{Value: val}
		paths = append(paths, flagsplugin.Prefix("battery_percentage", prefix))
	}
	if val, changed, err := flagsplugin.GetInt32(flags, flagsplugin.Prefix("downlink_margin", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DownlinkMargin = val
		paths = append(paths, flagsplugin.Prefix("downlink_margin", prefix))
	}
	// FIXME: Skipping QueuedApplicationDownlinks because it does not seem to implement AddSetFlags.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("formatters", prefix)); changed {
		if m.Formatters == nil {
			m.Formatters = &MessagePayloadFormatters{}
		}
		if setPaths, err := m.Formatters.SetFromFlags(flags, flagsplugin.Prefix("formatters", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("provisioner_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ProvisionerId = val
		paths = append(paths, flagsplugin.Prefix("provisioner_id", prefix))
	}
	// FIXME: Skipping ProvisioningData because this WKT is not supported.
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("multicast", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Multicast = val
		paths = append(paths, flagsplugin.Prefix("multicast", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("claim_authentication_code", prefix)); changed {
		if m.ClaimAuthenticationCode == nil {
			m.ClaimAuthenticationCode = &EndDeviceAuthenticationCode{}
		}
		if setPaths, err := m.ClaimAuthenticationCode.SetFromFlags(flags, flagsplugin.Prefix("claim_authentication_code", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip_payload_crypto", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SkipPayloadCrypto = val
		paths = append(paths, flagsplugin.Prefix("skip_payload_crypto", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("skip_payload_crypto_override", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SkipPayloadCryptoOverride = &wrapperspb.BoolValue{Value: val}
		paths = append(paths, flagsplugin.Prefix("skip_payload_crypto_override", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("activated_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ActivatedAt = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("activated_at", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("last_seen_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastSeenAt = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("last_seen_at", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("serial_number", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SerialNumber = val
		paths = append(paths, flagsplugin.Prefix("serial_number", prefix))
	}
	// FIXME: Skipping LoraAllianceProfileIds because it does not seem to implement AddSetFlags.
	return paths, nil
}
