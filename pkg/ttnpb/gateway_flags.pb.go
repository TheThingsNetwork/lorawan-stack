// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v1.2.0
// - protoc              v4.23.4
// source: ttn/lorawan/v3/gateway.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	golang "github.com/TheThingsIndustries/protoc-gen-go-flags/golang"
	pflag "github.com/spf13/pflag"
)

// AddSelectFlagsForGatewayVersionIdentifiers adds flags to select fields in GatewayVersionIdentifiers.
func AddSelectFlagsForGatewayVersionIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("brand-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("brand-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("model-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("model-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("hardware-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("hardware-version", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("firmware-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("firmware-version", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("runtime-version", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("runtime-version", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forGatewayVersionIdentifiers message from select flags.
func PathsFromSelectFlagsForGatewayVersionIdentifiers(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("brand_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("brand_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("model_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("model_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("hardware_version", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("hardware_version", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("firmware_version", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("firmware_version", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("runtime_version", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("runtime_version", prefix))
	}
	return paths, nil
}

// AddSetFlagsForGatewayVersionIdentifiers adds flags to select fields in GatewayVersionIdentifiers.
func AddSetFlagsForGatewayVersionIdentifiers(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("brand-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("model-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("hardware-version", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("firmware-version", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("runtime-version", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the GatewayVersionIdentifiers message from flags.
func (m *GatewayVersionIdentifiers) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("brand_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.BrandId = val
		paths = append(paths, flagsplugin.Prefix("brand_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("model_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ModelId = val
		paths = append(paths, flagsplugin.Prefix("model_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("hardware_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.HardwareVersion = val
		paths = append(paths, flagsplugin.Prefix("hardware_version", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("firmware_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FirmwareVersion = val
		paths = append(paths, flagsplugin.Prefix("firmware_version", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("runtime_version", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RuntimeVersion = val
		paths = append(paths, flagsplugin.Prefix("runtime_version", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForGatewayClaimAuthenticationCode adds flags to select fields in GatewayClaimAuthenticationCode.
func AddSelectFlagsForGatewayClaimAuthenticationCode(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("secret", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("secret", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForSecret(flags, flagsplugin.Prefix("secret", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("valid-from", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("valid-from", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("valid-to", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("valid-to", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forGatewayClaimAuthenticationCode message from select flags.
func PathsFromSelectFlagsForGatewayClaimAuthenticationCode(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("secret", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("secret", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForSecret(flags, flagsplugin.Prefix("secret", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("valid_from", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("valid_from", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("valid_to", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("valid_to", prefix))
	}
	return paths, nil
}

// AddSetFlagsForGatewayClaimAuthenticationCode adds flags to select fields in GatewayClaimAuthenticationCode.
func AddSetFlagsForGatewayClaimAuthenticationCode(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForSecret(flags, flagsplugin.Prefix("secret", prefix), hidden)
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("valid-from", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("valid-to", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the GatewayClaimAuthenticationCode message from flags.
func (m *GatewayClaimAuthenticationCode) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("secret", prefix)); changed {
		if m.Secret == nil {
			m.Secret = &Secret{}
		}
		if setPaths, err := m.Secret.SetFromFlags(flags, flagsplugin.Prefix("secret", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("valid_from", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ValidFrom = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("valid_from", prefix))
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("valid_to", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ValidTo = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("valid_to", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForGateway_LRFHSS adds flags to select fields in Gateway_LRFHSS.
func AddSelectFlagsForGateway_LRFHSS(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supported", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("supported", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forGateway_LRFHSS message from select flags.
func PathsFromSelectFlagsForGateway_LRFHSS(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supported", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("supported", prefix))
	}
	return paths, nil
}

// AddSetFlagsForGateway_LRFHSS adds flags to select fields in Gateway_LRFHSS.
func AddSetFlagsForGateway_LRFHSS(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("supported", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the Gateway_LRFHSS message from flags.
func (m *Gateway_LRFHSS) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("supported", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Supported = val
		paths = append(paths, flagsplugin.Prefix("supported", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForGateway adds flags to select fields in Gateway.
func AddSelectFlagsForGateway(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("deleted-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("name", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("description", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("description", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("contact-info", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("contact-info", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("administrative-contact", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("administrative-contact", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("administrative-contact", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("technical-contact", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("technical-contact", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("technical-contact", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("version-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("version-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForGatewayVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gateway-server-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gateway-server-address", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("auto-update", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("auto-update", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("update-channel", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("update-channel", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frequency-plan-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frequency-plan-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frequency-plan-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frequency-plan-ids", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("antennas", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("antennas", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-public", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("status-public", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location-public", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location-public", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("schedule-downlink-late", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("schedule-downlink-late", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enforce-duty-cycle", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("enforce-duty-cycle", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink-path-constraint", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink-path-constraint", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("schedule-anytime-delay", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("schedule-anytime-delay", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("update-location-from-status", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("update-location-from-status", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lbs-lns-secret", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lbs-lns-secret", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForSecret(flags, flagsplugin.Prefix("lbs-lns-secret", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("claim-authentication-code", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("claim-authentication-code", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForGatewayClaimAuthenticationCode(flags, flagsplugin.Prefix("claim-authentication-code", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-cups-uri", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-cups-uri", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("target-cups-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("target-cups-key", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForSecret(flags, flagsplugin.Prefix("target-cups-key", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("require-authenticated-connection", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("require-authenticated-connection", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("lrfhss", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("lrfhss", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForGateway_LRFHSS(flags, flagsplugin.Prefix("lrfhss", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("disable-packet-broker-forwarding", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("disable-packet-broker-forwarding", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forGateway message from select flags.
func PathsFromSelectFlagsForGateway(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("deleted_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("name", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("name", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("description", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("description", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("attributes", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("contact_info", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("contact_info", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("administrative_contact", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("administrative_contact", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("administrative_contact", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("technical_contact", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("technical_contact", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("technical_contact", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("version_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForGatewayVersionIdentifiers(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gateway_server_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("gateway_server_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("auto_update", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("auto_update", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("update_channel", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("update_channel", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frequency_plan_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("frequency_plan_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frequency_plan_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("frequency_plan_ids", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("antennas", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("antennas", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status_public", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("status_public", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location_public", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("location_public", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("schedule_downlink_late", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("schedule_downlink_late", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enforce_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("enforce_duty_cycle", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink_path_constraint", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink_path_constraint", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("schedule_anytime_delay", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("schedule_anytime_delay", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("update_location_from_status", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("update_location_from_status", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lbs_lns_secret", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lbs_lns_secret", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForSecret(flags, flagsplugin.Prefix("lbs_lns_secret", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("claim_authentication_code", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("claim_authentication_code", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForGatewayClaimAuthenticationCode(flags, flagsplugin.Prefix("claim_authentication_code", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_cups_uri", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_cups_uri", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("target_cups_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("target_cups_key", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForSecret(flags, flagsplugin.Prefix("target_cups_key", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("require_authenticated_connection", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("require_authenticated_connection", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("lrfhss", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("lrfhss", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForGateway_LRFHSS(flags, flagsplugin.Prefix("lrfhss", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("disable_packet_broker_forwarding", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("disable_packet_broker_forwarding", prefix))
	}
	return paths, nil
}

// AddSetFlagsForGateway adds flags to select fields in Gateway.
func AddSetFlagsForGateway(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("ids", prefix), true)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("name", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("description", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("attributes", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping ContactInfo because repeated messages are currently not supported.
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("administrative-contact", prefix), hidden)
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("technical-contact", prefix), hidden)
	AddSetFlagsForGatewayVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("gateway-server-address", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("auto-update", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("update-channel", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("frequency-plan-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("frequency-plan-ids", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping Antennas because repeated messages are currently not supported.
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("status-public", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location-public", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("schedule-downlink-late", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("enforce-duty-cycle", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("downlink-path-constraint", prefix), flagsplugin.EnumValueDesc(DownlinkPathConstraint_value), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("schedule-anytime-delay", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("update-location-from-status", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForSecret(flags, flagsplugin.Prefix("lbs-lns-secret", prefix), hidden)
	AddSetFlagsForGatewayClaimAuthenticationCode(flags, flagsplugin.Prefix("claim-authentication-code", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("target-cups-uri", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForSecret(flags, flagsplugin.Prefix("target-cups-key", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("require-authenticated-connection", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForGateway_LRFHSS(flags, flagsplugin.Prefix("lrfhss", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("disable-packet-broker-forwarding", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the Gateway message from flags.
func (m *Gateway) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix)); changed {
		if m.Ids == nil {
			m.Ids = &GatewayIdentifiers{}
		}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("name", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Name = val
		paths = append(paths, flagsplugin.Prefix("name", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("description", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Description = val
		paths = append(paths, flagsplugin.Prefix("description", prefix))
	}
	if val, changed, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("attributes", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Attributes = val
		paths = append(paths, flagsplugin.Prefix("attributes", prefix))
	}
	// FIXME: Skipping ContactInfo because it does not seem to implement AddSetFlags.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("administrative_contact", prefix)); changed {
		if m.AdministrativeContact == nil {
			m.AdministrativeContact = &OrganizationOrUserIdentifiers{}
		}
		if setPaths, err := m.AdministrativeContact.SetFromFlags(flags, flagsplugin.Prefix("administrative_contact", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("technical_contact", prefix)); changed {
		if m.TechnicalContact == nil {
			m.TechnicalContact = &OrganizationOrUserIdentifiers{}
		}
		if setPaths, err := m.TechnicalContact.SetFromFlags(flags, flagsplugin.Prefix("technical_contact", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("version_ids", prefix)); changed {
		if m.VersionIds == nil {
			m.VersionIds = &GatewayVersionIdentifiers{}
		}
		if setPaths, err := m.VersionIds.SetFromFlags(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("gateway_server_address", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.GatewayServerAddress = val
		paths = append(paths, flagsplugin.Prefix("gateway_server_address", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("auto_update", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AutoUpdate = val
		paths = append(paths, flagsplugin.Prefix("auto_update", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("update_channel", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.UpdateChannel = val
		paths = append(paths, flagsplugin.Prefix("update_channel", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("frequency_plan_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FrequencyPlanId = val
		paths = append(paths, flagsplugin.Prefix("frequency_plan_id", prefix))
	}
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("frequency_plan_ids", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FrequencyPlanIds = val
		paths = append(paths, flagsplugin.Prefix("frequency_plan_ids", prefix))
	}
	// FIXME: Skipping Antennas because it does not seem to implement AddSetFlags.
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("status_public", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.StatusPublic = val
		paths = append(paths, flagsplugin.Prefix("status_public", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location_public", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LocationPublic = val
		paths = append(paths, flagsplugin.Prefix("location_public", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("schedule_downlink_late", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ScheduleDownlinkLate = val
		paths = append(paths, flagsplugin.Prefix("schedule_downlink_late", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("enforce_duty_cycle", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.EnforceDutyCycle = val
		paths = append(paths, flagsplugin.Prefix("enforce_duty_cycle", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("downlink_path_constraint", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, DownlinkPathConstraint_value)
		if err != nil {
			return nil, err
		}
		m.DownlinkPathConstraint = DownlinkPathConstraint(enumValue)
		paths = append(paths, flagsplugin.Prefix("downlink_path_constraint", prefix))
	}
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("schedule_anytime_delay", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ScheduleAnytimeDelay = golang.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("schedule_anytime_delay", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("update_location_from_status", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.UpdateLocationFromStatus = val
		paths = append(paths, flagsplugin.Prefix("update_location_from_status", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("lbs_lns_secret", prefix)); changed {
		if m.LbsLnsSecret == nil {
			m.LbsLnsSecret = &Secret{}
		}
		if setPaths, err := m.LbsLnsSecret.SetFromFlags(flags, flagsplugin.Prefix("lbs_lns_secret", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("claim_authentication_code", prefix)); changed {
		if m.ClaimAuthenticationCode == nil {
			m.ClaimAuthenticationCode = &GatewayClaimAuthenticationCode{}
		}
		if setPaths, err := m.ClaimAuthenticationCode.SetFromFlags(flags, flagsplugin.Prefix("claim_authentication_code", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("target_cups_uri", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.TargetCupsUri = val
		paths = append(paths, flagsplugin.Prefix("target_cups_uri", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("target_cups_key", prefix)); changed {
		if m.TargetCupsKey == nil {
			m.TargetCupsKey = &Secret{}
		}
		if setPaths, err := m.TargetCupsKey.SetFromFlags(flags, flagsplugin.Prefix("target_cups_key", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("require_authenticated_connection", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.RequireAuthenticatedConnection = val
		paths = append(paths, flagsplugin.Prefix("require_authenticated_connection", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("lrfhss", prefix)); changed {
		if m.Lrfhss == nil {
			m.Lrfhss = &Gateway_LRFHSS{}
		}
		if setPaths, err := m.Lrfhss.SetFromFlags(flags, flagsplugin.Prefix("lrfhss", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("disable_packet_broker_forwarding", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DisablePacketBrokerForwarding = val
		paths = append(paths, flagsplugin.Prefix("disable_packet_broker_forwarding", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForManagedGateway adds flags to select fields in ManagedGateway.
func AddSelectFlagsForManagedGateway(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("version-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("version-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForGatewayVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("cellular-imei", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("cellular-imei", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("cellular-imsi", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("cellular-imsi", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("wifi-mac-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("wifi-mac-address", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ethernet-mac-address", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ethernet-mac-address", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("wifi-profile-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("wifi-profile-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ethernet-profile-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ethernet-profile-id", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forManagedGateway message from select flags.
func PathsFromSelectFlagsForManagedGateway(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("version_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForGatewayVersionIdentifiers(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("cellular_imei", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("cellular_imei", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("cellular_imsi", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("cellular_imsi", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("wifi_mac_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("wifi_mac_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ethernet_mac_address", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ethernet_mac_address", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("wifi_profile_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("wifi_profile_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ethernet_profile_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ethernet_profile_id", prefix))
	}
	return paths, nil
}

// AddSetFlagsForManagedGateway adds flags to select fields in ManagedGateway.
func AddSetFlagsForManagedGateway(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("ids", prefix), true)
	AddSetFlagsForGatewayVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("cellular-imei", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("cellular-imsi", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("wifi-mac-address", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("ethernet-mac-address", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("wifi-profile-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("ethernet-profile-id", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ManagedGateway message from flags.
func (m *ManagedGateway) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("ids", prefix)); changed {
		if m.Ids == nil {
			m.Ids = &GatewayIdentifiers{}
		}
		if setPaths, err := m.Ids.SetFromFlags(flags, flagsplugin.Prefix("ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("version_ids", prefix)); changed {
		if m.VersionIds == nil {
			m.VersionIds = &GatewayVersionIdentifiers{}
		}
		if setPaths, err := m.VersionIds.SetFromFlags(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("cellular_imei", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.CellularImei = val
		paths = append(paths, flagsplugin.Prefix("cellular_imei", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("cellular_imsi", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.CellularImsi = val
		paths = append(paths, flagsplugin.Prefix("cellular_imsi", prefix))
	}
	if val, changed, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("wifi_mac_address", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.WifiMacAddress = val
		paths = append(paths, flagsplugin.Prefix("wifi_mac_address", prefix))
	}
	if val, changed, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("ethernet_mac_address", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.EthernetMacAddress = val
		paths = append(paths, flagsplugin.Prefix("ethernet_mac_address", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("wifi_profile_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.WifiProfileId = val
		paths = append(paths, flagsplugin.Prefix("wifi_profile_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("ethernet_profile_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.EthernetProfileId = val
		paths = append(paths, flagsplugin.Prefix("ethernet_profile_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForManagedGatewayWiFiProfile adds flags to select fields in ManagedGatewayWiFiProfile.
func AddSelectFlagsForManagedGatewayWiFiProfile(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("profile-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("profile-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("profile-name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("profile-name", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("shared", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("shared", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("ssid", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("ssid", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("password", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("password", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-interface-addresses", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-interface-addresses", prefix), true), flagsplugin.WithHidden(hidden)))
	// NOTE: network_interface_addresses (ManagedGatewayNetworkInterfaceAddresses) does not seem to have select flags.
}

// SelectFromFlags outputs the fieldmask paths forManagedGatewayWiFiProfile message from select flags.
func PathsFromSelectFlagsForManagedGatewayWiFiProfile(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("profile_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("profile_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("profile_name", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("profile_name", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("shared", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("shared", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("ssid", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("ssid", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("password", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("password", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network_interface_addresses", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("network_interface_addresses", prefix))
	}
	// NOTE: network_interface_addresses (ManagedGatewayNetworkInterfaceAddresses) does not seem to have select flags.
	return paths, nil
}

// AddSetFlagsForManagedGatewayWiFiProfile adds flags to select fields in ManagedGatewayWiFiProfile.
func AddSetFlagsForManagedGatewayWiFiProfile(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("profile-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("profile-name", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("shared", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("ssid", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("password", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping NetworkInterfaceAddresses because it does not seem to implement AddSetFlags.
}

// SetFromFlags sets the ManagedGatewayWiFiProfile message from flags.
func (m *ManagedGatewayWiFiProfile) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("profile_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ProfileId = val
		paths = append(paths, flagsplugin.Prefix("profile_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("profile_name", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ProfileName = val
		paths = append(paths, flagsplugin.Prefix("profile_name", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("shared", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Shared = val
		paths = append(paths, flagsplugin.Prefix("shared", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("ssid", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Ssid = val
		paths = append(paths, flagsplugin.Prefix("ssid", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("password", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Password = val
		paths = append(paths, flagsplugin.Prefix("password", prefix))
	}
	// FIXME: Skipping NetworkInterfaceAddresses because it does not seem to implement AddSetFlags.
	return paths, nil
}

// AddSelectFlagsForManagedGatewayEthernetProfile adds flags to select fields in ManagedGatewayEthernetProfile.
func AddSelectFlagsForManagedGatewayEthernetProfile(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("profile-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("profile-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("profile-name", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("profile-name", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("shared", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("shared", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-interface-addresses", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-interface-addresses", prefix), true), flagsplugin.WithHidden(hidden)))
	// NOTE: network_interface_addresses (ManagedGatewayNetworkInterfaceAddresses) does not seem to have select flags.
}

// SelectFromFlags outputs the fieldmask paths forManagedGatewayEthernetProfile message from select flags.
func PathsFromSelectFlagsForManagedGatewayEthernetProfile(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("profile_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("profile_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("profile_name", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("profile_name", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("shared", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("shared", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network_interface_addresses", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("network_interface_addresses", prefix))
	}
	// NOTE: network_interface_addresses (ManagedGatewayNetworkInterfaceAddresses) does not seem to have select flags.
	return paths, nil
}

// AddSetFlagsForManagedGatewayEthernetProfile adds flags to select fields in ManagedGatewayEthernetProfile.
func AddSetFlagsForManagedGatewayEthernetProfile(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("profile-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("profile-name", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("shared", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping NetworkInterfaceAddresses because it does not seem to implement AddSetFlags.
}

// SetFromFlags sets the ManagedGatewayEthernetProfile message from flags.
func (m *ManagedGatewayEthernetProfile) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("profile_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ProfileId = val
		paths = append(paths, flagsplugin.Prefix("profile_id", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("profile_name", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ProfileName = val
		paths = append(paths, flagsplugin.Prefix("profile_name", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("shared", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Shared = val
		paths = append(paths, flagsplugin.Prefix("shared", prefix))
	}
	// FIXME: Skipping NetworkInterfaceAddresses because it does not seem to implement AddSetFlags.
	return paths, nil
}

// AddSetFlagsForListGatewaysRequest adds flags to select fields in ListGatewaysRequest.
func AddSetFlagsForListGatewaysRequest(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForOrganizationOrUserIdentifiers(flags, flagsplugin.Prefix("collaborator", prefix), true)
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("field-mask", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("order", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("limit", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("page", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("deleted", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ListGatewaysRequest message from flags.
func (m *ListGatewaysRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("collaborator", prefix)); changed {
		if m.Collaborator == nil {
			m.Collaborator = &OrganizationOrUserIdentifiers{}
		}
		if setPaths, err := m.Collaborator.SetFromFlags(flags, flagsplugin.Prefix("collaborator", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("field_mask", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FieldMask = golang.SetFieldMask(val)
		paths = append(paths, flagsplugin.Prefix("field_mask", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("order", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Order = val
		paths = append(paths, flagsplugin.Prefix("order", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("limit", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Limit = val
		paths = append(paths, flagsplugin.Prefix("limit", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("page", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Page = val
		paths = append(paths, flagsplugin.Prefix("page", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("deleted", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Deleted = val
		paths = append(paths, flagsplugin.Prefix("deleted", prefix))
	}
	return paths, nil
}

// AddSetFlagsForListGatewayAPIKeysRequest adds flags to select fields in ListGatewayAPIKeysRequest.
func AddSetFlagsForListGatewayAPIKeysRequest(flags *pflag.FlagSet, prefix string, hidden bool) {
	AddSetFlagsForGatewayIdentifiers(flags, flagsplugin.Prefix("gateway-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("order", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("limit", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("page", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ListGatewayAPIKeysRequest message from flags.
func (m *ListGatewayAPIKeysRequest) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("gateway_ids", prefix)); changed {
		if m.GatewayIds == nil {
			m.GatewayIds = &GatewayIdentifiers{}
		}
		if setPaths, err := m.GatewayIds.SetFromFlags(flags, flagsplugin.Prefix("gateway_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("order", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Order = val
		paths = append(paths, flagsplugin.Prefix("order", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("limit", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Limit = val
		paths = append(paths, flagsplugin.Prefix("limit", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("page", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Page = val
		paths = append(paths, flagsplugin.Prefix("page", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForGatewayAntenna adds flags to select fields in GatewayAntenna.
func AddSelectFlagsForGatewayAntenna(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gain", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gain", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForLocation(flags, flagsplugin.Prefix("location", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("placement", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("placement", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forGatewayAntenna message from select flags.
func PathsFromSelectFlagsForGatewayAntenna(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gain", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("gain", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("location", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForLocation(flags, flagsplugin.Prefix("location", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("attributes", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("placement", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("placement", prefix))
	}
	return paths, nil
}

// AddSetFlagsForGatewayAntenna adds flags to select fields in GatewayAntenna.
func AddSetFlagsForGatewayAntenna(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("gain", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForLocation(flags, flagsplugin.Prefix("location", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringStringMapFlag(flagsplugin.Prefix("attributes", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("placement", prefix), flagsplugin.EnumValueDesc(GatewayAntennaPlacement_value), flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the GatewayAntenna message from flags.
func (m *GatewayAntenna) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("gain", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Gain = val
		paths = append(paths, flagsplugin.Prefix("gain", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("location", prefix)); changed {
		if m.Location == nil {
			m.Location = &Location{}
		}
		if setPaths, err := m.Location.SetFromFlags(flags, flagsplugin.Prefix("location", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetStringStringMap(flags, flagsplugin.Prefix("attributes", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Attributes = val
		paths = append(paths, flagsplugin.Prefix("attributes", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("placement", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, GatewayAntennaPlacement_value)
		if err != nil {
			return nil, err
		}
		m.Placement = GatewayAntennaPlacement(enumValue)
		paths = append(paths, flagsplugin.Prefix("placement", prefix))
	}
	return paths, nil
}
