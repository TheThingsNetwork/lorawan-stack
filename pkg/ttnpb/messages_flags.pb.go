// Code generated by protoc-gen-go-flags. DO NOT EDIT.
// versions:
// - protoc-gen-go-flags v1.2.0
// - protoc              v4.23.4
// source: ttn/lorawan/v3/messages.proto

package ttnpb

import (
	flagsplugin "github.com/TheThingsIndustries/protoc-gen-go-flags/flagsplugin"
	golang "github.com/TheThingsIndustries/protoc-gen-go-flags/golang"
	pflag "github.com/spf13/pflag"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// AddSelectFlagsForApplicationUplink adds flags to select fields in ApplicationUplink.
func AddSelectFlagsForApplicationUplink(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-port", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-port", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-cnt", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frm-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frm-payload", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("decoded-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("decoded-payload", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("decoded-payload-warnings", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("normalized-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("normalized-payload", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("normalized-payload-warnings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("normalized-payload-warnings", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-metadata", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx-metadata", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("settings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("settings", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForTxSettings(flags, flagsplugin.Prefix("settings", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("received-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("app-s-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("app-s-key", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app-s-key", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-a-f-cnt-down", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-a-f-cnt-down", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("confirmed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("confirmed", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("consumed-airtime", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("consumed-airtime", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("packet-error-rate", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("packet-error-rate", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("locations", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("locations", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("version-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("version-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForNetworkIdentifiers(flags, flagsplugin.Prefix("network-ids", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forApplicationUplink message from select flags.
func PathsFromSelectFlagsForApplicationUplink(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session_key_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session_key_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f_port", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("f_port", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f_cnt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("f_cnt", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frm_payload", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("frm_payload", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("decoded_payload", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("decoded_payload", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("decoded_payload_warnings", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("decoded_payload_warnings", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("normalized_payload", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("normalized_payload", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("normalized_payload_warnings", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("normalized_payload_warnings", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx_metadata", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx_metadata", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("settings", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("settings", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForTxSettings(flags, flagsplugin.Prefix("settings", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("received_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("received_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("app_s_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("app_s_key", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app_s_key", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_a_f_cnt_down", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_a_f_cnt_down", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("confirmed", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("confirmed", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("consumed_airtime", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("consumed_airtime", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("packet_error_rate", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("packet_error_rate", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("locations", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("locations", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("version_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("network_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForNetworkIdentifiers(flags, flagsplugin.Prefix("network_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForApplicationUplink adds flags to select fields in ApplicationUplink.
func AddSetFlagsForApplicationUplink(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("session-key-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-port", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-cnt", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBytesFlag(flagsplugin.Prefix("frm-payload", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping DecodedPayload because this WKT is currently not supported.
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping NormalizedPayload because this repeated WKT is currently not supported.
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("normalized-payload-warnings", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping RxMetadata because repeated messages are currently not supported.
	AddSetFlagsForTxSettings(flags, flagsplugin.Prefix("settings", prefix), hidden)
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("received-at", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app-s-key", prefix), hidden)
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("last-a-f-cnt-down", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("confirmed", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewDurationFlag(flagsplugin.Prefix("consumed-airtime", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewFloat32Flag(flagsplugin.Prefix("packet-error-rate", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping Locations because maps with message value types are currently not supported.
	AddSetFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	AddSetFlagsForNetworkIdentifiers(flags, flagsplugin.Prefix("network-ids", prefix), hidden)
}

// SetFromFlags sets the ApplicationUplink message from flags.
func (m *ApplicationUplink) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("session_key_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SessionKeyId = val
		paths = append(paths, flagsplugin.Prefix("session_key_id", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f_port", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FPort = val
		paths = append(paths, flagsplugin.Prefix("f_port", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f_cnt", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FCnt = val
		paths = append(paths, flagsplugin.Prefix("f_cnt", prefix))
	}
	if val, changed, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("frm_payload", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FrmPayload = val
		paths = append(paths, flagsplugin.Prefix("frm_payload", prefix))
	}
	// FIXME: Skipping DecodedPayload because this WKT is not supported.
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("decoded_payload_warnings", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DecodedPayloadWarnings = val
		paths = append(paths, flagsplugin.Prefix("decoded_payload_warnings", prefix))
	}
	// FIXME: Skipping NormalizedPayload because this repeated WKT is not supported
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("normalized_payload_warnings", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.NormalizedPayloadWarnings = val
		paths = append(paths, flagsplugin.Prefix("normalized_payload_warnings", prefix))
	}
	// FIXME: Skipping RxMetadata because it does not seem to implement AddSetFlags.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("settings", prefix)); changed {
		if m.Settings == nil {
			m.Settings = &TxSettings{}
		}
		if setPaths, err := m.Settings.SetFromFlags(flags, flagsplugin.Prefix("settings", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("received_at", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ReceivedAt = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("received_at", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("app_s_key", prefix)); changed {
		if m.AppSKey == nil {
			m.AppSKey = &KeyEnvelope{}
		}
		if setPaths, err := m.AppSKey.SetFromFlags(flags, flagsplugin.Prefix("app_s_key", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("last_a_f_cnt_down", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.LastAFCntDown = val
		paths = append(paths, flagsplugin.Prefix("last_a_f_cnt_down", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("confirmed", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Confirmed = val
		paths = append(paths, flagsplugin.Prefix("confirmed", prefix))
	}
	if val, changed, err := flagsplugin.GetDuration(flags, flagsplugin.Prefix("consumed_airtime", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.ConsumedAirtime = golang.SetDuration(val)
		paths = append(paths, flagsplugin.Prefix("consumed_airtime", prefix))
	}
	if val, changed, err := flagsplugin.GetFloat32(flags, flagsplugin.Prefix("packet_error_rate", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.PacketErrorRate = val
		paths = append(paths, flagsplugin.Prefix("packet_error_rate", prefix))
	}
	// FIXME: Skipping Locations because maps with message value types are currently not supported.
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("version_ids", prefix)); changed {
		if m.VersionIds == nil {
			m.VersionIds = &EndDeviceVersionIdentifiers{}
		}
		if setPaths, err := m.VersionIds.SetFromFlags(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("network_ids", prefix)); changed {
		if m.NetworkIds == nil {
			m.NetworkIds = &NetworkIdentifiers{}
		}
		if setPaths, err := m.NetworkIds.SetFromFlags(flags, flagsplugin.Prefix("network_ids", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForApplicationUplinkNormalized adds flags to select fields in ApplicationUplinkNormalized.
func AddSelectFlagsForApplicationUplinkNormalized(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-port", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-port", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-cnt", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frm-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frm-payload", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("normalized-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("normalized-payload", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("normalized-payload-warnings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("normalized-payload-warnings", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("rx-metadata", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("rx-metadata", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("settings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("settings", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForTxSettings(flags, flagsplugin.Prefix("settings", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("received-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("confirmed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("confirmed", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("consumed-airtime", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("consumed-airtime", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("locations", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("locations", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("version-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("version-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("network-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("network-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForNetworkIdentifiers(flags, flagsplugin.Prefix("network-ids", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forApplicationUplinkNormalized message from select flags.
func PathsFromSelectFlagsForApplicationUplinkNormalized(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session_key_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session_key_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f_port", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("f_port", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f_cnt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("f_cnt", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frm_payload", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("frm_payload", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("normalized_payload", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("normalized_payload", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("normalized_payload_warnings", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("normalized_payload_warnings", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("rx_metadata", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("rx_metadata", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("settings", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("settings", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForTxSettings(flags, flagsplugin.Prefix("settings", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("received_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("received_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("confirmed", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("confirmed", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("consumed_airtime", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("consumed_airtime", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("locations", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("locations", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("version_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceVersionIdentifiers(flags, flagsplugin.Prefix("version_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("network_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("network_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForNetworkIdentifiers(flags, flagsplugin.Prefix("network_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSelectFlagsForApplicationLocation adds flags to select fields in ApplicationLocation.
func AddSelectFlagsForApplicationLocation(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("location", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("location", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForLocation(flags, flagsplugin.Prefix("location", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attributes", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attributes", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationLocation message from select flags.
func PathsFromSelectFlagsForApplicationLocation(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("service", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("location", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("location", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForLocation(flags, flagsplugin.Prefix("location", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attributes", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("attributes", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationJoinAccept adds flags to select fields in ApplicationJoinAccept.
func AddSelectFlagsForApplicationJoinAccept(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("app-s-key", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("app-s-key", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app-s-key", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("invalidated-downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("invalidated-downlinks", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("pending-session", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("pending-session", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("received-at", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationJoinAccept message from select flags.
func PathsFromSelectFlagsForApplicationJoinAccept(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session_key_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session_key_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("app_s_key", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("app_s_key", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForKeyEnvelope(flags, flagsplugin.Prefix("app_s_key", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("invalidated_downlinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("invalidated_downlinks", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("pending_session", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("pending_session", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("received_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("received_at", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationDownlink_ClassBC adds flags to select fields in ApplicationDownlink_ClassBC.
func AddSelectFlagsForApplicationDownlink_ClassBC(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("gateways", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("gateways", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("absolute-time", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("absolute-time", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationDownlink_ClassBC message from select flags.
func PathsFromSelectFlagsForApplicationDownlink_ClassBC(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("gateways", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("gateways", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("absolute_time", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("absolute_time", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationDownlink_ClassBC adds flags to select fields in ApplicationDownlink_ClassBC.
func AddSetFlagsForApplicationDownlink_ClassBC(flags *pflag.FlagSet, prefix string, hidden bool) {
	// FIXME: Skipping Gateways because repeated messages are currently not supported.
	flags.AddFlag(flagsplugin.NewTimestampFlag(flagsplugin.Prefix("absolute-time", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ApplicationDownlink_ClassBC message from flags.
func (m *ApplicationDownlink_ClassBC) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	// FIXME: Skipping Gateways because it does not seem to implement AddSetFlags.
	if val, changed, err := flagsplugin.GetTimestamp(flags, flagsplugin.Prefix("absolute_time", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.AbsoluteTime = golang.SetTimestamp(val)
		paths = append(paths, flagsplugin.Prefix("absolute_time", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationDownlink_ConfirmedRetry adds flags to select fields in ApplicationDownlink_ConfirmedRetry.
func AddSelectFlagsForApplicationDownlink_ConfirmedRetry(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("attempt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("attempt", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("max-attempts", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("max-attempts", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationDownlink_ConfirmedRetry message from select flags.
func PathsFromSelectFlagsForApplicationDownlink_ConfirmedRetry(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("attempt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("attempt", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("max_attempts", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("max_attempts", prefix))
	}
	return paths, nil
}

// AddSetFlagsForApplicationDownlink_ConfirmedRetry adds flags to select fields in ApplicationDownlink_ConfirmedRetry.
func AddSetFlagsForApplicationDownlink_ConfirmedRetry(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("attempt", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("max-attempts", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the ApplicationDownlink_ConfirmedRetry message from flags.
func (m *ApplicationDownlink_ConfirmedRetry) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("attempt", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Attempt = val
		paths = append(paths, flagsplugin.Prefix("attempt", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("max_attempts", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.MaxAttempts = &wrapperspb.UInt32Value{Value: val}
		paths = append(paths, flagsplugin.Prefix("max_attempts", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationDownlink adds flags to select fields in ApplicationDownlink.
func AddSelectFlagsForApplicationDownlink(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-port", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-port", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("f-cnt", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("f-cnt", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("frm-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("frm-payload", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("decoded-payload", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("decoded-payload", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("decoded-payload-warnings", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("confirmed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("confirmed", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("class-b-c", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("class-b-c", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationDownlink_ClassBC(flags, flagsplugin.Prefix("class-b-c", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("priority", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("priority", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("correlation-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("correlation-ids", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("confirmed-retry", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("confirmed-retry", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationDownlink_ConfirmedRetry(flags, flagsplugin.Prefix("confirmed-retry", prefix), hidden)
}

// SelectFromFlags outputs the fieldmask paths forApplicationDownlink message from select flags.
func PathsFromSelectFlagsForApplicationDownlink(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session_key_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session_key_id", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f_port", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("f_port", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("f_cnt", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("f_cnt", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("frm_payload", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("frm_payload", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("decoded_payload", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("decoded_payload", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("decoded_payload_warnings", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("decoded_payload_warnings", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("confirmed", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("confirmed", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("class_b_c", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("class_b_c", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink_ClassBC(flags, flagsplugin.Prefix("class_b_c", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("priority", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("priority", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("correlation_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("correlation_ids", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("confirmed_retry", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("confirmed_retry", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink_ConfirmedRetry(flags, flagsplugin.Prefix("confirmed_retry", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	return paths, nil
}

// AddSetFlagsForApplicationDownlink adds flags to select fields in ApplicationDownlink.
func AddSetFlagsForApplicationDownlink(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewHexBytesFlag(flagsplugin.Prefix("session-key-id", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-port", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewUint32Flag(flagsplugin.Prefix("f-cnt", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewHexBytesFlag(flagsplugin.Prefix("frm-payload", prefix), "", flagsplugin.WithHidden(hidden)))
	// FIXME: Skipping DecodedPayload because this WKT is currently not supported.
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("decoded-payload-warnings", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("confirmed", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForApplicationDownlink_ClassBC(flags, flagsplugin.Prefix("class-b-c", prefix), hidden)
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("priority", prefix), flagsplugin.EnumValueDesc(TxSchedulePriority_value), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringSliceFlag(flagsplugin.Prefix("correlation-ids", prefix), "", flagsplugin.WithHidden(hidden)))
	AddSetFlagsForApplicationDownlink_ConfirmedRetry(flags, flagsplugin.Prefix("confirmed-retry", prefix), hidden)
}

// SetFromFlags sets the ApplicationDownlink message from flags.
func (m *ApplicationDownlink) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("session_key_id", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.SessionKeyId = val
		paths = append(paths, flagsplugin.Prefix("session_key_id", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f_port", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FPort = val
		paths = append(paths, flagsplugin.Prefix("f_port", prefix))
	}
	if val, changed, err := flagsplugin.GetUint32(flags, flagsplugin.Prefix("f_cnt", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FCnt = val
		paths = append(paths, flagsplugin.Prefix("f_cnt", prefix))
	}
	if val, changed, err := flagsplugin.GetBytes(flags, flagsplugin.Prefix("frm_payload", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.FrmPayload = val
		paths = append(paths, flagsplugin.Prefix("frm_payload", prefix))
	}
	// FIXME: Skipping DecodedPayload because this WKT is not supported.
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("decoded_payload_warnings", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DecodedPayloadWarnings = val
		paths = append(paths, flagsplugin.Prefix("decoded_payload_warnings", prefix))
	}
	if val, changed, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("confirmed", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.Confirmed = val
		paths = append(paths, flagsplugin.Prefix("confirmed", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("class_b_c", prefix)); changed {
		if m.ClassBC == nil {
			m.ClassBC = &ApplicationDownlink_ClassBC{}
		}
		if setPaths, err := m.ClassBC.SetFromFlags(flags, flagsplugin.Prefix("class_b_c", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("priority", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, TxSchedulePriority_value)
		if err != nil {
			return nil, err
		}
		m.Priority = TxSchedulePriority(enumValue)
		paths = append(paths, flagsplugin.Prefix("priority", prefix))
	}
	if val, changed, err := flagsplugin.GetStringSlice(flags, flagsplugin.Prefix("correlation_ids", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.CorrelationIds = val
		paths = append(paths, flagsplugin.Prefix("correlation_ids", prefix))
	}
	if changed := flagsplugin.IsAnyPrefixSet(flags, flagsplugin.Prefix("confirmed_retry", prefix)); changed {
		if m.ConfirmedRetry == nil {
			m.ConfirmedRetry = &ApplicationDownlink_ConfirmedRetry{}
		}
		if setPaths, err := m.ConfirmedRetry.SetFromFlags(flags, flagsplugin.Prefix("confirmed_retry", prefix)); err != nil {
			return nil, err
		} else {
			paths = append(paths, setPaths...)
		}
	}
	return paths, nil
}

// AddSelectFlagsForApplicationDownlinkFailed adds flags to select fields in ApplicationDownlinkFailed.
func AddSelectFlagsForApplicationDownlinkFailed(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlink", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlink", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("downlink", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("error", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("error", prefix), true), flagsplugin.WithHidden(hidden)))
	// NOTE: error (ErrorDetails) does not seem to have select flags.
}

// SelectFromFlags outputs the fieldmask paths forApplicationDownlinkFailed message from select flags.
func PathsFromSelectFlagsForApplicationDownlinkFailed(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlink", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlink", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("downlink", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("error", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("error", prefix))
	}
	// NOTE: error (ErrorDetails) does not seem to have select flags.
	return paths, nil
}

// AddSelectFlagsForApplicationInvalidatedDownlinks adds flags to select fields in ApplicationInvalidatedDownlinks.
func AddSelectFlagsForApplicationInvalidatedDownlinks(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("downlinks", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("downlinks", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("last-f-cnt-down", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("last-f-cnt-down", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("session-key-id", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("session-key-id", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationInvalidatedDownlinks message from select flags.
func PathsFromSelectFlagsForApplicationInvalidatedDownlinks(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("downlinks", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("downlinks", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("last_f_cnt_down", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("last_f_cnt_down", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("session_key_id", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("session_key_id", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationServiceData adds flags to select fields in ApplicationServiceData.
func AddSelectFlagsForApplicationServiceData(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("service", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("service", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("data", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationServiceData message from select flags.
func PathsFromSelectFlagsForApplicationServiceData(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("service", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("service", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("data", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("data", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForApplicationUp adds flags to select fields in ApplicationUp.
func AddSelectFlagsForApplicationUp(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("end-device-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("end-device-ids", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end-device-ids", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("correlation-ids", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("correlation-ids", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("received-at", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("received-at", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.uplink-message", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.uplink-message", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationUplink(flags, flagsplugin.Prefix("up.uplink-message", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.uplink-normalized", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.uplink-normalized", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationUplinkNormalized(flags, flagsplugin.Prefix("up.uplink-normalized", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.join-accept", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.join-accept", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationJoinAccept(flags, flagsplugin.Prefix("up.join-accept", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-ack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-ack", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-ack", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-nack", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-nack", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-nack", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-sent", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-sent", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-sent", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-failed", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-failed", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationDownlinkFailed(flags, flagsplugin.Prefix("up.downlink-failed", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-queued", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-queued", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink-queued", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.downlink-queue-invalidated", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.downlink-queue-invalidated", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationInvalidatedDownlinks(flags, flagsplugin.Prefix("up.downlink-queue-invalidated", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.location-solved", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.location-solved", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationLocation(flags, flagsplugin.Prefix("up.location-solved", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up.service-data", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up.service-data", prefix), true), flagsplugin.WithHidden(hidden)))
	AddSelectFlagsForApplicationServiceData(flags, flagsplugin.Prefix("up.service-data", prefix), hidden)
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("simulated", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("simulated", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forApplicationUp message from select flags.
func PathsFromSelectFlagsForApplicationUp(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("end_device_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("end_device_ids", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForEndDeviceIdentifiers(flags, flagsplugin.Prefix("end_device_ids", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("correlation_ids", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("correlation_ids", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("received_at", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("received_at", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.uplink_message", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.uplink_message", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationUplink(flags, flagsplugin.Prefix("up.uplink_message", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.uplink_normalized", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.uplink_normalized", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationUplinkNormalized(flags, flagsplugin.Prefix("up.uplink_normalized", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.join_accept", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.join_accept", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationJoinAccept(flags, flagsplugin.Prefix("up.join_accept", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink_ack", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.downlink_ack", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink_ack", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink_nack", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.downlink_nack", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink_nack", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink_sent", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.downlink_sent", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink_sent", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink_failed", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.downlink_failed", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlinkFailed(flags, flagsplugin.Prefix("up.downlink_failed", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink_queued", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.downlink_queued", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationDownlink(flags, flagsplugin.Prefix("up.downlink_queued", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.downlink_queue_invalidated", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.downlink_queue_invalidated", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationInvalidatedDownlinks(flags, flagsplugin.Prefix("up.downlink_queue_invalidated", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.location_solved", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.location_solved", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationLocation(flags, flagsplugin.Prefix("up.location_solved", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up.service_data", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up.service_data", prefix))
	}
	if selectPaths, err := PathsFromSelectFlagsForApplicationServiceData(flags, flagsplugin.Prefix("up.service_data", prefix)); err != nil {
		return nil, err
	} else {
		paths = append(paths, selectPaths...)
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("simulated", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("simulated", prefix))
	}
	return paths, nil
}

// AddSelectFlagsForMessagePayloadFormatters adds flags to select fields in MessagePayloadFormatters.
func AddSelectFlagsForMessagePayloadFormatters(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up-formatter", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up-formatter", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("up-formatter-parameter", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("up-formatter-parameter", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("down-formatter", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("down-formatter", prefix), false), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewBoolFlag(flagsplugin.Prefix("down-formatter-parameter", prefix), flagsplugin.SelectDesc(flagsplugin.Prefix("down-formatter-parameter", prefix), false), flagsplugin.WithHidden(hidden)))
}

// SelectFromFlags outputs the fieldmask paths forMessagePayloadFormatters message from select flags.
func PathsFromSelectFlagsForMessagePayloadFormatters(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up_formatter", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up_formatter", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("up_formatter_parameter", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("up_formatter_parameter", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("down_formatter", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("down_formatter", prefix))
	}
	if val, selected, err := flagsplugin.GetBool(flags, flagsplugin.Prefix("down_formatter_parameter", prefix)); err != nil {
		return nil, err
	} else if selected && val {
		paths = append(paths, flagsplugin.Prefix("down_formatter_parameter", prefix))
	}
	return paths, nil
}

// AddSetFlagsForMessagePayloadFormatters adds flags to select fields in MessagePayloadFormatters.
func AddSetFlagsForMessagePayloadFormatters(flags *pflag.FlagSet, prefix string, hidden bool) {
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("up-formatter", prefix), flagsplugin.EnumValueDesc(PayloadFormatter_value), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("up-formatter-parameter", prefix), "", flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("down-formatter", prefix), flagsplugin.EnumValueDesc(PayloadFormatter_value), flagsplugin.WithHidden(hidden)))
	flags.AddFlag(flagsplugin.NewStringFlag(flagsplugin.Prefix("down-formatter-parameter", prefix), "", flagsplugin.WithHidden(hidden)))
}

// SetFromFlags sets the MessagePayloadFormatters message from flags.
func (m *MessagePayloadFormatters) SetFromFlags(flags *pflag.FlagSet, prefix string) (paths []string, err error) {
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("up_formatter", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, PayloadFormatter_value)
		if err != nil {
			return nil, err
		}
		m.UpFormatter = PayloadFormatter(enumValue)
		paths = append(paths, flagsplugin.Prefix("up_formatter", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("up_formatter_parameter", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.UpFormatterParameter = val
		paths = append(paths, flagsplugin.Prefix("up_formatter_parameter", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("down_formatter", prefix)); err != nil {
		return nil, err
	} else if changed {
		enumValue, err := flagsplugin.SetEnumString(val, PayloadFormatter_value)
		if err != nil {
			return nil, err
		}
		m.DownFormatter = PayloadFormatter(enumValue)
		paths = append(paths, flagsplugin.Prefix("down_formatter", prefix))
	}
	if val, changed, err := flagsplugin.GetString(flags, flagsplugin.Prefix("down_formatter_parameter", prefix)); err != nil {
		return nil, err
	} else if changed {
		m.DownFormatterParameter = val
		paths = append(paths, flagsplugin.Prefix("down_formatter_parameter", prefix))
	}
	return paths, nil
}
