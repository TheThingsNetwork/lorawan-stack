// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *QRCodeFormat) SetFields(src *QRCodeFormat, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "name":
			if len(subs) > 0 {
				return fmt.Errorf("'name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Name = src.Name
			} else {
				var zero string
				dst.Name = zero
			}
		case "description":
			if len(subs) > 0 {
				return fmt.Errorf("'description' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Description = src.Description
			} else {
				var zero string
				dst.Description = zero
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				dst.FieldMask = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *QRCodeFormats) SetFields(src *QRCodeFormats, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "formats":
			if len(subs) > 0 {
				return fmt.Errorf("'formats' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Formats = src.Formats
			} else {
				dst.Formats = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetQRCodeFormatRequest) SetFields(src *GetQRCodeFormatRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GenerateEndDeviceQRCodeRequest) SetFields(src *GenerateEndDeviceQRCodeRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}
		case "end_device":
			if len(subs) > 0 {
				var newDst, newSrc *EndDevice
				if (src == nil || src.EndDevice == nil) && dst.EndDevice == nil {
					continue
				}
				if src != nil {
					newSrc = src.EndDevice
				}
				if dst.EndDevice != nil {
					newDst = dst.EndDevice
				} else {
					newDst = &EndDevice{}
					dst.EndDevice = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDevice = src.EndDevice
				} else {
					dst.EndDevice = nil
				}
			}
		case "image":
			if len(subs) > 0 {
				var newDst, newSrc *GenerateEndDeviceQRCodeRequest_Image
				if (src == nil || src.Image == nil) && dst.Image == nil {
					continue
				}
				if src != nil {
					newSrc = src.Image
				}
				if dst.Image != nil {
					newDst = dst.Image
				} else {
					newDst = &GenerateEndDeviceQRCodeRequest_Image{}
					dst.Image = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Image = src.Image
				} else {
					dst.Image = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GenerateQRCodeResponse) SetFields(src *GenerateQRCodeResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "text":
			if len(subs) > 0 {
				return fmt.Errorf("'text' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Text = src.Text
			} else {
				var zero string
				dst.Text = zero
			}
		case "image":
			if len(subs) > 0 {
				var newDst, newSrc *Picture
				if (src == nil || src.Image == nil) && dst.Image == nil {
					continue
				}
				if src != nil {
					newSrc = src.Image
				}
				if dst.Image != nil {
					newDst = dst.Image
				} else {
					newDst = &Picture{}
					dst.Image = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Image = src.Image
				} else {
					dst.Image = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ParseEndDeviceQRCodeRequest) SetFields(src *ParseEndDeviceQRCodeRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}
		case "qr_code":
			if len(subs) > 0 {
				return fmt.Errorf("'qr_code' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.QrCode = src.QrCode
			} else {
				dst.QrCode = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ParseEndDeviceQRCodeResponse) SetFields(src *ParseEndDeviceQRCodeResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}
		case "end_device_template":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceTemplate
				if (src == nil || src.EndDeviceTemplate == nil) && dst.EndDeviceTemplate == nil {
					continue
				}
				if src != nil {
					newSrc = src.EndDeviceTemplate
				}
				if dst.EndDeviceTemplate != nil {
					newDst = dst.EndDeviceTemplate
				} else {
					newDst = &EndDeviceTemplate{}
					dst.EndDeviceTemplate = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDeviceTemplate = src.EndDeviceTemplate
				} else {
					dst.EndDeviceTemplate = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ParseGatewayQRCodeRequest) SetFields(src *ParseGatewayQRCodeRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}
		case "qr_code":
			if len(subs) > 0 {
				return fmt.Errorf("'qr_code' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.QrCode = src.QrCode
			} else {
				dst.QrCode = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ParseGatewayQRCodeResponse) SetFields(src *ParseGatewayQRCodeResponse, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "format_id":
			if len(subs) > 0 {
				return fmt.Errorf("'format_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FormatId = src.FormatId
			} else {
				var zero string
				dst.FormatId = zero
			}
		case "claim_gateway_request":
			if len(subs) > 0 {
				var newDst, newSrc *ClaimGatewayRequest
				if (src == nil || src.ClaimGatewayRequest == nil) && dst.ClaimGatewayRequest == nil {
					continue
				}
				if src != nil {
					newSrc = src.ClaimGatewayRequest
				}
				if dst.ClaimGatewayRequest != nil {
					newDst = dst.ClaimGatewayRequest
				} else {
					newDst = &ClaimGatewayRequest{}
					dst.ClaimGatewayRequest = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ClaimGatewayRequest = src.ClaimGatewayRequest
				} else {
					dst.ClaimGatewayRequest = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GenerateEndDeviceQRCodeRequest_Image) SetFields(src *GenerateEndDeviceQRCodeRequest_Image, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "image_size":
			if len(subs) > 0 {
				return fmt.Errorf("'image_size' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ImageSize = src.ImageSize
			} else {
				var zero uint32
				dst.ImageSize = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
