// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *GatewayToken) SetFields(src *GatewayToken, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.KeyId = src.KeyId
			} else {
				var zero string
				dst.KeyId = zero
			}
		case "payload":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayToken_Payload
				if (src == nil || src.Payload == nil) && dst.Payload == nil {
					continue
				}
				if src != nil {
					newSrc = src.Payload
				}
				if dst.Payload != nil {
					newDst = dst.Payload
				} else {
					newDst = &GatewayToken_Payload{}
					dst.Payload = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Payload = src.Payload
				} else {
					dst.Payload = nil
				}
			}
		case "checksum":
			if len(subs) > 0 {
				return fmt.Errorf("'checksum' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Checksum = src.Checksum
			} else {
				dst.Checksum = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GatewayToken_Payload) SetFields(src *GatewayToken_Payload, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "gateway_ids":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayIdentifiers
				if (src == nil || src.GatewayIds == nil) && dst.GatewayIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.GatewayIds
				}
				if dst.GatewayIds != nil {
					newDst = dst.GatewayIds
				} else {
					newDst = &GatewayIdentifiers{}
					dst.GatewayIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GatewayIds = src.GatewayIds
				} else {
					dst.GatewayIds = nil
				}
			}
		case "rights":
			if len(subs) > 0 {
				var newDst, newSrc *Rights
				if (src == nil || src.Rights == nil) && dst.Rights == nil {
					continue
				}
				if src != nil {
					newSrc = src.Rights
				}
				if dst.Rights != nil {
					newDst = dst.Rights
				} else {
					newDst = &Rights{}
					dst.Rights = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Rights = src.Rights
				} else {
					dst.Rights = nil
				}
			}
		case "created_at":
			if len(subs) > 0 {
				return fmt.Errorf("'created_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CreatedAt = src.CreatedAt
			} else {
				dst.CreatedAt = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
