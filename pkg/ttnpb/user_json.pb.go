// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v1.6.0
// - protoc             v4.23.4
// source: ttn/lorawan/v3/user.proto

package ttnpb

import (
	golang "github.com/TheThingsIndustries/protoc-gen-go-json/golang"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
)

// MarshalProtoJSON marshals the ConsoleTheme to JSON.
func (x ConsoleTheme) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), ConsoleTheme_name)
}

// MarshalText marshals the ConsoleTheme to text.
func (x ConsoleTheme) MarshalText() ([]byte, error) {
	return []byte(jsonplugin.GetEnumString(int32(x), ConsoleTheme_name)), nil
}

// MarshalJSON marshals the ConsoleTheme to JSON.
func (x ConsoleTheme) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// ConsoleTheme_customvalue contains custom string values that extend ConsoleTheme_value.
var ConsoleTheme_customvalue = map[string]int32{
	"SYSTEM": 0,
	"LIGHT":  1,
	"DARK":   2,
}

// UnmarshalProtoJSON unmarshals the ConsoleTheme from JSON.
func (x *ConsoleTheme) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(ConsoleTheme_value, ConsoleTheme_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read ConsoleTheme enum: %v", err)
		return
	}
	*x = ConsoleTheme(v)
}

// UnmarshalText unmarshals the ConsoleTheme from text.
func (x *ConsoleTheme) UnmarshalText(b []byte) error {
	i, err := jsonplugin.ParseEnumString(string(b), ConsoleTheme_customvalue, ConsoleTheme_value)
	if err != nil {
		return err
	}
	*x = ConsoleTheme(i)
	return nil
}

// UnmarshalJSON unmarshals the ConsoleTheme from JSON.
func (x *ConsoleTheme) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DashboardLayout to JSON.
func (x DashboardLayout) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), DashboardLayout_name)
}

// MarshalText marshals the DashboardLayout to text.
func (x DashboardLayout) MarshalText() ([]byte, error) {
	return []byte(jsonplugin.GetEnumString(int32(x), DashboardLayout_name)), nil
}

// MarshalJSON marshals the DashboardLayout to JSON.
func (x DashboardLayout) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// DashboardLayout_customvalue contains custom string values that extend DashboardLayout_value.
var DashboardLayout_customvalue = map[string]int32{
	"TABLE": 0,
	"LIST":  1,
	"GRID":  2,
}

// UnmarshalProtoJSON unmarshals the DashboardLayout from JSON.
func (x *DashboardLayout) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(DashboardLayout_value, DashboardLayout_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read DashboardLayout enum: %v", err)
		return
	}
	*x = DashboardLayout(v)
}

// UnmarshalText unmarshals the DashboardLayout from text.
func (x *DashboardLayout) UnmarshalText(b []byte) error {
	i, err := jsonplugin.ParseEnumString(string(b), DashboardLayout_customvalue, DashboardLayout_value)
	if err != nil {
		return err
	}
	*x = DashboardLayout(i)
	return nil
}

// UnmarshalJSON unmarshals the DashboardLayout from JSON.
func (x *DashboardLayout) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the EmailNotificationPreferences message to JSON.
func (x *EmailNotificationPreferences) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Types) > 0 || s.HasField("types") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("types")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Types {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s)
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the EmailNotificationPreferences to JSON.
func (x *EmailNotificationPreferences) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the EmailNotificationPreferences message from JSON.
func (x *EmailNotificationPreferences) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "types":
			s.AddField("types")
			if s.ReadNil() {
				x.Types = nil
				return
			}
			s.ReadArray(func() {
				var v NotificationType
				v.UnmarshalProtoJSON(s)
				x.Types = append(x.Types, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the EmailNotificationPreferences from JSON.
func (x *EmailNotificationPreferences) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UserConsolePreferences_DashboardLayouts message to JSON.
func (x *UserConsolePreferences_DashboardLayouts) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ApiKey != 0 || s.HasField("api_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("api_key")
		x.ApiKey.MarshalProtoJSON(s)
	}
	if x.Application != 0 || s.HasField("application") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("application")
		x.Application.MarshalProtoJSON(s)
	}
	if x.Collaborator != 0 || s.HasField("collaborator") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("collaborator")
		x.Collaborator.MarshalProtoJSON(s)
	}
	if x.EndDevice != 0 || s.HasField("end_device") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device")
		x.EndDevice.MarshalProtoJSON(s)
	}
	if x.Gateway != 0 || s.HasField("gateway") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway")
		x.Gateway.MarshalProtoJSON(s)
	}
	if x.Organization != 0 || s.HasField("organization") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("organization")
		x.Organization.MarshalProtoJSON(s)
	}
	if x.Overview != 0 || s.HasField("overview") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("overview")
		x.Overview.MarshalProtoJSON(s)
	}
	if x.User != 0 || s.HasField("user") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user")
		x.User.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UserConsolePreferences_DashboardLayouts to JSON.
func (x *UserConsolePreferences_DashboardLayouts) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UserConsolePreferences_DashboardLayouts message from JSON.
func (x *UserConsolePreferences_DashboardLayouts) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "api_key", "apiKey":
			s.AddField("api_key")
			x.ApiKey.UnmarshalProtoJSON(s)
		case "application":
			s.AddField("application")
			x.Application.UnmarshalProtoJSON(s)
		case "collaborator":
			s.AddField("collaborator")
			x.Collaborator.UnmarshalProtoJSON(s)
		case "end_device", "endDevice":
			s.AddField("end_device")
			x.EndDevice.UnmarshalProtoJSON(s)
		case "gateway":
			s.AddField("gateway")
			x.Gateway.UnmarshalProtoJSON(s)
		case "organization":
			s.AddField("organization")
			x.Organization.UnmarshalProtoJSON(s)
		case "overview":
			s.AddField("overview")
			x.Overview.UnmarshalProtoJSON(s)
		case "user":
			s.AddField("user")
			x.User.UnmarshalProtoJSON(s)
		}
	})
}

// UnmarshalJSON unmarshals the UserConsolePreferences_DashboardLayouts from JSON.
func (x *UserConsolePreferences_DashboardLayouts) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UserConsolePreferences message to JSON.
func (x *UserConsolePreferences) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ConsoleTheme != 0 || s.HasField("console_theme") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("console_theme")
		x.ConsoleTheme.MarshalProtoJSON(s)
	}
	if x.DashboardLayouts != nil || s.HasField("dashboard_layouts") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dashboard_layouts")
		x.DashboardLayouts.MarshalProtoJSON(s.WithField("dashboard_layouts"))
	}
	if x.SortBy != nil || s.HasField("sort_by") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sort_by")
		// NOTE: UserConsolePreferences_SortBy does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.SortBy)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UserConsolePreferences to JSON.
func (x *UserConsolePreferences) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UserConsolePreferences message from JSON.
func (x *UserConsolePreferences) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "console_theme", "consoleTheme":
			s.AddField("console_theme")
			x.ConsoleTheme.UnmarshalProtoJSON(s)
		case "dashboard_layouts", "dashboardLayouts":
			if s.ReadNil() {
				x.DashboardLayouts = nil
				return
			}
			x.DashboardLayouts = &UserConsolePreferences_DashboardLayouts{}
			x.DashboardLayouts.UnmarshalProtoJSON(s.WithField("dashboard_layouts", true))
		case "sort_by", "sortBy":
			s.AddField("sort_by")
			if s.ReadNil() {
				x.SortBy = nil
				return
			}
			// NOTE: UserConsolePreferences_SortBy does not seem to implement UnmarshalProtoJSON.
			var v UserConsolePreferences_SortBy
			golang.UnmarshalMessage(s, &v)
			x.SortBy = &v
		}
	})
}

// UnmarshalJSON unmarshals the UserConsolePreferences from JSON.
func (x *UserConsolePreferences) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the User message to JSON.
func (x *User) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Ids != nil || s.HasField("ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		// NOTE: UserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Ids)
	}
	if x.CreatedAt != nil || s.HasField("created_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("created_at")
		if x.CreatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.CreatedAt)
		}
	}
	if x.UpdatedAt != nil || s.HasField("updated_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("updated_at")
		if x.UpdatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.UpdatedAt)
		}
	}
	if x.DeletedAt != nil || s.HasField("deleted_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("deleted_at")
		if x.DeletedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.DeletedAt)
		}
	}
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if x.Description != "" || s.HasField("description") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("description")
		s.WriteString(x.Description)
	}
	if x.Attributes != nil || s.HasField("attributes") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("attributes")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Attributes {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if len(x.ContactInfo) > 0 || s.HasField("contact_info") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("contact_info")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ContactInfo {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("contact_info"))
		}
		s.WriteArrayEnd()
	}
	if x.PrimaryEmailAddress != "" || s.HasField("primary_email_address") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("primary_email_address")
		s.WriteString(x.PrimaryEmailAddress)
	}
	if x.PrimaryEmailAddressValidatedAt != nil || s.HasField("primary_email_address_validated_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("primary_email_address_validated_at")
		if x.PrimaryEmailAddressValidatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.PrimaryEmailAddressValidatedAt)
		}
	}
	if x.Password != "" || s.HasField("password") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("password")
		s.WriteString(x.Password)
	}
	if x.PasswordUpdatedAt != nil || s.HasField("password_updated_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("password_updated_at")
		if x.PasswordUpdatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.PasswordUpdatedAt)
		}
	}
	if x.RequirePasswordUpdate || s.HasField("require_password_update") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("require_password_update")
		s.WriteBool(x.RequirePasswordUpdate)
	}
	if x.State != 0 || s.HasField("state") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("state")
		x.State.MarshalProtoJSON(s)
	}
	if x.StateDescription != "" || s.HasField("state_description") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("state_description")
		s.WriteString(x.StateDescription)
	}
	if x.Admin || s.HasField("admin") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("admin")
		s.WriteBool(x.Admin)
	}
	if x.TemporaryPassword != "" || s.HasField("temporary_password") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("temporary_password")
		s.WriteString(x.TemporaryPassword)
	}
	if x.TemporaryPasswordCreatedAt != nil || s.HasField("temporary_password_created_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("temporary_password_created_at")
		if x.TemporaryPasswordCreatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.TemporaryPasswordCreatedAt)
		}
	}
	if x.TemporaryPasswordExpiresAt != nil || s.HasField("temporary_password_expires_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("temporary_password_expires_at")
		if x.TemporaryPasswordExpiresAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.TemporaryPasswordExpiresAt)
		}
	}
	if x.ProfilePicture != nil || s.HasField("profile_picture") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("profile_picture")
		// NOTE: Picture does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.ProfilePicture)
	}
	if x.ConsolePreferences != nil || s.HasField("console_preferences") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("console_preferences")
		x.ConsolePreferences.MarshalProtoJSON(s.WithField("console_preferences"))
	}
	if x.EmailNotificationPreferences != nil || s.HasField("email_notification_preferences") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("email_notification_preferences")
		x.EmailNotificationPreferences.MarshalProtoJSON(s.WithField("email_notification_preferences"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the User to JSON.
func (x *User) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the User message from JSON.
func (x *User) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ids":
			s.AddField("ids")
			if s.ReadNil() {
				x.Ids = nil
				return
			}
			// NOTE: UserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v UserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.Ids = &v
		case "created_at", "createdAt":
			s.AddField("created_at")
			if s.ReadNil() {
				x.CreatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.CreatedAt = v
		case "updated_at", "updatedAt":
			s.AddField("updated_at")
			if s.ReadNil() {
				x.UpdatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.UpdatedAt = v
		case "deleted_at", "deletedAt":
			s.AddField("deleted_at")
			if s.ReadNil() {
				x.DeletedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.DeletedAt = v
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		case "description":
			s.AddField("description")
			x.Description = s.ReadString()
		case "attributes":
			s.AddField("attributes")
			if s.ReadNil() {
				x.Attributes = nil
				return
			}
			x.Attributes = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.Attributes[key] = s.ReadString()
			})
		case "contact_info", "contactInfo":
			s.AddField("contact_info")
			if s.ReadNil() {
				x.ContactInfo = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.ContactInfo = append(x.ContactInfo, nil)
					return
				}
				v := &ContactInfo{}
				v.UnmarshalProtoJSON(s.WithField("contact_info", false))
				if s.Err() != nil {
					return
				}
				x.ContactInfo = append(x.ContactInfo, v)
			})
		case "primary_email_address", "primaryEmailAddress":
			s.AddField("primary_email_address")
			x.PrimaryEmailAddress = s.ReadString()
		case "primary_email_address_validated_at", "primaryEmailAddressValidatedAt":
			s.AddField("primary_email_address_validated_at")
			if s.ReadNil() {
				x.PrimaryEmailAddressValidatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.PrimaryEmailAddressValidatedAt = v
		case "password":
			s.AddField("password")
			x.Password = s.ReadString()
		case "password_updated_at", "passwordUpdatedAt":
			s.AddField("password_updated_at")
			if s.ReadNil() {
				x.PasswordUpdatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.PasswordUpdatedAt = v
		case "require_password_update", "requirePasswordUpdate":
			s.AddField("require_password_update")
			x.RequirePasswordUpdate = s.ReadBool()
		case "state":
			s.AddField("state")
			x.State.UnmarshalProtoJSON(s)
		case "state_description", "stateDescription":
			s.AddField("state_description")
			x.StateDescription = s.ReadString()
		case "admin":
			s.AddField("admin")
			x.Admin = s.ReadBool()
		case "temporary_password", "temporaryPassword":
			s.AddField("temporary_password")
			x.TemporaryPassword = s.ReadString()
		case "temporary_password_created_at", "temporaryPasswordCreatedAt":
			s.AddField("temporary_password_created_at")
			if s.ReadNil() {
				x.TemporaryPasswordCreatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.TemporaryPasswordCreatedAt = v
		case "temporary_password_expires_at", "temporaryPasswordExpiresAt":
			s.AddField("temporary_password_expires_at")
			if s.ReadNil() {
				x.TemporaryPasswordExpiresAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.TemporaryPasswordExpiresAt = v
		case "profile_picture", "profilePicture":
			s.AddField("profile_picture")
			if s.ReadNil() {
				x.ProfilePicture = nil
				return
			}
			// NOTE: Picture does not seem to implement UnmarshalProtoJSON.
			var v Picture
			golang.UnmarshalMessage(s, &v)
			x.ProfilePicture = &v
		case "console_preferences", "consolePreferences":
			if s.ReadNil() {
				x.ConsolePreferences = nil
				return
			}
			x.ConsolePreferences = &UserConsolePreferences{}
			x.ConsolePreferences.UnmarshalProtoJSON(s.WithField("console_preferences", true))
		case "email_notification_preferences", "emailNotificationPreferences":
			if s.ReadNil() {
				x.EmailNotificationPreferences = nil
				return
			}
			x.EmailNotificationPreferences = &EmailNotificationPreferences{}
			x.EmailNotificationPreferences.UnmarshalProtoJSON(s.WithField("email_notification_preferences", true))
		}
	})
}

// UnmarshalJSON unmarshals the User from JSON.
func (x *User) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Users message to JSON.
func (x *Users) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Users) > 0 || s.HasField("users") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("users")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Users {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("users"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Users to JSON.
func (x *Users) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Users message from JSON.
func (x *Users) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "users":
			s.AddField("users")
			if s.ReadNil() {
				x.Users = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Users = append(x.Users, nil)
					return
				}
				v := &User{}
				v.UnmarshalProtoJSON(s.WithField("users", false))
				if s.Err() != nil {
					return
				}
				x.Users = append(x.Users, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the Users from JSON.
func (x *Users) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetUserRequest message to JSON.
func (x *GetUserRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UserIds != nil || s.HasField("user_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user_ids")
		// NOTE: UserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UserIds)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetUserRequest to JSON.
func (x *GetUserRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetUserRequest message from JSON.
func (x *GetUserRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "user_ids", "userIds":
			s.AddField("user_ids")
			if s.ReadNil() {
				x.UserIds = nil
				return
			}
			// NOTE: UserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v UserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.UserIds = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the GetUserRequest from JSON.
func (x *GetUserRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListUsersRequest message to JSON.
func (x *ListUsersRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	if x.Order != "" || s.HasField("order") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("order")
		s.WriteString(x.Order)
	}
	if x.Limit != 0 || s.HasField("limit") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("limit")
		s.WriteUint32(x.Limit)
	}
	if x.Page != 0 || s.HasField("page") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("page")
		s.WriteUint32(x.Page)
	}
	if x.Deleted || s.HasField("deleted") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("deleted")
		s.WriteBool(x.Deleted)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListUsersRequest to JSON.
func (x *ListUsersRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListUsersRequest message from JSON.
func (x *ListUsersRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "order":
			s.AddField("order")
			x.Order = s.ReadString()
		case "limit":
			s.AddField("limit")
			x.Limit = s.ReadUint32()
		case "page":
			s.AddField("page")
			x.Page = s.ReadUint32()
		case "deleted":
			s.AddField("deleted")
			x.Deleted = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the ListUsersRequest from JSON.
func (x *ListUsersRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateUserRequest message to JSON.
func (x *CreateUserRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.User != nil || s.HasField("user") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user")
		x.User.MarshalProtoJSON(s.WithField("user"))
	}
	if x.InvitationToken != "" || s.HasField("invitation_token") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("invitation_token")
		s.WriteString(x.InvitationToken)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateUserRequest to JSON.
func (x *CreateUserRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateUserRequest message from JSON.
func (x *CreateUserRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "user":
			if s.ReadNil() {
				x.User = nil
				return
			}
			x.User = &User{}
			x.User.UnmarshalProtoJSON(s.WithField("user", true))
		case "invitation_token", "invitationToken":
			s.AddField("invitation_token")
			x.InvitationToken = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the CreateUserRequest from JSON.
func (x *CreateUserRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateUserRequest message to JSON.
func (x *UpdateUserRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.User != nil || s.HasField("user") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user")
		x.User.MarshalProtoJSON(s.WithField("user"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateUserRequest to JSON.
func (x *UpdateUserRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateUserRequest message from JSON.
func (x *UpdateUserRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "user":
			if s.ReadNil() {
				x.User = nil
				return
			}
			x.User = &User{}
			x.User.UnmarshalProtoJSON(s.WithField("user", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the UpdateUserRequest from JSON.
func (x *UpdateUserRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateUserAPIKeyRequest message to JSON.
func (x *CreateUserAPIKeyRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UserIds != nil || s.HasField("user_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user_ids")
		// NOTE: UserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UserIds)
	}
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if len(x.Rights) > 0 || s.HasField("rights") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rights")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Rights {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s)
		}
		s.WriteArrayEnd()
	}
	if x.ExpiresAt != nil || s.HasField("expires_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("expires_at")
		if x.ExpiresAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.ExpiresAt)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateUserAPIKeyRequest to JSON.
func (x *CreateUserAPIKeyRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateUserAPIKeyRequest message from JSON.
func (x *CreateUserAPIKeyRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "user_ids", "userIds":
			s.AddField("user_ids")
			if s.ReadNil() {
				x.UserIds = nil
				return
			}
			// NOTE: UserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v UserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.UserIds = &v
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		case "rights":
			s.AddField("rights")
			if s.ReadNil() {
				x.Rights = nil
				return
			}
			s.ReadArray(func() {
				var v Right
				v.UnmarshalProtoJSON(s)
				x.Rights = append(x.Rights, v)
			})
		case "expires_at", "expiresAt":
			s.AddField("expires_at")
			if s.ReadNil() {
				x.ExpiresAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.ExpiresAt = v
		}
	})
}

// UnmarshalJSON unmarshals the CreateUserAPIKeyRequest from JSON.
func (x *CreateUserAPIKeyRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateUserAPIKeyRequest message to JSON.
func (x *UpdateUserAPIKeyRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UserIds != nil || s.HasField("user_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user_ids")
		// NOTE: UserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UserIds)
	}
	if x.ApiKey != nil || s.HasField("api_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("api_key")
		x.ApiKey.MarshalProtoJSON(s.WithField("api_key"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateUserAPIKeyRequest to JSON.
func (x *UpdateUserAPIKeyRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateUserAPIKeyRequest message from JSON.
func (x *UpdateUserAPIKeyRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "user_ids", "userIds":
			s.AddField("user_ids")
			if s.ReadNil() {
				x.UserIds = nil
				return
			}
			// NOTE: UserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v UserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.UserIds = &v
		case "api_key", "apiKey":
			if s.ReadNil() {
				x.ApiKey = nil
				return
			}
			x.ApiKey = &APIKey{}
			x.ApiKey.UnmarshalProtoJSON(s.WithField("api_key", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the UpdateUserAPIKeyRequest from JSON.
func (x *UpdateUserAPIKeyRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UserBookmark message to JSON.
func (x *UserBookmark) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UserIds != nil || s.HasField("user_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user_ids")
		// NOTE: UserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UserIds)
	}
	if x.EntityIds != nil || s.HasField("entity_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("entity_ids")
		x.EntityIds.MarshalProtoJSON(s.WithField("entity_ids"))
	}
	if x.CreatedAt != nil || s.HasField("created_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("created_at")
		if x.CreatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.CreatedAt)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UserBookmark to JSON.
func (x *UserBookmark) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UserBookmark message from JSON.
func (x *UserBookmark) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "user_ids", "userIds":
			s.AddField("user_ids")
			if s.ReadNil() {
				x.UserIds = nil
				return
			}
			// NOTE: UserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v UserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.UserIds = &v
		case "entity_ids", "entityIds":
			if s.ReadNil() {
				x.EntityIds = nil
				return
			}
			x.EntityIds = &EntityIdentifiers{}
			x.EntityIds.UnmarshalProtoJSON(s.WithField("entity_ids", true))
		case "created_at", "createdAt":
			s.AddField("created_at")
			if s.ReadNil() {
				x.CreatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.CreatedAt = v
		}
	})
}

// UnmarshalJSON unmarshals the UserBookmark from JSON.
func (x *UserBookmark) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UserBookmarks message to JSON.
func (x *UserBookmarks) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Bookmarks) > 0 || s.HasField("bookmarks") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("bookmarks")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Bookmarks {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("bookmarks"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UserBookmarks to JSON.
func (x *UserBookmarks) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UserBookmarks message from JSON.
func (x *UserBookmarks) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "bookmarks":
			s.AddField("bookmarks")
			if s.ReadNil() {
				x.Bookmarks = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Bookmarks = append(x.Bookmarks, nil)
					return
				}
				v := &UserBookmark{}
				v.UnmarshalProtoJSON(s.WithField("bookmarks", false))
				if s.Err() != nil {
					return
				}
				x.Bookmarks = append(x.Bookmarks, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the UserBookmarks from JSON.
func (x *UserBookmarks) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateUserBookmarkRequest message to JSON.
func (x *CreateUserBookmarkRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UserIds != nil || s.HasField("user_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user_ids")
		// NOTE: UserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UserIds)
	}
	if x.EntityIds != nil || s.HasField("entity_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("entity_ids")
		x.EntityIds.MarshalProtoJSON(s.WithField("entity_ids"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateUserBookmarkRequest to JSON.
func (x *CreateUserBookmarkRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateUserBookmarkRequest message from JSON.
func (x *CreateUserBookmarkRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "user_ids", "userIds":
			s.AddField("user_ids")
			if s.ReadNil() {
				x.UserIds = nil
				return
			}
			// NOTE: UserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v UserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.UserIds = &v
		case "entity_ids", "entityIds":
			if s.ReadNil() {
				x.EntityIds = nil
				return
			}
			x.EntityIds = &EntityIdentifiers{}
			x.EntityIds.UnmarshalProtoJSON(s.WithField("entity_ids", true))
		}
	})
}

// UnmarshalJSON unmarshals the CreateUserBookmarkRequest from JSON.
func (x *CreateUserBookmarkRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DeleteUserBookmarkRequest message to JSON.
func (x *DeleteUserBookmarkRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UserIds != nil || s.HasField("user_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user_ids")
		// NOTE: UserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UserIds)
	}
	if x.EntityIds != nil || s.HasField("entity_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("entity_ids")
		x.EntityIds.MarshalProtoJSON(s.WithField("entity_ids"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DeleteUserBookmarkRequest to JSON.
func (x *DeleteUserBookmarkRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DeleteUserBookmarkRequest message from JSON.
func (x *DeleteUserBookmarkRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "user_ids", "userIds":
			s.AddField("user_ids")
			if s.ReadNil() {
				x.UserIds = nil
				return
			}
			// NOTE: UserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v UserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.UserIds = &v
		case "entity_ids", "entityIds":
			if s.ReadNil() {
				x.EntityIds = nil
				return
			}
			x.EntityIds = &EntityIdentifiers{}
			x.EntityIds.UnmarshalProtoJSON(s.WithField("entity_ids", true))
		}
	})
}

// UnmarshalJSON unmarshals the DeleteUserBookmarkRequest from JSON.
func (x *DeleteUserBookmarkRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BatchDeleteUserBookmarksRequest message to JSON.
func (x *BatchDeleteUserBookmarksRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UserIds != nil || s.HasField("user_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("user_ids")
		// NOTE: UserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UserIds)
	}
	if len(x.EntityIds) > 0 || s.HasField("entity_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("entity_ids")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.EntityIds {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("entity_ids"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BatchDeleteUserBookmarksRequest to JSON.
func (x *BatchDeleteUserBookmarksRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BatchDeleteUserBookmarksRequest message from JSON.
func (x *BatchDeleteUserBookmarksRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "user_ids", "userIds":
			s.AddField("user_ids")
			if s.ReadNil() {
				x.UserIds = nil
				return
			}
			// NOTE: UserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v UserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.UserIds = &v
		case "entity_ids", "entityIds":
			s.AddField("entity_ids")
			if s.ReadNil() {
				x.EntityIds = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.EntityIds = append(x.EntityIds, nil)
					return
				}
				v := &EntityIdentifiers{}
				v.UnmarshalProtoJSON(s.WithField("entity_ids", false))
				if s.Err() != nil {
					return
				}
				x.EntityIds = append(x.EntityIds, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the BatchDeleteUserBookmarksRequest from JSON.
func (x *BatchDeleteUserBookmarksRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
