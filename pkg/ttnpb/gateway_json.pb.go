// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v1.6.0
// - protoc             v4.23.4
// source: ttn/lorawan/v3/gateway.proto

package ttnpb

import (
	golang "github.com/TheThingsIndustries/protoc-gen-go-json/golang"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
	types "go.thethings.network/lorawan-stack/v3/pkg/types"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// MarshalProtoJSON marshals the ManagedGatewayNetworkInterfaceType to JSON.
func (x ManagedGatewayNetworkInterfaceType) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), ManagedGatewayNetworkInterfaceType_name)
}

// MarshalText marshals the ManagedGatewayNetworkInterfaceType to text.
func (x ManagedGatewayNetworkInterfaceType) MarshalText() ([]byte, error) {
	return []byte(jsonplugin.GetEnumString(int32(x), ManagedGatewayNetworkInterfaceType_name)), nil
}

// MarshalJSON marshals the ManagedGatewayNetworkInterfaceType to JSON.
func (x ManagedGatewayNetworkInterfaceType) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// ManagedGatewayNetworkInterfaceType_customvalue contains custom string values that extend ManagedGatewayNetworkInterfaceType_value.
var ManagedGatewayNetworkInterfaceType_customvalue = map[string]int32{
	"UNSPECIFIED": 0,
	"CELLULAR":    1,
	"WIFI":        2,
	"ETHERNET":    3,
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayNetworkInterfaceType from JSON.
func (x *ManagedGatewayNetworkInterfaceType) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(ManagedGatewayNetworkInterfaceType_value, ManagedGatewayNetworkInterfaceType_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read ManagedGatewayNetworkInterfaceType enum: %v", err)
		return
	}
	*x = ManagedGatewayNetworkInterfaceType(v)
}

// UnmarshalText unmarshals the ManagedGatewayNetworkInterfaceType from text.
func (x *ManagedGatewayNetworkInterfaceType) UnmarshalText(b []byte) error {
	i, err := jsonplugin.ParseEnumString(string(b), ManagedGatewayNetworkInterfaceType_customvalue, ManagedGatewayNetworkInterfaceType_value)
	if err != nil {
		return err
	}
	*x = ManagedGatewayNetworkInterfaceType(i)
	return nil
}

// UnmarshalJSON unmarshals the ManagedGatewayNetworkInterfaceType from JSON.
func (x *ManagedGatewayNetworkInterfaceType) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayNetworkInterfaceStatus to JSON.
func (x ManagedGatewayNetworkInterfaceStatus) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), ManagedGatewayNetworkInterfaceStatus_name)
}

// MarshalText marshals the ManagedGatewayNetworkInterfaceStatus to text.
func (x ManagedGatewayNetworkInterfaceStatus) MarshalText() ([]byte, error) {
	return []byte(jsonplugin.GetEnumString(int32(x), ManagedGatewayNetworkInterfaceStatus_name)), nil
}

// MarshalJSON marshals the ManagedGatewayNetworkInterfaceStatus to JSON.
func (x ManagedGatewayNetworkInterfaceStatus) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// ManagedGatewayNetworkInterfaceStatus_customvalue contains custom string values that extend ManagedGatewayNetworkInterfaceStatus_value.
var ManagedGatewayNetworkInterfaceStatus_customvalue = map[string]int32{
	"UNSPECIFIED": 0,
	"DOWN":        1,
	"UP":          2,
	"FAILED":      3,
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayNetworkInterfaceStatus from JSON.
func (x *ManagedGatewayNetworkInterfaceStatus) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(ManagedGatewayNetworkInterfaceStatus_value, ManagedGatewayNetworkInterfaceStatus_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read ManagedGatewayNetworkInterfaceStatus enum: %v", err)
		return
	}
	*x = ManagedGatewayNetworkInterfaceStatus(v)
}

// UnmarshalText unmarshals the ManagedGatewayNetworkInterfaceStatus from text.
func (x *ManagedGatewayNetworkInterfaceStatus) UnmarshalText(b []byte) error {
	i, err := jsonplugin.ParseEnumString(string(b), ManagedGatewayNetworkInterfaceStatus_customvalue, ManagedGatewayNetworkInterfaceStatus_value)
	if err != nil {
		return err
	}
	*x = ManagedGatewayNetworkInterfaceStatus(i)
	return nil
}

// UnmarshalJSON unmarshals the ManagedGatewayNetworkInterfaceStatus from JSON.
func (x *ManagedGatewayNetworkInterfaceStatus) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GatewayAntennaPlacement to JSON.
func (x GatewayAntennaPlacement) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	s.WriteEnumString(int32(x), GatewayAntennaPlacement_name)
}

// MarshalText marshals the GatewayAntennaPlacement to text.
func (x GatewayAntennaPlacement) MarshalText() ([]byte, error) {
	return []byte(jsonplugin.GetEnumString(int32(x), GatewayAntennaPlacement_name)), nil
}

// MarshalJSON marshals the GatewayAntennaPlacement to JSON.
func (x GatewayAntennaPlacement) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// GatewayAntennaPlacement_customvalue contains custom string values that extend GatewayAntennaPlacement_value.
var GatewayAntennaPlacement_customvalue = map[string]int32{
	"UNKNOWN": 0,
}

// UnmarshalProtoJSON unmarshals the GatewayAntennaPlacement from JSON.
func (x *GatewayAntennaPlacement) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	v := s.ReadEnum(GatewayAntennaPlacement_value, GatewayAntennaPlacement_customvalue)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read GatewayAntennaPlacement enum: %v", err)
		return
	}
	*x = GatewayAntennaPlacement(v)
}

// UnmarshalText unmarshals the GatewayAntennaPlacement from text.
func (x *GatewayAntennaPlacement) UnmarshalText(b []byte) error {
	i, err := jsonplugin.ParseEnumString(string(b), GatewayAntennaPlacement_customvalue, GatewayAntennaPlacement_value)
	if err != nil {
		return err
	}
	*x = GatewayAntennaPlacement(i)
	return nil
}

// UnmarshalJSON unmarshals the GatewayAntennaPlacement from JSON.
func (x *GatewayAntennaPlacement) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Gateway message to JSON.
func (x *Gateway) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Ids != nil || s.HasField("ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		x.Ids.MarshalProtoJSON(s.WithField("ids"))
	}
	if x.CreatedAt != nil || s.HasField("created_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("created_at")
		if x.CreatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.CreatedAt)
		}
	}
	if x.UpdatedAt != nil || s.HasField("updated_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("updated_at")
		if x.UpdatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.UpdatedAt)
		}
	}
	if x.DeletedAt != nil || s.HasField("deleted_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("deleted_at")
		if x.DeletedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.DeletedAt)
		}
	}
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if x.Description != "" || s.HasField("description") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("description")
		s.WriteString(x.Description)
	}
	if x.Attributes != nil || s.HasField("attributes") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("attributes")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Attributes {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if len(x.ContactInfo) > 0 || s.HasField("contact_info") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("contact_info")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ContactInfo {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("contact_info"))
		}
		s.WriteArrayEnd()
	}
	if x.AdministrativeContact != nil || s.HasField("administrative_contact") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("administrative_contact")
		// NOTE: OrganizationOrUserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.AdministrativeContact)
	}
	if x.TechnicalContact != nil || s.HasField("technical_contact") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("technical_contact")
		// NOTE: OrganizationOrUserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.TechnicalContact)
	}
	if x.VersionIds != nil || s.HasField("version_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("version_ids")
		// NOTE: GatewayVersionIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.VersionIds)
	}
	if x.GatewayServerAddress != "" || s.HasField("gateway_server_address") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_server_address")
		s.WriteString(x.GatewayServerAddress)
	}
	if x.AutoUpdate || s.HasField("auto_update") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("auto_update")
		s.WriteBool(x.AutoUpdate)
	}
	if x.UpdateChannel != "" || s.HasField("update_channel") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("update_channel")
		s.WriteString(x.UpdateChannel)
	}
	if x.FrequencyPlanId != "" || s.HasField("frequency_plan_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frequency_plan_id")
		s.WriteString(x.FrequencyPlanId)
	}
	if len(x.FrequencyPlanIds) > 0 || s.HasField("frequency_plan_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("frequency_plan_ids")
		s.WriteStringArray(x.FrequencyPlanIds)
	}
	if len(x.Antennas) > 0 || s.HasField("antennas") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("antennas")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Antennas {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("antennas"))
		}
		s.WriteArrayEnd()
	}
	if x.StatusPublic || s.HasField("status_public") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("status_public")
		s.WriteBool(x.StatusPublic)
	}
	if x.LocationPublic || s.HasField("location_public") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("location_public")
		s.WriteBool(x.LocationPublic)
	}
	if x.ScheduleDownlinkLate || s.HasField("schedule_downlink_late") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("schedule_downlink_late")
		s.WriteBool(x.ScheduleDownlinkLate)
	}
	if x.EnforceDutyCycle || s.HasField("enforce_duty_cycle") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("enforce_duty_cycle")
		s.WriteBool(x.EnforceDutyCycle)
	}
	if x.DownlinkPathConstraint != 0 || s.HasField("downlink_path_constraint") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_path_constraint")
		x.DownlinkPathConstraint.MarshalProtoJSON(s)
	}
	if x.ScheduleAnytimeDelay != nil || s.HasField("schedule_anytime_delay") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("schedule_anytime_delay")
		if x.ScheduleAnytimeDelay == nil {
			s.WriteNil()
		} else {
			golang.MarshalDuration(s, x.ScheduleAnytimeDelay)
		}
	}
	if x.UpdateLocationFromStatus || s.HasField("update_location_from_status") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("update_location_from_status")
		s.WriteBool(x.UpdateLocationFromStatus)
	}
	if x.LbsLnsSecret != nil || s.HasField("lbs_lns_secret") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lbs_lns_secret")
		// NOTE: Secret does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.LbsLnsSecret)
	}
	if x.ClaimAuthenticationCode != nil || s.HasField("claim_authentication_code") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("claim_authentication_code")
		// NOTE: GatewayClaimAuthenticationCode does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.ClaimAuthenticationCode)
	}
	if x.TargetCupsUri != "" || s.HasField("target_cups_uri") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target_cups_uri")
		s.WriteString(x.TargetCupsUri)
	}
	if x.TargetCupsKey != nil || s.HasField("target_cups_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target_cups_key")
		// NOTE: Secret does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.TargetCupsKey)
	}
	if x.RequireAuthenticatedConnection || s.HasField("require_authenticated_connection") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("require_authenticated_connection")
		s.WriteBool(x.RequireAuthenticatedConnection)
	}
	if x.Lrfhss != nil || s.HasField("lrfhss") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lrfhss")
		// NOTE: Gateway_LRFHSS does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Lrfhss)
	}
	if x.DisablePacketBrokerForwarding || s.HasField("disable_packet_broker_forwarding") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("disable_packet_broker_forwarding")
		s.WriteBool(x.DisablePacketBrokerForwarding)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Gateway to JSON.
func (x *Gateway) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Gateway message from JSON.
func (x *Gateway) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ids":
			if s.ReadNil() {
				x.Ids = nil
				return
			}
			x.Ids = &GatewayIdentifiers{}
			x.Ids.UnmarshalProtoJSON(s.WithField("ids", true))
		case "created_at", "createdAt":
			s.AddField("created_at")
			if s.ReadNil() {
				x.CreatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.CreatedAt = v
		case "updated_at", "updatedAt":
			s.AddField("updated_at")
			if s.ReadNil() {
				x.UpdatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.UpdatedAt = v
		case "deleted_at", "deletedAt":
			s.AddField("deleted_at")
			if s.ReadNil() {
				x.DeletedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.DeletedAt = v
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		case "description":
			s.AddField("description")
			x.Description = s.ReadString()
		case "attributes":
			s.AddField("attributes")
			if s.ReadNil() {
				x.Attributes = nil
				return
			}
			x.Attributes = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.Attributes[key] = s.ReadString()
			})
		case "contact_info", "contactInfo":
			s.AddField("contact_info")
			if s.ReadNil() {
				x.ContactInfo = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.ContactInfo = append(x.ContactInfo, nil)
					return
				}
				v := &ContactInfo{}
				v.UnmarshalProtoJSON(s.WithField("contact_info", false))
				if s.Err() != nil {
					return
				}
				x.ContactInfo = append(x.ContactInfo, v)
			})
		case "administrative_contact", "administrativeContact":
			s.AddField("administrative_contact")
			if s.ReadNil() {
				x.AdministrativeContact = nil
				return
			}
			// NOTE: OrganizationOrUserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v OrganizationOrUserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.AdministrativeContact = &v
		case "technical_contact", "technicalContact":
			s.AddField("technical_contact")
			if s.ReadNil() {
				x.TechnicalContact = nil
				return
			}
			// NOTE: OrganizationOrUserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v OrganizationOrUserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.TechnicalContact = &v
		case "version_ids", "versionIds":
			s.AddField("version_ids")
			if s.ReadNil() {
				x.VersionIds = nil
				return
			}
			// NOTE: GatewayVersionIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v GatewayVersionIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.VersionIds = &v
		case "gateway_server_address", "gatewayServerAddress":
			s.AddField("gateway_server_address")
			x.GatewayServerAddress = s.ReadString()
		case "auto_update", "autoUpdate":
			s.AddField("auto_update")
			x.AutoUpdate = s.ReadBool()
		case "update_channel", "updateChannel":
			s.AddField("update_channel")
			x.UpdateChannel = s.ReadString()
		case "frequency_plan_id", "frequencyPlanId":
			s.AddField("frequency_plan_id")
			x.FrequencyPlanId = s.ReadString()
		case "frequency_plan_ids", "frequencyPlanIds":
			s.AddField("frequency_plan_ids")
			if s.ReadNil() {
				x.FrequencyPlanIds = nil
				return
			}
			x.FrequencyPlanIds = s.ReadStringArray()
		case "antennas":
			s.AddField("antennas")
			if s.ReadNil() {
				x.Antennas = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Antennas = append(x.Antennas, nil)
					return
				}
				v := &GatewayAntenna{}
				v.UnmarshalProtoJSON(s.WithField("antennas", false))
				if s.Err() != nil {
					return
				}
				x.Antennas = append(x.Antennas, v)
			})
		case "status_public", "statusPublic":
			s.AddField("status_public")
			x.StatusPublic = s.ReadBool()
		case "location_public", "locationPublic":
			s.AddField("location_public")
			x.LocationPublic = s.ReadBool()
		case "schedule_downlink_late", "scheduleDownlinkLate":
			s.AddField("schedule_downlink_late")
			x.ScheduleDownlinkLate = s.ReadBool()
		case "enforce_duty_cycle", "enforceDutyCycle":
			s.AddField("enforce_duty_cycle")
			x.EnforceDutyCycle = s.ReadBool()
		case "downlink_path_constraint", "downlinkPathConstraint":
			s.AddField("downlink_path_constraint")
			x.DownlinkPathConstraint.UnmarshalProtoJSON(s)
		case "schedule_anytime_delay", "scheduleAnytimeDelay":
			s.AddField("schedule_anytime_delay")
			if s.ReadNil() {
				x.ScheduleAnytimeDelay = nil
				return
			}
			v := golang.UnmarshalDuration(s)
			if s.Err() != nil {
				return
			}
			x.ScheduleAnytimeDelay = v
		case "update_location_from_status", "updateLocationFromStatus":
			s.AddField("update_location_from_status")
			x.UpdateLocationFromStatus = s.ReadBool()
		case "lbs_lns_secret", "lbsLnsSecret":
			s.AddField("lbs_lns_secret")
			if s.ReadNil() {
				x.LbsLnsSecret = nil
				return
			}
			// NOTE: Secret does not seem to implement UnmarshalProtoJSON.
			var v Secret
			golang.UnmarshalMessage(s, &v)
			x.LbsLnsSecret = &v
		case "claim_authentication_code", "claimAuthenticationCode":
			s.AddField("claim_authentication_code")
			if s.ReadNil() {
				x.ClaimAuthenticationCode = nil
				return
			}
			// NOTE: GatewayClaimAuthenticationCode does not seem to implement UnmarshalProtoJSON.
			var v GatewayClaimAuthenticationCode
			golang.UnmarshalMessage(s, &v)
			x.ClaimAuthenticationCode = &v
		case "target_cups_uri", "targetCupsUri":
			s.AddField("target_cups_uri")
			x.TargetCupsUri = s.ReadString()
		case "target_cups_key", "targetCupsKey":
			s.AddField("target_cups_key")
			if s.ReadNil() {
				x.TargetCupsKey = nil
				return
			}
			// NOTE: Secret does not seem to implement UnmarshalProtoJSON.
			var v Secret
			golang.UnmarshalMessage(s, &v)
			x.TargetCupsKey = &v
		case "require_authenticated_connection", "requireAuthenticatedConnection":
			s.AddField("require_authenticated_connection")
			x.RequireAuthenticatedConnection = s.ReadBool()
		case "lrfhss":
			s.AddField("lrfhss")
			if s.ReadNil() {
				x.Lrfhss = nil
				return
			}
			// NOTE: Gateway_LRFHSS does not seem to implement UnmarshalProtoJSON.
			var v Gateway_LRFHSS
			golang.UnmarshalMessage(s, &v)
			x.Lrfhss = &v
		case "disable_packet_broker_forwarding", "disablePacketBrokerForwarding":
			s.AddField("disable_packet_broker_forwarding")
			x.DisablePacketBrokerForwarding = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the Gateway from JSON.
func (x *Gateway) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Gateways message to JSON.
func (x *Gateways) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Gateways) > 0 || s.HasField("gateways") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateways")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Gateways {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("gateways"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Gateways to JSON.
func (x *Gateways) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Gateways message from JSON.
func (x *Gateways) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateways":
			s.AddField("gateways")
			if s.ReadNil() {
				x.Gateways = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Gateways = append(x.Gateways, nil)
					return
				}
				v := &Gateway{}
				v.UnmarshalProtoJSON(s.WithField("gateways", false))
				if s.Err() != nil {
					return
				}
				x.Gateways = append(x.Gateways, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the Gateways from JSON.
func (x *Gateways) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGateway message to JSON.
func (x *ManagedGateway) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Ids != nil || s.HasField("ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		x.Ids.MarshalProtoJSON(s.WithField("ids"))
	}
	if x.VersionIds != nil || s.HasField("version_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("version_ids")
		// NOTE: GatewayVersionIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.VersionIds)
	}
	if x.CellularImei != "" || s.HasField("cellular_imei") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("cellular_imei")
		s.WriteString(x.CellularImei)
	}
	if x.CellularImsi != "" || s.HasField("cellular_imsi") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("cellular_imsi")
		s.WriteString(x.CellularImsi)
	}
	if len(x.WifiMacAddress) > 0 || s.HasField("wifi_mac_address") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("wifi_mac_address")
		types.MarshalHEXBytes(s.WithField("wifi_mac_address"), x.WifiMacAddress)
	}
	if len(x.EthernetMacAddress) > 0 || s.HasField("ethernet_mac_address") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ethernet_mac_address")
		types.MarshalHEXBytes(s.WithField("ethernet_mac_address"), x.EthernetMacAddress)
	}
	if x.WifiProfileId != "" || s.HasField("wifi_profile_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("wifi_profile_id")
		s.WriteString(x.WifiProfileId)
	}
	if x.EthernetProfileId != "" || s.HasField("ethernet_profile_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ethernet_profile_id")
		s.WriteString(x.EthernetProfileId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGateway to JSON.
func (x *ManagedGateway) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGateway message from JSON.
func (x *ManagedGateway) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ids":
			if s.ReadNil() {
				x.Ids = nil
				return
			}
			x.Ids = &GatewayIdentifiers{}
			x.Ids.UnmarshalProtoJSON(s.WithField("ids", true))
		case "version_ids", "versionIds":
			s.AddField("version_ids")
			if s.ReadNil() {
				x.VersionIds = nil
				return
			}
			// NOTE: GatewayVersionIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v GatewayVersionIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.VersionIds = &v
		case "cellular_imei", "cellularImei":
			s.AddField("cellular_imei")
			x.CellularImei = s.ReadString()
		case "cellular_imsi", "cellularImsi":
			s.AddField("cellular_imsi")
			x.CellularImsi = s.ReadString()
		case "wifi_mac_address", "wifiMacAddress":
			s.AddField("wifi_mac_address")
			x.WifiMacAddress = types.Unmarshal6Bytes(s.WithField("wifi_mac_address", false))
		case "ethernet_mac_address", "ethernetMacAddress":
			s.AddField("ethernet_mac_address")
			x.EthernetMacAddress = types.Unmarshal6Bytes(s.WithField("ethernet_mac_address", false))
		case "wifi_profile_id", "wifiProfileId":
			s.AddField("wifi_profile_id")
			x.WifiProfileId = s.ReadString()
		case "ethernet_profile_id", "ethernetProfileId":
			s.AddField("ethernet_profile_id")
			x.EthernetProfileId = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGateway from JSON.
func (x *ManagedGateway) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayWiFiAccessPoint message to JSON.
func (x *ManagedGatewayWiFiAccessPoint) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Ssid != "" || s.HasField("ssid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ssid")
		s.WriteString(x.Ssid)
	}
	if len(x.Bssid) > 0 || s.HasField("bssid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("bssid")
		types.MarshalHEXBytes(s.WithField("bssid"), x.Bssid)
	}
	if x.Channel != 0 || s.HasField("channel") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channel")
		s.WriteUint32(x.Channel)
	}
	if x.AuthenticationMode != "" || s.HasField("authentication_mode") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("authentication_mode")
		s.WriteString(x.AuthenticationMode)
	}
	if x.Rssi != 0 || s.HasField("rssi") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rssi")
		s.WriteFloat32(x.Rssi)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGatewayWiFiAccessPoint to JSON.
func (x *ManagedGatewayWiFiAccessPoint) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayWiFiAccessPoint message from JSON.
func (x *ManagedGatewayWiFiAccessPoint) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ssid":
			s.AddField("ssid")
			x.Ssid = s.ReadString()
		case "bssid":
			s.AddField("bssid")
			x.Bssid = types.Unmarshal6Bytes(s.WithField("bssid", false))
		case "channel":
			s.AddField("channel")
			x.Channel = s.ReadUint32()
		case "authentication_mode", "authenticationMode":
			s.AddField("authentication_mode")
			x.AuthenticationMode = s.ReadString()
		case "rssi":
			s.AddField("rssi")
			x.Rssi = s.ReadFloat32()
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGatewayWiFiAccessPoint from JSON.
func (x *ManagedGatewayWiFiAccessPoint) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayWiFiAccessPoints message to JSON.
func (x *ManagedGatewayWiFiAccessPoints) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.AccessPoints) > 0 || s.HasField("access_points") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("access_points")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.AccessPoints {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("access_points"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGatewayWiFiAccessPoints to JSON.
func (x *ManagedGatewayWiFiAccessPoints) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayWiFiAccessPoints message from JSON.
func (x *ManagedGatewayWiFiAccessPoints) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "access_points", "accessPoints":
			s.AddField("access_points")
			if s.ReadNil() {
				x.AccessPoints = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.AccessPoints = append(x.AccessPoints, nil)
					return
				}
				v := &ManagedGatewayWiFiAccessPoint{}
				v.UnmarshalProtoJSON(s.WithField("access_points", false))
				if s.Err() != nil {
					return
				}
				x.AccessPoints = append(x.AccessPoints, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGatewayWiFiAccessPoints from JSON.
func (x *ManagedGatewayWiFiAccessPoints) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayControllerConnection message to JSON.
func (x *ManagedGatewayControllerConnection) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.NetworkInterfaceType != 0 || s.HasField("network_interface_type") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("network_interface_type")
		x.NetworkInterfaceType.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGatewayControllerConnection to JSON.
func (x *ManagedGatewayControllerConnection) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayControllerConnection message from JSON.
func (x *ManagedGatewayControllerConnection) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "network_interface_type", "networkInterfaceType":
			s.AddField("network_interface_type")
			x.NetworkInterfaceType.UnmarshalProtoJSON(s)
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGatewayControllerConnection from JSON.
func (x *ManagedGatewayControllerConnection) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayGatewayServerConnection message to JSON.
func (x *ManagedGatewayGatewayServerConnection) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.NetworkInterfaceType != 0 || s.HasField("network_interface_type") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("network_interface_type")
		x.NetworkInterfaceType.MarshalProtoJSON(s)
	}
	if x.Address != "" || s.HasField("address") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("address")
		s.WriteString(x.Address)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGatewayGatewayServerConnection to JSON.
func (x *ManagedGatewayGatewayServerConnection) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayGatewayServerConnection message from JSON.
func (x *ManagedGatewayGatewayServerConnection) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "network_interface_type", "networkInterfaceType":
			s.AddField("network_interface_type")
			x.NetworkInterfaceType.UnmarshalProtoJSON(s)
		case "address":
			s.AddField("address")
			x.Address = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGatewayGatewayServerConnection from JSON.
func (x *ManagedGatewayGatewayServerConnection) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayNetworkInterfaceInfo message to JSON.
func (x *ManagedGatewayNetworkInterfaceInfo) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Status != 0 || s.HasField("status") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("status")
		x.Status.MarshalProtoJSON(s)
	}
	if x.DhcpEnabled || s.HasField("dhcp_enabled") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dhcp_enabled")
		s.WriteBool(x.DhcpEnabled)
	}
	if x.Addresses != nil || s.HasField("addresses") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("addresses")
		// NOTE: ManagedGatewayNetworkInterfaceAddresses does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Addresses)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGatewayNetworkInterfaceInfo to JSON.
func (x *ManagedGatewayNetworkInterfaceInfo) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayNetworkInterfaceInfo message from JSON.
func (x *ManagedGatewayNetworkInterfaceInfo) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "status":
			s.AddField("status")
			x.Status.UnmarshalProtoJSON(s)
		case "dhcp_enabled", "dhcpEnabled":
			s.AddField("dhcp_enabled")
			x.DhcpEnabled = s.ReadBool()
		case "addresses":
			s.AddField("addresses")
			if s.ReadNil() {
				x.Addresses = nil
				return
			}
			// NOTE: ManagedGatewayNetworkInterfaceAddresses does not seem to implement UnmarshalProtoJSON.
			var v ManagedGatewayNetworkInterfaceAddresses
			golang.UnmarshalMessage(s, &v)
			x.Addresses = &v
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGatewayNetworkInterfaceInfo from JSON.
func (x *ManagedGatewayNetworkInterfaceInfo) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayCellularBackhaul message to JSON.
func (x *ManagedGatewayCellularBackhaul) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.NetworkInterface != nil || s.HasField("network_interface") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("network_interface")
		x.NetworkInterface.MarshalProtoJSON(s.WithField("network_interface"))
	}
	if x.Operator != "" || s.HasField("operator") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("operator")
		s.WriteString(x.Operator)
	}
	if x.Rssi != nil || s.HasField("rssi") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rssi")
		if x.Rssi == nil {
			s.WriteNil()
		} else {
			s.WriteFloat32(x.Rssi.Value)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGatewayCellularBackhaul to JSON.
func (x *ManagedGatewayCellularBackhaul) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayCellularBackhaul message from JSON.
func (x *ManagedGatewayCellularBackhaul) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "network_interface", "networkInterface":
			if s.ReadNil() {
				x.NetworkInterface = nil
				return
			}
			x.NetworkInterface = &ManagedGatewayNetworkInterfaceInfo{}
			x.NetworkInterface.UnmarshalProtoJSON(s.WithField("network_interface", true))
		case "operator":
			s.AddField("operator")
			x.Operator = s.ReadString()
		case "rssi":
			s.AddField("rssi")
			if s.ReadNil() {
				x.Rssi = nil
				return
			}
			v := s.ReadWrappedFloat32()
			if s.Err() != nil {
				return
			}
			x.Rssi = &wrapperspb.FloatValue{Value: v}
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGatewayCellularBackhaul from JSON.
func (x *ManagedGatewayCellularBackhaul) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayWiFiBackhaul message to JSON.
func (x *ManagedGatewayWiFiBackhaul) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.NetworkInterface != nil || s.HasField("network_interface") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("network_interface")
		x.NetworkInterface.MarshalProtoJSON(s.WithField("network_interface"))
	}
	if x.Ssid != "" || s.HasField("ssid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ssid")
		s.WriteString(x.Ssid)
	}
	if len(x.Bssid) > 0 || s.HasField("bssid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("bssid")
		types.MarshalHEXBytes(s.WithField("bssid"), x.Bssid)
	}
	if x.Channel != 0 || s.HasField("channel") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("channel")
		s.WriteUint32(x.Channel)
	}
	if x.AuthenticationMode != "" || s.HasField("authentication_mode") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("authentication_mode")
		s.WriteString(x.AuthenticationMode)
	}
	if x.Rssi != nil || s.HasField("rssi") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rssi")
		if x.Rssi == nil {
			s.WriteNil()
		} else {
			s.WriteFloat32(x.Rssi.Value)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGatewayWiFiBackhaul to JSON.
func (x *ManagedGatewayWiFiBackhaul) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayWiFiBackhaul message from JSON.
func (x *ManagedGatewayWiFiBackhaul) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "network_interface", "networkInterface":
			if s.ReadNil() {
				x.NetworkInterface = nil
				return
			}
			x.NetworkInterface = &ManagedGatewayNetworkInterfaceInfo{}
			x.NetworkInterface.UnmarshalProtoJSON(s.WithField("network_interface", true))
		case "ssid":
			s.AddField("ssid")
			x.Ssid = s.ReadString()
		case "bssid":
			s.AddField("bssid")
			x.Bssid = types.Unmarshal6Bytes(s.WithField("bssid", false))
		case "channel":
			s.AddField("channel")
			x.Channel = s.ReadUint32()
		case "authentication_mode", "authenticationMode":
			s.AddField("authentication_mode")
			x.AuthenticationMode = s.ReadString()
		case "rssi":
			s.AddField("rssi")
			if s.ReadNil() {
				x.Rssi = nil
				return
			}
			v := s.ReadWrappedFloat32()
			if s.Err() != nil {
				return
			}
			x.Rssi = &wrapperspb.FloatValue{Value: v}
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGatewayWiFiBackhaul from JSON.
func (x *ManagedGatewayWiFiBackhaul) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayEthernetBackhaul message to JSON.
func (x *ManagedGatewayEthernetBackhaul) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.NetworkInterface != nil || s.HasField("network_interface") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("network_interface")
		x.NetworkInterface.MarshalProtoJSON(s.WithField("network_interface"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGatewayEthernetBackhaul to JSON.
func (x *ManagedGatewayEthernetBackhaul) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayEthernetBackhaul message from JSON.
func (x *ManagedGatewayEthernetBackhaul) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "network_interface", "networkInterface":
			if s.ReadNil() {
				x.NetworkInterface = nil
				return
			}
			x.NetworkInterface = &ManagedGatewayNetworkInterfaceInfo{}
			x.NetworkInterface.UnmarshalProtoJSON(s.WithField("network_interface", true))
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGatewayEthernetBackhaul from JSON.
func (x *ManagedGatewayEthernetBackhaul) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ManagedGatewayEventData message to JSON.
func (x *ManagedGatewayEventData) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Data != nil {
		switch ov := x.Data.(type) {
		case *ManagedGatewayEventData_Entity:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("entity")
			ov.Entity.MarshalProtoJSON(s.WithField("entity"))
		case *ManagedGatewayEventData_Location:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("location")
			ov.Location.MarshalProtoJSON(s.WithField("location"))
		case *ManagedGatewayEventData_SystemStatus:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("system_status")
			// NOTE: ManagedGatewaySystemStatus does not seem to implement MarshalProtoJSON.
			golang.MarshalMessage(s, ov.SystemStatus)
		case *ManagedGatewayEventData_ControllerConnection:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("controller_connection")
			ov.ControllerConnection.MarshalProtoJSON(s.WithField("controller_connection"))
		case *ManagedGatewayEventData_GatewayServerConnection:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("gateway_server_connection")
			ov.GatewayServerConnection.MarshalProtoJSON(s.WithField("gateway_server_connection"))
		case *ManagedGatewayEventData_CellularBackhaul:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("cellular_backhaul")
			ov.CellularBackhaul.MarshalProtoJSON(s.WithField("cellular_backhaul"))
		case *ManagedGatewayEventData_WifiBackhaul:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("wifi_backhaul")
			ov.WifiBackhaul.MarshalProtoJSON(s.WithField("wifi_backhaul"))
		case *ManagedGatewayEventData_EthernetBackhaul:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("ethernet_backhaul")
			ov.EthernetBackhaul.MarshalProtoJSON(s.WithField("ethernet_backhaul"))
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ManagedGatewayEventData to JSON.
func (x *ManagedGatewayEventData) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ManagedGatewayEventData message from JSON.
func (x *ManagedGatewayEventData) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "entity":
			ov := &ManagedGatewayEventData_Entity{}
			x.Data = ov
			if s.ReadNil() {
				ov.Entity = nil
				return
			}
			ov.Entity = &ManagedGateway{}
			ov.Entity.UnmarshalProtoJSON(s.WithField("entity", true))
		case "location":
			ov := &ManagedGatewayEventData_Location{}
			x.Data = ov
			if s.ReadNil() {
				ov.Location = nil
				return
			}
			ov.Location = &Location{}
			ov.Location.UnmarshalProtoJSON(s.WithField("location", true))
		case "system_status", "systemStatus":
			s.AddField("system_status")
			ov := &ManagedGatewayEventData_SystemStatus{}
			x.Data = ov
			if s.ReadNil() {
				ov.SystemStatus = nil
				return
			}
			// NOTE: ManagedGatewaySystemStatus does not seem to implement UnmarshalProtoJSON.
			var v ManagedGatewaySystemStatus
			golang.UnmarshalMessage(s, &v)
			ov.SystemStatus = &v
		case "controller_connection", "controllerConnection":
			ov := &ManagedGatewayEventData_ControllerConnection{}
			x.Data = ov
			if s.ReadNil() {
				ov.ControllerConnection = nil
				return
			}
			ov.ControllerConnection = &ManagedGatewayControllerConnection{}
			ov.ControllerConnection.UnmarshalProtoJSON(s.WithField("controller_connection", true))
		case "gateway_server_connection", "gatewayServerConnection":
			ov := &ManagedGatewayEventData_GatewayServerConnection{}
			x.Data = ov
			if s.ReadNil() {
				ov.GatewayServerConnection = nil
				return
			}
			ov.GatewayServerConnection = &ManagedGatewayGatewayServerConnection{}
			ov.GatewayServerConnection.UnmarshalProtoJSON(s.WithField("gateway_server_connection", true))
		case "cellular_backhaul", "cellularBackhaul":
			ov := &ManagedGatewayEventData_CellularBackhaul{}
			x.Data = ov
			if s.ReadNil() {
				ov.CellularBackhaul = nil
				return
			}
			ov.CellularBackhaul = &ManagedGatewayCellularBackhaul{}
			ov.CellularBackhaul.UnmarshalProtoJSON(s.WithField("cellular_backhaul", true))
		case "wifi_backhaul", "wifiBackhaul":
			ov := &ManagedGatewayEventData_WifiBackhaul{}
			x.Data = ov
			if s.ReadNil() {
				ov.WifiBackhaul = nil
				return
			}
			ov.WifiBackhaul = &ManagedGatewayWiFiBackhaul{}
			ov.WifiBackhaul.UnmarshalProtoJSON(s.WithField("wifi_backhaul", true))
		case "ethernet_backhaul", "ethernetBackhaul":
			ov := &ManagedGatewayEventData_EthernetBackhaul{}
			x.Data = ov
			if s.ReadNil() {
				ov.EthernetBackhaul = nil
				return
			}
			ov.EthernetBackhaul = &ManagedGatewayEthernetBackhaul{}
			ov.EthernetBackhaul.UnmarshalProtoJSON(s.WithField("ethernet_backhaul", true))
		}
	})
}

// UnmarshalJSON unmarshals the ManagedGatewayEventData from JSON.
func (x *ManagedGatewayEventData) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetGatewayRequest message to JSON.
func (x *GetGatewayRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetGatewayRequest to JSON.
func (x *GetGatewayRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetGatewayRequest message from JSON.
func (x *GetGatewayRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the GetGatewayRequest from JSON.
func (x *GetGatewayRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetGatewayIdentifiersForEUIRequest message to JSON.
func (x *GetGatewayIdentifiersForEUIRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Eui) > 0 || s.HasField("eui") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("eui")
		types.MarshalHEXBytes(s.WithField("eui"), x.Eui)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetGatewayIdentifiersForEUIRequest to JSON.
func (x *GetGatewayIdentifiersForEUIRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetGatewayIdentifiersForEUIRequest message from JSON.
func (x *GetGatewayIdentifiersForEUIRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "eui":
			s.AddField("eui")
			x.Eui = types.Unmarshal8Bytes(s.WithField("eui", false))
		}
	})
}

// UnmarshalJSON unmarshals the GetGatewayIdentifiersForEUIRequest from JSON.
func (x *GetGatewayIdentifiersForEUIRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListGatewaysRequest message to JSON.
func (x *ListGatewaysRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Collaborator != nil || s.HasField("collaborator") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("collaborator")
		// NOTE: OrganizationOrUserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Collaborator)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	if x.Order != "" || s.HasField("order") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("order")
		s.WriteString(x.Order)
	}
	if x.Limit != 0 || s.HasField("limit") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("limit")
		s.WriteUint32(x.Limit)
	}
	if x.Page != 0 || s.HasField("page") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("page")
		s.WriteUint32(x.Page)
	}
	if x.Deleted || s.HasField("deleted") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("deleted")
		s.WriteBool(x.Deleted)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListGatewaysRequest to JSON.
func (x *ListGatewaysRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListGatewaysRequest message from JSON.
func (x *ListGatewaysRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "collaborator":
			s.AddField("collaborator")
			if s.ReadNil() {
				x.Collaborator = nil
				return
			}
			// NOTE: OrganizationOrUserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v OrganizationOrUserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.Collaborator = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "order":
			s.AddField("order")
			x.Order = s.ReadString()
		case "limit":
			s.AddField("limit")
			x.Limit = s.ReadUint32()
		case "page":
			s.AddField("page")
			x.Page = s.ReadUint32()
		case "deleted":
			s.AddField("deleted")
			x.Deleted = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the ListGatewaysRequest from JSON.
func (x *ListGatewaysRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateGatewayRequest message to JSON.
func (x *CreateGatewayRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Gateway != nil || s.HasField("gateway") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway")
		x.Gateway.MarshalProtoJSON(s.WithField("gateway"))
	}
	if x.Collaborator != nil || s.HasField("collaborator") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("collaborator")
		// NOTE: OrganizationOrUserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Collaborator)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateGatewayRequest to JSON.
func (x *CreateGatewayRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateGatewayRequest message from JSON.
func (x *CreateGatewayRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway":
			if s.ReadNil() {
				x.Gateway = nil
				return
			}
			x.Gateway = &Gateway{}
			x.Gateway.UnmarshalProtoJSON(s.WithField("gateway", true))
		case "collaborator":
			s.AddField("collaborator")
			if s.ReadNil() {
				x.Collaborator = nil
				return
			}
			// NOTE: OrganizationOrUserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v OrganizationOrUserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.Collaborator = &v
		}
	})
}

// UnmarshalJSON unmarshals the CreateGatewayRequest from JSON.
func (x *CreateGatewayRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateGatewayRequest message to JSON.
func (x *UpdateGatewayRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Gateway != nil || s.HasField("gateway") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway")
		x.Gateway.MarshalProtoJSON(s.WithField("gateway"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateGatewayRequest to JSON.
func (x *UpdateGatewayRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateGatewayRequest message from JSON.
func (x *UpdateGatewayRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway":
			if s.ReadNil() {
				x.Gateway = nil
				return
			}
			x.Gateway = &Gateway{}
			x.Gateway.UnmarshalProtoJSON(s.WithField("gateway", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the UpdateGatewayRequest from JSON.
func (x *UpdateGatewayRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListGatewayAPIKeysRequest message to JSON.
func (x *ListGatewayAPIKeysRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.Order != "" || s.HasField("order") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("order")
		s.WriteString(x.Order)
	}
	if x.Limit != 0 || s.HasField("limit") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("limit")
		s.WriteUint32(x.Limit)
	}
	if x.Page != 0 || s.HasField("page") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("page")
		s.WriteUint32(x.Page)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListGatewayAPIKeysRequest to JSON.
func (x *ListGatewayAPIKeysRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListGatewayAPIKeysRequest message from JSON.
func (x *ListGatewayAPIKeysRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "order":
			s.AddField("order")
			x.Order = s.ReadString()
		case "limit":
			s.AddField("limit")
			x.Limit = s.ReadUint32()
		case "page":
			s.AddField("page")
			x.Page = s.ReadUint32()
		}
	})
}

// UnmarshalJSON unmarshals the ListGatewayAPIKeysRequest from JSON.
func (x *ListGatewayAPIKeysRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetGatewayAPIKeyRequest message to JSON.
func (x *GetGatewayAPIKeyRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.KeyId != "" || s.HasField("key_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("key_id")
		s.WriteString(x.KeyId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetGatewayAPIKeyRequest to JSON.
func (x *GetGatewayAPIKeyRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetGatewayAPIKeyRequest message from JSON.
func (x *GetGatewayAPIKeyRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "key_id", "keyId":
			s.AddField("key_id")
			x.KeyId = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the GetGatewayAPIKeyRequest from JSON.
func (x *GetGatewayAPIKeyRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateGatewayAPIKeyRequest message to JSON.
func (x *CreateGatewayAPIKeyRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if len(x.Rights) > 0 || s.HasField("rights") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rights")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Rights {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s)
		}
		s.WriteArrayEnd()
	}
	if x.ExpiresAt != nil || s.HasField("expires_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("expires_at")
		if x.ExpiresAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.ExpiresAt)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateGatewayAPIKeyRequest to JSON.
func (x *CreateGatewayAPIKeyRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateGatewayAPIKeyRequest message from JSON.
func (x *CreateGatewayAPIKeyRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		case "rights":
			s.AddField("rights")
			if s.ReadNil() {
				x.Rights = nil
				return
			}
			s.ReadArray(func() {
				var v Right
				v.UnmarshalProtoJSON(s)
				x.Rights = append(x.Rights, v)
			})
		case "expires_at", "expiresAt":
			s.AddField("expires_at")
			if s.ReadNil() {
				x.ExpiresAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.ExpiresAt = v
		}
	})
}

// UnmarshalJSON unmarshals the CreateGatewayAPIKeyRequest from JSON.
func (x *CreateGatewayAPIKeyRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateGatewayAPIKeyRequest message to JSON.
func (x *UpdateGatewayAPIKeyRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.ApiKey != nil || s.HasField("api_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("api_key")
		x.ApiKey.MarshalProtoJSON(s.WithField("api_key"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateGatewayAPIKeyRequest to JSON.
func (x *UpdateGatewayAPIKeyRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateGatewayAPIKeyRequest message from JSON.
func (x *UpdateGatewayAPIKeyRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "api_key", "apiKey":
			if s.ReadNil() {
				x.ApiKey = nil
				return
			}
			x.ApiKey = &APIKey{}
			x.ApiKey.UnmarshalProtoJSON(s.WithField("api_key", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the UpdateGatewayAPIKeyRequest from JSON.
func (x *UpdateGatewayAPIKeyRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DeleteGatewayAPIKeyRequest message to JSON.
func (x *DeleteGatewayAPIKeyRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.KeyId != "" || s.HasField("key_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("key_id")
		s.WriteString(x.KeyId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DeleteGatewayAPIKeyRequest to JSON.
func (x *DeleteGatewayAPIKeyRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DeleteGatewayAPIKeyRequest message from JSON.
func (x *DeleteGatewayAPIKeyRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "key_id", "keyId":
			s.AddField("key_id")
			x.KeyId = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the DeleteGatewayAPIKeyRequest from JSON.
func (x *DeleteGatewayAPIKeyRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListGatewayCollaboratorsRequest message to JSON.
func (x *ListGatewayCollaboratorsRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.Limit != 0 || s.HasField("limit") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("limit")
		s.WriteUint32(x.Limit)
	}
	if x.Page != 0 || s.HasField("page") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("page")
		s.WriteUint32(x.Page)
	}
	if x.Order != "" || s.HasField("order") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("order")
		s.WriteString(x.Order)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListGatewayCollaboratorsRequest to JSON.
func (x *ListGatewayCollaboratorsRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListGatewayCollaboratorsRequest message from JSON.
func (x *ListGatewayCollaboratorsRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "limit":
			s.AddField("limit")
			x.Limit = s.ReadUint32()
		case "page":
			s.AddField("page")
			x.Page = s.ReadUint32()
		case "order":
			s.AddField("order")
			x.Order = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ListGatewayCollaboratorsRequest from JSON.
func (x *ListGatewayCollaboratorsRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetGatewayCollaboratorRequest message to JSON.
func (x *GetGatewayCollaboratorRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.Collaborator != nil || s.HasField("collaborator") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("collaborator")
		// NOTE: OrganizationOrUserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Collaborator)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetGatewayCollaboratorRequest to JSON.
func (x *GetGatewayCollaboratorRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetGatewayCollaboratorRequest message from JSON.
func (x *GetGatewayCollaboratorRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "collaborator":
			s.AddField("collaborator")
			if s.ReadNil() {
				x.Collaborator = nil
				return
			}
			// NOTE: OrganizationOrUserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v OrganizationOrUserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.Collaborator = &v
		}
	})
}

// UnmarshalJSON unmarshals the GetGatewayCollaboratorRequest from JSON.
func (x *GetGatewayCollaboratorRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SetGatewayCollaboratorRequest message to JSON.
func (x *SetGatewayCollaboratorRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.Collaborator != nil || s.HasField("collaborator") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("collaborator")
		x.Collaborator.MarshalProtoJSON(s.WithField("collaborator"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SetGatewayCollaboratorRequest to JSON.
func (x *SetGatewayCollaboratorRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SetGatewayCollaboratorRequest message from JSON.
func (x *SetGatewayCollaboratorRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "collaborator":
			if s.ReadNil() {
				x.Collaborator = nil
				return
			}
			x.Collaborator = &Collaborator{}
			x.Collaborator.UnmarshalProtoJSON(s.WithField("collaborator", true))
		}
	})
}

// UnmarshalJSON unmarshals the SetGatewayCollaboratorRequest from JSON.
func (x *SetGatewayCollaboratorRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DeleteGatewayCollaboratorRequest message to JSON.
func (x *DeleteGatewayCollaboratorRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.GatewayIds != nil || s.HasField("gateway_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_ids")
		x.GatewayIds.MarshalProtoJSON(s.WithField("gateway_ids"))
	}
	if x.CollaboratorIds != nil || s.HasField("collaborator_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("collaborator_ids")
		// NOTE: OrganizationOrUserIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.CollaboratorIds)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DeleteGatewayCollaboratorRequest to JSON.
func (x *DeleteGatewayCollaboratorRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DeleteGatewayCollaboratorRequest message from JSON.
func (x *DeleteGatewayCollaboratorRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gateway_ids", "gatewayIds":
			if s.ReadNil() {
				x.GatewayIds = nil
				return
			}
			x.GatewayIds = &GatewayIdentifiers{}
			x.GatewayIds.UnmarshalProtoJSON(s.WithField("gateway_ids", true))
		case "collaborator_ids", "collaboratorIds":
			s.AddField("collaborator_ids")
			if s.ReadNil() {
				x.CollaboratorIds = nil
				return
			}
			// NOTE: OrganizationOrUserIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v OrganizationOrUserIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.CollaboratorIds = &v
		}
	})
}

// UnmarshalJSON unmarshals the DeleteGatewayCollaboratorRequest from JSON.
func (x *DeleteGatewayCollaboratorRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GatewayAntenna message to JSON.
func (x *GatewayAntenna) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Gain != 0 || s.HasField("gain") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gain")
		s.WriteFloat32(x.Gain)
	}
	if x.Location != nil || s.HasField("location") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("location")
		x.Location.MarshalProtoJSON(s.WithField("location"))
	}
	if x.Attributes != nil || s.HasField("attributes") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("attributes")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Attributes {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if x.Placement != 0 || s.HasField("placement") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("placement")
		x.Placement.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GatewayAntenna to JSON.
func (x *GatewayAntenna) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GatewayAntenna message from JSON.
func (x *GatewayAntenna) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "gain":
			s.AddField("gain")
			x.Gain = s.ReadFloat32()
		case "location":
			if s.ReadNil() {
				x.Location = nil
				return
			}
			x.Location = &Location{}
			x.Location.UnmarshalProtoJSON(s.WithField("location", true))
		case "attributes":
			s.AddField("attributes")
			if s.ReadNil() {
				x.Attributes = nil
				return
			}
			x.Attributes = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.Attributes[key] = s.ReadString()
			})
		case "placement":
			s.AddField("placement")
			x.Placement.UnmarshalProtoJSON(s)
		}
	})
}

// UnmarshalJSON unmarshals the GatewayAntenna from JSON.
func (x *GatewayAntenna) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GatewayStatus message to JSON.
func (x *GatewayStatus) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Time != nil || s.HasField("time") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("time")
		if x.Time == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.Time)
		}
	}
	if x.BootTime != nil || s.HasField("boot_time") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("boot_time")
		if x.BootTime == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.BootTime)
		}
	}
	if x.Versions != nil || s.HasField("versions") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("versions")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Versions {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if len(x.AntennaLocations) > 0 || s.HasField("antenna_locations") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("antenna_locations")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.AntennaLocations {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("antenna_locations"))
		}
		s.WriteArrayEnd()
	}
	if len(x.Ip) > 0 || s.HasField("ip") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ip")
		s.WriteStringArray(x.Ip)
	}
	if x.Metrics != nil || s.HasField("metrics") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("metrics")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Metrics {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteFloat32(v)
		}
		s.WriteObjectEnd()
	}
	if x.Advanced != nil || s.HasField("advanced") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("advanced")
		if x.Advanced == nil {
			s.WriteNil()
		} else {
			golang.MarshalStruct(s, x.Advanced)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GatewayStatus to JSON.
func (x *GatewayStatus) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GatewayStatus message from JSON.
func (x *GatewayStatus) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "time":
			s.AddField("time")
			if s.ReadNil() {
				x.Time = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.Time = v
		case "boot_time", "bootTime":
			s.AddField("boot_time")
			if s.ReadNil() {
				x.BootTime = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.BootTime = v
		case "versions":
			s.AddField("versions")
			if s.ReadNil() {
				x.Versions = nil
				return
			}
			x.Versions = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.Versions[key] = s.ReadString()
			})
		case "antenna_locations", "antennaLocations":
			s.AddField("antenna_locations")
			if s.ReadNil() {
				x.AntennaLocations = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.AntennaLocations = append(x.AntennaLocations, nil)
					return
				}
				v := &Location{}
				v.UnmarshalProtoJSON(s.WithField("antenna_locations", false))
				if s.Err() != nil {
					return
				}
				x.AntennaLocations = append(x.AntennaLocations, v)
			})
		case "ip":
			s.AddField("ip")
			if s.ReadNil() {
				x.Ip = nil
				return
			}
			x.Ip = s.ReadStringArray()
		case "metrics":
			s.AddField("metrics")
			if s.ReadNil() {
				x.Metrics = nil
				return
			}
			x.Metrics = make(map[string]float32)
			s.ReadStringMap(func(key string) {
				x.Metrics[key] = s.ReadFloat32()
			})
		case "advanced":
			s.AddField("advanced")
			if s.ReadNil() {
				x.Advanced = nil
				return
			}
			v := golang.UnmarshalStruct(s)
			if s.Err() != nil {
				return
			}
			x.Advanced = v
		}
	})
}

// UnmarshalJSON unmarshals the GatewayStatus from JSON.
func (x *GatewayStatus) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GatewayConnectionStats message to JSON.
func (x *GatewayConnectionStats) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ConnectedAt != nil || s.HasField("connected_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("connected_at")
		if x.ConnectedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.ConnectedAt)
		}
	}
	if x.DisconnectedAt != nil || s.HasField("disconnected_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("disconnected_at")
		if x.DisconnectedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.DisconnectedAt)
		}
	}
	if x.Protocol != "" || s.HasField("protocol") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("protocol")
		s.WriteString(x.Protocol)
	}
	if x.LastStatusReceivedAt != nil || s.HasField("last_status_received_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_status_received_at")
		if x.LastStatusReceivedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.LastStatusReceivedAt)
		}
	}
	if x.LastStatus != nil || s.HasField("last_status") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_status")
		x.LastStatus.MarshalProtoJSON(s.WithField("last_status"))
	}
	if x.LastUplinkReceivedAt != nil || s.HasField("last_uplink_received_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_uplink_received_at")
		if x.LastUplinkReceivedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.LastUplinkReceivedAt)
		}
	}
	if x.UplinkCount != 0 || s.HasField("uplink_count") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_count")
		s.WriteUint64(x.UplinkCount)
	}
	if x.LastDownlinkReceivedAt != nil || s.HasField("last_downlink_received_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_downlink_received_at")
		if x.LastDownlinkReceivedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.LastDownlinkReceivedAt)
		}
	}
	if x.DownlinkCount != 0 || s.HasField("downlink_count") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_count")
		s.WriteUint64(x.DownlinkCount)
	}
	if x.LastTxAcknowledgmentReceivedAt != nil || s.HasField("last_tx_acknowledgment_received_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_tx_acknowledgment_received_at")
		if x.LastTxAcknowledgmentReceivedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.LastTxAcknowledgmentReceivedAt)
		}
	}
	if x.TxAcknowledgmentCount != 0 || s.HasField("tx_acknowledgment_count") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tx_acknowledgment_count")
		s.WriteUint64(x.TxAcknowledgmentCount)
	}
	if x.RoundTripTimes != nil || s.HasField("round_trip_times") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("round_trip_times")
		// NOTE: GatewayConnectionStats_RoundTripTimes does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.RoundTripTimes)
	}
	if len(x.SubBands) > 0 || s.HasField("sub_bands") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sub_bands")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.SubBands {
			s.WriteMoreIf(&wroteElement)
			// NOTE: GatewayConnectionStats_SubBand does not seem to implement MarshalProtoJSON.
			golang.MarshalMessage(s, element)
		}
		s.WriteArrayEnd()
	}
	if x.GatewayRemoteAddress != nil || s.HasField("gateway_remote_address") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gateway_remote_address")
		// NOTE: GatewayRemoteAddress does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.GatewayRemoteAddress)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GatewayConnectionStats to JSON.
func (x *GatewayConnectionStats) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GatewayConnectionStats message from JSON.
func (x *GatewayConnectionStats) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "connected_at", "connectedAt":
			s.AddField("connected_at")
			if s.ReadNil() {
				x.ConnectedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.ConnectedAt = v
		case "disconnected_at", "disconnectedAt":
			s.AddField("disconnected_at")
			if s.ReadNil() {
				x.DisconnectedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.DisconnectedAt = v
		case "protocol":
			s.AddField("protocol")
			x.Protocol = s.ReadString()
		case "last_status_received_at", "lastStatusReceivedAt":
			s.AddField("last_status_received_at")
			if s.ReadNil() {
				x.LastStatusReceivedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.LastStatusReceivedAt = v
		case "last_status", "lastStatus":
			if s.ReadNil() {
				x.LastStatus = nil
				return
			}
			x.LastStatus = &GatewayStatus{}
			x.LastStatus.UnmarshalProtoJSON(s.WithField("last_status", true))
		case "last_uplink_received_at", "lastUplinkReceivedAt":
			s.AddField("last_uplink_received_at")
			if s.ReadNil() {
				x.LastUplinkReceivedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.LastUplinkReceivedAt = v
		case "uplink_count", "uplinkCount":
			s.AddField("uplink_count")
			x.UplinkCount = s.ReadUint64()
		case "last_downlink_received_at", "lastDownlinkReceivedAt":
			s.AddField("last_downlink_received_at")
			if s.ReadNil() {
				x.LastDownlinkReceivedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.LastDownlinkReceivedAt = v
		case "downlink_count", "downlinkCount":
			s.AddField("downlink_count")
			x.DownlinkCount = s.ReadUint64()
		case "last_tx_acknowledgment_received_at", "lastTxAcknowledgmentReceivedAt":
			s.AddField("last_tx_acknowledgment_received_at")
			if s.ReadNil() {
				x.LastTxAcknowledgmentReceivedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.LastTxAcknowledgmentReceivedAt = v
		case "tx_acknowledgment_count", "txAcknowledgmentCount":
			s.AddField("tx_acknowledgment_count")
			x.TxAcknowledgmentCount = s.ReadUint64()
		case "round_trip_times", "roundTripTimes":
			s.AddField("round_trip_times")
			if s.ReadNil() {
				x.RoundTripTimes = nil
				return
			}
			// NOTE: GatewayConnectionStats_RoundTripTimes does not seem to implement UnmarshalProtoJSON.
			var v GatewayConnectionStats_RoundTripTimes
			golang.UnmarshalMessage(s, &v)
			x.RoundTripTimes = &v
		case "sub_bands", "subBands":
			s.AddField("sub_bands")
			if s.ReadNil() {
				x.SubBands = nil
				return
			}
			s.ReadArray(func() {
				// NOTE: GatewayConnectionStats_SubBand does not seem to implement UnmarshalProtoJSON.
				var v GatewayConnectionStats_SubBand
				golang.UnmarshalMessage(s, &v)
				x.SubBands = append(x.SubBands, &v)
			})
		case "gateway_remote_address", "gatewayRemoteAddress":
			s.AddField("gateway_remote_address")
			if s.ReadNil() {
				x.GatewayRemoteAddress = nil
				return
			}
			// NOTE: GatewayRemoteAddress does not seem to implement UnmarshalProtoJSON.
			var v GatewayRemoteAddress
			golang.UnmarshalMessage(s, &v)
			x.GatewayRemoteAddress = &v
		}
	})
}

// UnmarshalJSON unmarshals the GatewayConnectionStats from JSON.
func (x *GatewayConnectionStats) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
