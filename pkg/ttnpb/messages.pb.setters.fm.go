// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import fmt "fmt"

func (dst *UplinkMessage) SetFields(src *UplinkMessage, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "raw_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'raw_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RawPayload = src.RawPayload
			} else {
				dst.RawPayload = nil
			}
		case "payload":
			if len(subs) > 0 {
				var newDst, newSrc *Message
				if (src == nil || src.Payload == nil) && dst.Payload == nil {
					continue
				}
				if src != nil {
					newSrc = src.Payload
				}
				if dst.Payload != nil {
					newDst = dst.Payload
				} else {
					newDst = &Message{}
					dst.Payload = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Payload = src.Payload
				} else {
					dst.Payload = nil
				}
			}
		case "settings":
			if len(subs) > 0 {
				var newDst, newSrc *TxSettings
				if (src == nil || src.Settings == nil) && dst.Settings == nil {
					continue
				}
				if src != nil {
					newSrc = src.Settings
				}
				if dst.Settings != nil {
					newDst = dst.Settings
				} else {
					newDst = &TxSettings{}
					dst.Settings = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Settings = src.Settings
				} else {
					dst.Settings = nil
				}
			}
		case "rx_metadata":
			if len(subs) > 0 {
				return fmt.Errorf("'rx_metadata' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RxMetadata = src.RxMetadata
			} else {
				dst.RxMetadata = nil
			}
		case "received_at":
			if len(subs) > 0 {
				return fmt.Errorf("'received_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ReceivedAt = src.ReceivedAt
			} else {
				dst.ReceivedAt = nil
			}
		case "correlation_ids":
			if len(subs) > 0 {
				return fmt.Errorf("'correlation_ids' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CorrelationIds = src.CorrelationIds
			} else {
				dst.CorrelationIds = nil
			}
		case "device_channel_index":
			if len(subs) > 0 {
				return fmt.Errorf("'device_channel_index' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DeviceChannelIndex = src.DeviceChannelIndex
			} else {
				var zero uint32
				dst.DeviceChannelIndex = zero
			}
		case "consumed_airtime":
			if len(subs) > 0 {
				return fmt.Errorf("'consumed_airtime' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ConsumedAirtime = src.ConsumedAirtime
			} else {
				dst.ConsumedAirtime = nil
			}
		case "crc_status":
			if len(subs) > 0 {
				return fmt.Errorf("'crc_status' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CrcStatus = src.CrcStatus
			} else {
				dst.CrcStatus = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *DownlinkMessage) SetFields(src *DownlinkMessage, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "raw_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'raw_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RawPayload = src.RawPayload
			} else {
				dst.RawPayload = nil
			}
		case "payload":
			if len(subs) > 0 {
				var newDst, newSrc *Message
				if (src == nil || src.Payload == nil) && dst.Payload == nil {
					continue
				}
				if src != nil {
					newSrc = src.Payload
				}
				if dst.Payload != nil {
					newDst = dst.Payload
				} else {
					newDst = &Message{}
					dst.Payload = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Payload = src.Payload
				} else {
					dst.Payload = nil
				}
			}
		case "end_device_ids":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceIdentifiers
				if (src == nil || src.EndDeviceIds == nil) && dst.EndDeviceIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.EndDeviceIds
				}
				if dst.EndDeviceIds != nil {
					newDst = dst.EndDeviceIds
				} else {
					newDst = &EndDeviceIdentifiers{}
					dst.EndDeviceIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDeviceIds = src.EndDeviceIds
				} else {
					dst.EndDeviceIds = nil
				}
			}
		case "correlation_ids":
			if len(subs) > 0 {
				return fmt.Errorf("'correlation_ids' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CorrelationIds = src.CorrelationIds
			} else {
				dst.CorrelationIds = nil
			}
		case "session_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'session_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SessionKeyId = src.SessionKeyId
			} else {
				dst.SessionKeyId = nil
			}

		case "settings":
			if len(subs) == 0 && src == nil {
				dst.Settings = nil
				continue
			} else if len(subs) == 0 {
				dst.Settings = src.Settings
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "request":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Settings.(*DownlinkMessage_Request)
					}
					if srcValid := srcTypeOk || src == nil || src.Settings == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'request', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Settings.(*DownlinkMessage_Request)
					if dstValid := dstTypeOk || dst.Settings == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'request', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *TxRequest
						if srcTypeOk {
							newSrc = src.Settings.(*DownlinkMessage_Request).Request
						}
						if dstTypeOk {
							newDst = dst.Settings.(*DownlinkMessage_Request).Request
						} else if srcTypeOk {
							newDst = &TxRequest{}
							dst.Settings = &DownlinkMessage_Request{Request: newDst}
						} else {
							dst.Settings = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Settings = src.Settings
						} else {
							dst.Settings = nil
						}
					}
				case "scheduled":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Settings.(*DownlinkMessage_Scheduled)
					}
					if srcValid := srcTypeOk || src == nil || src.Settings == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'scheduled', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Settings.(*DownlinkMessage_Scheduled)
					if dstValid := dstTypeOk || dst.Settings == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'scheduled', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *TxSettings
						if srcTypeOk {
							newSrc = src.Settings.(*DownlinkMessage_Scheduled).Scheduled
						}
						if dstTypeOk {
							newDst = dst.Settings.(*DownlinkMessage_Scheduled).Scheduled
						} else if srcTypeOk {
							newDst = &TxSettings{}
							dst.Settings = &DownlinkMessage_Scheduled{Scheduled: newDst}
						} else {
							dst.Settings = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Settings = src.Settings
						} else {
							dst.Settings = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *TxAcknowledgment) SetFields(src *TxAcknowledgment, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "correlation_ids":
			if len(subs) > 0 {
				return fmt.Errorf("'correlation_ids' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CorrelationIds = src.CorrelationIds
			} else {
				dst.CorrelationIds = nil
			}
		case "result":
			if len(subs) > 0 {
				return fmt.Errorf("'result' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Result = src.Result
			} else {
				dst.Result = 0
			}
		case "downlink_message":
			if len(subs) > 0 {
				var newDst, newSrc *DownlinkMessage
				if (src == nil || src.DownlinkMessage == nil) && dst.DownlinkMessage == nil {
					continue
				}
				if src != nil {
					newSrc = src.DownlinkMessage
				}
				if dst.DownlinkMessage != nil {
					newDst = dst.DownlinkMessage
				} else {
					newDst = &DownlinkMessage{}
					dst.DownlinkMessage = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.DownlinkMessage = src.DownlinkMessage
				} else {
					dst.DownlinkMessage = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GatewayTxAcknowledgment) SetFields(src *GatewayTxAcknowledgment, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "gateway_ids":
			if len(subs) > 0 {
				var newDst, newSrc *GatewayIdentifiers
				if (src == nil || src.GatewayIds == nil) && dst.GatewayIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.GatewayIds
				}
				if dst.GatewayIds != nil {
					newDst = dst.GatewayIds
				} else {
					newDst = &GatewayIdentifiers{}
					dst.GatewayIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.GatewayIds = src.GatewayIds
				} else {
					dst.GatewayIds = nil
				}
			}
		case "tx_ack":
			if len(subs) > 0 {
				var newDst, newSrc *TxAcknowledgment
				if (src == nil || src.TxAck == nil) && dst.TxAck == nil {
					continue
				}
				if src != nil {
					newSrc = src.TxAck
				}
				if dst.TxAck != nil {
					newDst = dst.TxAck
				} else {
					newDst = &TxAcknowledgment{}
					dst.TxAck = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.TxAck = src.TxAck
				} else {
					dst.TxAck = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GatewayUplinkMessage) SetFields(src *GatewayUplinkMessage, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "message":
			if len(subs) > 0 {
				var newDst, newSrc *UplinkMessage
				if (src == nil || src.Message == nil) && dst.Message == nil {
					continue
				}
				if src != nil {
					newSrc = src.Message
				}
				if dst.Message != nil {
					newDst = dst.Message
				} else {
					newDst = &UplinkMessage{}
					dst.Message = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Message = src.Message
				} else {
					dst.Message = nil
				}
			}
		case "band_id":
			if len(subs) > 0 {
				return fmt.Errorf("'band_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.BandId = src.BandId
			} else {
				var zero string
				dst.BandId = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationUplink) SetFields(src *ApplicationUplink, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "session_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'session_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SessionKeyId = src.SessionKeyId
			} else {
				dst.SessionKeyId = nil
			}
		case "f_port":
			if len(subs) > 0 {
				return fmt.Errorf("'f_port' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FPort = src.FPort
			} else {
				var zero uint32
				dst.FPort = zero
			}
		case "f_cnt":
			if len(subs) > 0 {
				return fmt.Errorf("'f_cnt' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FCnt = src.FCnt
			} else {
				var zero uint32
				dst.FCnt = zero
			}
		case "frm_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'frm_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrmPayload = src.FrmPayload
			} else {
				dst.FrmPayload = nil
			}
		case "decoded_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'decoded_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DecodedPayload = src.DecodedPayload
			} else {
				dst.DecodedPayload = nil
			}
		case "decoded_payload_warnings":
			if len(subs) > 0 {
				return fmt.Errorf("'decoded_payload_warnings' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DecodedPayloadWarnings = src.DecodedPayloadWarnings
			} else {
				dst.DecodedPayloadWarnings = nil
			}
		case "normalized_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'normalized_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NormalizedPayload = src.NormalizedPayload
			} else {
				dst.NormalizedPayload = nil
			}
		case "normalized_payload_warnings":
			if len(subs) > 0 {
				return fmt.Errorf("'normalized_payload_warnings' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NormalizedPayloadWarnings = src.NormalizedPayloadWarnings
			} else {
				dst.NormalizedPayloadWarnings = nil
			}
		case "rx_metadata":
			if len(subs) > 0 {
				return fmt.Errorf("'rx_metadata' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RxMetadata = src.RxMetadata
			} else {
				dst.RxMetadata = nil
			}
		case "settings":
			if len(subs) > 0 {
				var newDst, newSrc *TxSettings
				if (src == nil || src.Settings == nil) && dst.Settings == nil {
					continue
				}
				if src != nil {
					newSrc = src.Settings
				}
				if dst.Settings != nil {
					newDst = dst.Settings
				} else {
					newDst = &TxSettings{}
					dst.Settings = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Settings = src.Settings
				} else {
					dst.Settings = nil
				}
			}
		case "received_at":
			if len(subs) > 0 {
				return fmt.Errorf("'received_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ReceivedAt = src.ReceivedAt
			} else {
				dst.ReceivedAt = nil
			}
		case "app_s_key":
			if len(subs) > 0 {
				var newDst, newSrc *KeyEnvelope
				if (src == nil || src.AppSKey == nil) && dst.AppSKey == nil {
					continue
				}
				if src != nil {
					newSrc = src.AppSKey
				}
				if dst.AppSKey != nil {
					newDst = dst.AppSKey
				} else {
					newDst = &KeyEnvelope{}
					dst.AppSKey = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.AppSKey = src.AppSKey
				} else {
					dst.AppSKey = nil
				}
			}
		case "last_a_f_cnt_down":
			if len(subs) > 0 {
				return fmt.Errorf("'last_a_f_cnt_down' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.LastAFCntDown = src.LastAFCntDown
			} else {
				var zero uint32
				dst.LastAFCntDown = zero
			}
		case "confirmed":
			if len(subs) > 0 {
				return fmt.Errorf("'confirmed' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Confirmed = src.Confirmed
			} else {
				var zero bool
				dst.Confirmed = zero
			}
		case "consumed_airtime":
			if len(subs) > 0 {
				return fmt.Errorf("'consumed_airtime' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ConsumedAirtime = src.ConsumedAirtime
			} else {
				dst.ConsumedAirtime = nil
			}
		case "packet_error_rate":
			if len(subs) > 0 {
				return fmt.Errorf("'packet_error_rate' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PacketErrorRate = src.PacketErrorRate
			} else {
				var zero float32
				dst.PacketErrorRate = zero
			}
		case "locations":
			if len(subs) > 0 {
				return fmt.Errorf("'locations' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Locations = src.Locations
			} else {
				dst.Locations = nil
			}
		case "version_ids":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceVersionIdentifiers
				if (src == nil || src.VersionIds == nil) && dst.VersionIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.VersionIds
				}
				if dst.VersionIds != nil {
					newDst = dst.VersionIds
				} else {
					newDst = &EndDeviceVersionIdentifiers{}
					dst.VersionIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.VersionIds = src.VersionIds
				} else {
					dst.VersionIds = nil
				}
			}
		case "network_ids":
			if len(subs) > 0 {
				var newDst, newSrc *NetworkIdentifiers
				if (src == nil || src.NetworkIds == nil) && dst.NetworkIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.NetworkIds
				}
				if dst.NetworkIds != nil {
					newDst = dst.NetworkIds
				} else {
					newDst = &NetworkIdentifiers{}
					dst.NetworkIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.NetworkIds = src.NetworkIds
				} else {
					dst.NetworkIds = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationUplinkNormalized) SetFields(src *ApplicationUplinkNormalized, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "session_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'session_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SessionKeyId = src.SessionKeyId
			} else {
				dst.SessionKeyId = nil
			}
		case "f_port":
			if len(subs) > 0 {
				return fmt.Errorf("'f_port' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FPort = src.FPort
			} else {
				var zero uint32
				dst.FPort = zero
			}
		case "f_cnt":
			if len(subs) > 0 {
				return fmt.Errorf("'f_cnt' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FCnt = src.FCnt
			} else {
				var zero uint32
				dst.FCnt = zero
			}
		case "frm_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'frm_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrmPayload = src.FrmPayload
			} else {
				dst.FrmPayload = nil
			}
		case "normalized_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'normalized_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NormalizedPayload = src.NormalizedPayload
			} else {
				dst.NormalizedPayload = nil
			}
		case "normalized_payload_warnings":
			if len(subs) > 0 {
				return fmt.Errorf("'normalized_payload_warnings' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.NormalizedPayloadWarnings = src.NormalizedPayloadWarnings
			} else {
				dst.NormalizedPayloadWarnings = nil
			}
		case "rx_metadata":
			if len(subs) > 0 {
				return fmt.Errorf("'rx_metadata' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.RxMetadata = src.RxMetadata
			} else {
				dst.RxMetadata = nil
			}
		case "settings":
			if len(subs) > 0 {
				var newDst, newSrc *TxSettings
				if (src == nil || src.Settings == nil) && dst.Settings == nil {
					continue
				}
				if src != nil {
					newSrc = src.Settings
				}
				if dst.Settings != nil {
					newDst = dst.Settings
				} else {
					newDst = &TxSettings{}
					dst.Settings = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Settings = src.Settings
				} else {
					dst.Settings = nil
				}
			}
		case "received_at":
			if len(subs) > 0 {
				return fmt.Errorf("'received_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ReceivedAt = src.ReceivedAt
			} else {
				dst.ReceivedAt = nil
			}
		case "confirmed":
			if len(subs) > 0 {
				return fmt.Errorf("'confirmed' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Confirmed = src.Confirmed
			} else {
				var zero bool
				dst.Confirmed = zero
			}
		case "consumed_airtime":
			if len(subs) > 0 {
				return fmt.Errorf("'consumed_airtime' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ConsumedAirtime = src.ConsumedAirtime
			} else {
				dst.ConsumedAirtime = nil
			}
		case "locations":
			if len(subs) > 0 {
				return fmt.Errorf("'locations' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Locations = src.Locations
			} else {
				dst.Locations = nil
			}
		case "version_ids":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceVersionIdentifiers
				if (src == nil || src.VersionIds == nil) && dst.VersionIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.VersionIds
				}
				if dst.VersionIds != nil {
					newDst = dst.VersionIds
				} else {
					newDst = &EndDeviceVersionIdentifiers{}
					dst.VersionIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.VersionIds = src.VersionIds
				} else {
					dst.VersionIds = nil
				}
			}
		case "network_ids":
			if len(subs) > 0 {
				var newDst, newSrc *NetworkIdentifiers
				if (src == nil || src.NetworkIds == nil) && dst.NetworkIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.NetworkIds
				}
				if dst.NetworkIds != nil {
					newDst = dst.NetworkIds
				} else {
					newDst = &NetworkIdentifiers{}
					dst.NetworkIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.NetworkIds = src.NetworkIds
				} else {
					dst.NetworkIds = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationLocation) SetFields(src *ApplicationLocation, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "service":
			if len(subs) > 0 {
				return fmt.Errorf("'service' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Service = src.Service
			} else {
				var zero string
				dst.Service = zero
			}
		case "location":
			if len(subs) > 0 {
				var newDst, newSrc *Location
				if (src == nil || src.Location == nil) && dst.Location == nil {
					continue
				}
				if src != nil {
					newSrc = src.Location
				}
				if dst.Location != nil {
					newDst = dst.Location
				} else {
					newDst = &Location{}
					dst.Location = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Location = src.Location
				} else {
					dst.Location = nil
				}
			}
		case "attributes":
			if len(subs) > 0 {
				return fmt.Errorf("'attributes' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Attributes = src.Attributes
			} else {
				dst.Attributes = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationJoinAccept) SetFields(src *ApplicationJoinAccept, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "session_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'session_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SessionKeyId = src.SessionKeyId
			} else {
				dst.SessionKeyId = nil
			}
		case "app_s_key":
			if len(subs) > 0 {
				var newDst, newSrc *KeyEnvelope
				if (src == nil || src.AppSKey == nil) && dst.AppSKey == nil {
					continue
				}
				if src != nil {
					newSrc = src.AppSKey
				}
				if dst.AppSKey != nil {
					newDst = dst.AppSKey
				} else {
					newDst = &KeyEnvelope{}
					dst.AppSKey = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.AppSKey = src.AppSKey
				} else {
					dst.AppSKey = nil
				}
			}
		case "invalidated_downlinks":
			if len(subs) > 0 {
				return fmt.Errorf("'invalidated_downlinks' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.InvalidatedDownlinks = src.InvalidatedDownlinks
			} else {
				dst.InvalidatedDownlinks = nil
			}
		case "pending_session":
			if len(subs) > 0 {
				return fmt.Errorf("'pending_session' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PendingSession = src.PendingSession
			} else {
				var zero bool
				dst.PendingSession = zero
			}
		case "received_at":
			if len(subs) > 0 {
				return fmt.Errorf("'received_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ReceivedAt = src.ReceivedAt
			} else {
				dst.ReceivedAt = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationDownlink) SetFields(src *ApplicationDownlink, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "session_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'session_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SessionKeyId = src.SessionKeyId
			} else {
				dst.SessionKeyId = nil
			}
		case "f_port":
			if len(subs) > 0 {
				return fmt.Errorf("'f_port' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FPort = src.FPort
			} else {
				var zero uint32
				dst.FPort = zero
			}
		case "f_cnt":
			if len(subs) > 0 {
				return fmt.Errorf("'f_cnt' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FCnt = src.FCnt
			} else {
				var zero uint32
				dst.FCnt = zero
			}
		case "frm_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'frm_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FrmPayload = src.FrmPayload
			} else {
				dst.FrmPayload = nil
			}
		case "decoded_payload":
			if len(subs) > 0 {
				return fmt.Errorf("'decoded_payload' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DecodedPayload = src.DecodedPayload
			} else {
				dst.DecodedPayload = nil
			}
		case "decoded_payload_warnings":
			if len(subs) > 0 {
				return fmt.Errorf("'decoded_payload_warnings' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DecodedPayloadWarnings = src.DecodedPayloadWarnings
			} else {
				dst.DecodedPayloadWarnings = nil
			}
		case "confirmed":
			if len(subs) > 0 {
				return fmt.Errorf("'confirmed' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Confirmed = src.Confirmed
			} else {
				var zero bool
				dst.Confirmed = zero
			}
		case "class_b_c":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationDownlink_ClassBC
				if (src == nil || src.ClassBC == nil) && dst.ClassBC == nil {
					continue
				}
				if src != nil {
					newSrc = src.ClassBC
				}
				if dst.ClassBC != nil {
					newDst = dst.ClassBC
				} else {
					newDst = &ApplicationDownlink_ClassBC{}
					dst.ClassBC = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ClassBC = src.ClassBC
				} else {
					dst.ClassBC = nil
				}
			}
		case "priority":
			if len(subs) > 0 {
				return fmt.Errorf("'priority' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Priority = src.Priority
			} else {
				dst.Priority = 0
			}
		case "correlation_ids":
			if len(subs) > 0 {
				return fmt.Errorf("'correlation_ids' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CorrelationIds = src.CorrelationIds
			} else {
				dst.CorrelationIds = nil
			}
		case "confirmed_retry":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationDownlink_ConfirmedRetry
				if (src == nil || src.ConfirmedRetry == nil) && dst.ConfirmedRetry == nil {
					continue
				}
				if src != nil {
					newSrc = src.ConfirmedRetry
				}
				if dst.ConfirmedRetry != nil {
					newDst = dst.ConfirmedRetry
				} else {
					newDst = &ApplicationDownlink_ConfirmedRetry{}
					dst.ConfirmedRetry = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.ConfirmedRetry = src.ConfirmedRetry
				} else {
					dst.ConfirmedRetry = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationDownlinks) SetFields(src *ApplicationDownlinks, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "downlinks":
			if len(subs) > 0 {
				return fmt.Errorf("'downlinks' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Downlinks = src.Downlinks
			} else {
				dst.Downlinks = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationDownlinkFailed) SetFields(src *ApplicationDownlinkFailed, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "downlink":
			if len(subs) > 0 {
				var newDst, newSrc *ApplicationDownlink
				if (src == nil || src.Downlink == nil) && dst.Downlink == nil {
					continue
				}
				if src != nil {
					newSrc = src.Downlink
				}
				if dst.Downlink != nil {
					newDst = dst.Downlink
				} else {
					newDst = &ApplicationDownlink{}
					dst.Downlink = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Downlink = src.Downlink
				} else {
					dst.Downlink = nil
				}
			}
		case "error":
			if len(subs) > 0 {
				var newDst, newSrc *ErrorDetails
				if (src == nil || src.Error == nil) && dst.Error == nil {
					continue
				}
				if src != nil {
					newSrc = src.Error
				}
				if dst.Error != nil {
					newDst = dst.Error
				} else {
					newDst = &ErrorDetails{}
					dst.Error = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Error = src.Error
				} else {
					dst.Error = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationInvalidatedDownlinks) SetFields(src *ApplicationInvalidatedDownlinks, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "downlinks":
			if len(subs) > 0 {
				return fmt.Errorf("'downlinks' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Downlinks = src.Downlinks
			} else {
				dst.Downlinks = nil
			}
		case "last_f_cnt_down":
			if len(subs) > 0 {
				return fmt.Errorf("'last_f_cnt_down' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.LastFCntDown = src.LastFCntDown
			} else {
				var zero uint32
				dst.LastFCntDown = zero
			}
		case "session_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'session_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SessionKeyId = src.SessionKeyId
			} else {
				dst.SessionKeyId = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *DownlinkQueueOperationErrorDetails) SetFields(src *DownlinkQueueOperationErrorDetails, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "dev_addr":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_addr' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevAddr = src.DevAddr
			} else {
				dst.DevAddr = nil
			}
		case "session_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'session_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.SessionKeyId = src.SessionKeyId
			} else {
				dst.SessionKeyId = nil
			}
		case "min_f_cnt_down":
			if len(subs) > 0 {
				return fmt.Errorf("'min_f_cnt_down' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MinFCntDown = src.MinFCntDown
			} else {
				var zero uint32
				dst.MinFCntDown = zero
			}
		case "pending_dev_addr":
			if len(subs) > 0 {
				return fmt.Errorf("'pending_dev_addr' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PendingDevAddr = src.PendingDevAddr
			} else {
				dst.PendingDevAddr = nil
			}
		case "pending_session_key_id":
			if len(subs) > 0 {
				return fmt.Errorf("'pending_session_key_id' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PendingSessionKeyId = src.PendingSessionKeyId
			} else {
				dst.PendingSessionKeyId = nil
			}
		case "pending_min_f_cnt_down":
			if len(subs) > 0 {
				return fmt.Errorf("'pending_min_f_cnt_down' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.PendingMinFCntDown = src.PendingMinFCntDown
			} else {
				var zero uint32
				dst.PendingMinFCntDown = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationServiceData) SetFields(src *ApplicationServiceData, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "service":
			if len(subs) > 0 {
				return fmt.Errorf("'service' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Service = src.Service
			} else {
				var zero string
				dst.Service = zero
			}
		case "data":
			if len(subs) > 0 {
				return fmt.Errorf("'data' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Data = src.Data
			} else {
				dst.Data = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationUp) SetFields(src *ApplicationUp, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "end_device_ids":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceIdentifiers
				if (src == nil || src.EndDeviceIds == nil) && dst.EndDeviceIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.EndDeviceIds
				}
				if dst.EndDeviceIds != nil {
					newDst = dst.EndDeviceIds
				} else {
					newDst = &EndDeviceIdentifiers{}
					dst.EndDeviceIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDeviceIds = src.EndDeviceIds
				} else {
					dst.EndDeviceIds = nil
				}
			}
		case "correlation_ids":
			if len(subs) > 0 {
				return fmt.Errorf("'correlation_ids' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CorrelationIds = src.CorrelationIds
			} else {
				dst.CorrelationIds = nil
			}
		case "received_at":
			if len(subs) > 0 {
				return fmt.Errorf("'received_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ReceivedAt = src.ReceivedAt
			} else {
				dst.ReceivedAt = nil
			}
		case "simulated":
			if len(subs) > 0 {
				return fmt.Errorf("'simulated' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Simulated = src.Simulated
			} else {
				var zero bool
				dst.Simulated = zero
			}

		case "up":
			if len(subs) == 0 && src == nil {
				dst.Up = nil
				continue
			} else if len(subs) == 0 {
				dst.Up = src.Up
				continue
			}

			subPathMap := _processPaths(subs)
			if len(subPathMap) > 1 {
				return fmt.Errorf("more than one field specified for oneof field '%s'", name)
			}
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "uplink_message":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_UplinkMessage)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'uplink_message', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_UplinkMessage)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'uplink_message', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationUplink
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_UplinkMessage).UplinkMessage
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_UplinkMessage).UplinkMessage
						} else if srcTypeOk {
							newDst = &ApplicationUplink{}
							dst.Up = &ApplicationUp_UplinkMessage{UplinkMessage: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "uplink_normalized":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_UplinkNormalized)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'uplink_normalized', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_UplinkNormalized)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'uplink_normalized', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationUplinkNormalized
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_UplinkNormalized).UplinkNormalized
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_UplinkNormalized).UplinkNormalized
						} else if srcTypeOk {
							newDst = &ApplicationUplinkNormalized{}
							dst.Up = &ApplicationUp_UplinkNormalized{UplinkNormalized: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "join_accept":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_JoinAccept)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'join_accept', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_JoinAccept)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'join_accept', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationJoinAccept
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_JoinAccept).JoinAccept
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_JoinAccept).JoinAccept
						} else if srcTypeOk {
							newDst = &ApplicationJoinAccept{}
							dst.Up = &ApplicationUp_JoinAccept{JoinAccept: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "downlink_ack":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_DownlinkAck)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'downlink_ack', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_DownlinkAck)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'downlink_ack', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationDownlink
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_DownlinkAck).DownlinkAck
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_DownlinkAck).DownlinkAck
						} else if srcTypeOk {
							newDst = &ApplicationDownlink{}
							dst.Up = &ApplicationUp_DownlinkAck{DownlinkAck: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "downlink_nack":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_DownlinkNack)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'downlink_nack', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_DownlinkNack)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'downlink_nack', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationDownlink
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_DownlinkNack).DownlinkNack
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_DownlinkNack).DownlinkNack
						} else if srcTypeOk {
							newDst = &ApplicationDownlink{}
							dst.Up = &ApplicationUp_DownlinkNack{DownlinkNack: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "downlink_sent":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_DownlinkSent)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'downlink_sent', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_DownlinkSent)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'downlink_sent', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationDownlink
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_DownlinkSent).DownlinkSent
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_DownlinkSent).DownlinkSent
						} else if srcTypeOk {
							newDst = &ApplicationDownlink{}
							dst.Up = &ApplicationUp_DownlinkSent{DownlinkSent: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "downlink_failed":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_DownlinkFailed)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'downlink_failed', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_DownlinkFailed)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'downlink_failed', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationDownlinkFailed
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_DownlinkFailed).DownlinkFailed
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_DownlinkFailed).DownlinkFailed
						} else if srcTypeOk {
							newDst = &ApplicationDownlinkFailed{}
							dst.Up = &ApplicationUp_DownlinkFailed{DownlinkFailed: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "downlink_queued":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_DownlinkQueued)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'downlink_queued', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_DownlinkQueued)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'downlink_queued', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationDownlink
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_DownlinkQueued).DownlinkQueued
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_DownlinkQueued).DownlinkQueued
						} else if srcTypeOk {
							newDst = &ApplicationDownlink{}
							dst.Up = &ApplicationUp_DownlinkQueued{DownlinkQueued: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "downlink_queue_invalidated":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_DownlinkQueueInvalidated)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'downlink_queue_invalidated', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_DownlinkQueueInvalidated)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'downlink_queue_invalidated', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationInvalidatedDownlinks
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_DownlinkQueueInvalidated).DownlinkQueueInvalidated
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_DownlinkQueueInvalidated).DownlinkQueueInvalidated
						} else if srcTypeOk {
							newDst = &ApplicationInvalidatedDownlinks{}
							dst.Up = &ApplicationUp_DownlinkQueueInvalidated{DownlinkQueueInvalidated: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "location_solved":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_LocationSolved)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'location_solved', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_LocationSolved)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'location_solved', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationLocation
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_LocationSolved).LocationSolved
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_LocationSolved).LocationSolved
						} else if srcTypeOk {
							newDst = &ApplicationLocation{}
							dst.Up = &ApplicationUp_LocationSolved{LocationSolved: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}
				case "service_data":
					var srcTypeOk bool
					if src != nil {
						_, srcTypeOk = src.Up.(*ApplicationUp_ServiceData)
					}
					if srcValid := srcTypeOk || src == nil || src.Up == nil || len(oneofSubs) == 0; !srcValid {
						return fmt.Errorf("attempt to set oneof 'service_data', while different oneof is set in source")
					}
					_, dstTypeOk := dst.Up.(*ApplicationUp_ServiceData)
					if dstValid := dstTypeOk || dst.Up == nil || len(oneofSubs) == 0; !dstValid {
						return fmt.Errorf("attempt to set oneof 'service_data', while different oneof is set in destination")
					}
					if len(oneofSubs) > 0 {
						var newDst, newSrc *ApplicationServiceData
						if srcTypeOk {
							newSrc = src.Up.(*ApplicationUp_ServiceData).ServiceData
						}
						if dstTypeOk {
							newDst = dst.Up.(*ApplicationUp_ServiceData).ServiceData
						} else if srcTypeOk {
							newDst = &ApplicationServiceData{}
							dst.Up = &ApplicationUp_ServiceData{ServiceData: newDst}
						} else {
							dst.Up = nil
							continue
						}
						if err := newDst.SetFields(newSrc, oneofSubs...); err != nil {
							return err
						}
					} else {
						if srcTypeOk {
							dst.Up = src.Up
						} else {
							dst.Up = nil
						}
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *MessagePayloadFormatters) SetFields(src *MessagePayloadFormatters, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "up_formatter":
			if len(subs) > 0 {
				return fmt.Errorf("'up_formatter' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UpFormatter = src.UpFormatter
			} else {
				dst.UpFormatter = 0
			}
		case "up_formatter_parameter":
			if len(subs) > 0 {
				return fmt.Errorf("'up_formatter_parameter' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UpFormatterParameter = src.UpFormatterParameter
			} else {
				var zero string
				dst.UpFormatterParameter = zero
			}
		case "down_formatter":
			if len(subs) > 0 {
				return fmt.Errorf("'down_formatter' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DownFormatter = src.DownFormatter
			} else {
				dst.DownFormatter = 0
			}
		case "down_formatter_parameter":
			if len(subs) > 0 {
				return fmt.Errorf("'down_formatter_parameter' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DownFormatterParameter = src.DownFormatterParameter
			} else {
				var zero string
				dst.DownFormatterParameter = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *DownlinkQueueRequest) SetFields(src *DownlinkQueueRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "end_device_ids":
			if len(subs) > 0 {
				var newDst, newSrc *EndDeviceIdentifiers
				if (src == nil || src.EndDeviceIds == nil) && dst.EndDeviceIds == nil {
					continue
				}
				if src != nil {
					newSrc = src.EndDeviceIds
				}
				if dst.EndDeviceIds != nil {
					newDst = dst.EndDeviceIds
				} else {
					newDst = &EndDeviceIdentifiers{}
					dst.EndDeviceIds = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.EndDeviceIds = src.EndDeviceIds
				} else {
					dst.EndDeviceIds = nil
				}
			}
		case "downlinks":
			if len(subs) > 0 {
				return fmt.Errorf("'downlinks' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Downlinks = src.Downlinks
			} else {
				dst.Downlinks = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationDownlink_ClassBC) SetFields(src *ApplicationDownlink_ClassBC, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "gateways":
			if len(subs) > 0 {
				return fmt.Errorf("'gateways' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Gateways = src.Gateways
			} else {
				dst.Gateways = nil
			}
		case "absolute_time":
			if len(subs) > 0 {
				return fmt.Errorf("'absolute_time' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.AbsoluteTime = src.AbsoluteTime
			} else {
				dst.AbsoluteTime = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ApplicationDownlink_ConfirmedRetry) SetFields(src *ApplicationDownlink_ConfirmedRetry, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "attempt":
			if len(subs) > 0 {
				return fmt.Errorf("'attempt' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Attempt = src.Attempt
			} else {
				var zero uint32
				dst.Attempt = zero
			}
		case "max_attempts":
			if len(subs) > 0 {
				return fmt.Errorf("'max_attempts' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxAttempts = src.MaxAttempts
			} else {
				dst.MaxAttempts = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
