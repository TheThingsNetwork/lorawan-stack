// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v1.6.0
// - protoc             v4.23.4
// source: ttn/lorawan/v3/applicationserver_web.proto

package ttnpb

import (
	golang "github.com/TheThingsIndustries/protoc-gen-go-json/golang"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
)

// MarshalProtoJSON marshals the ApplicationWebhookTemplate message to JSON.
func (x *ApplicationWebhookTemplate) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Ids != nil || s.HasField("ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		// NOTE: ApplicationWebhookTemplateIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Ids)
	}
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if x.Description != "" || s.HasField("description") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("description")
		s.WriteString(x.Description)
	}
	if x.LogoUrl != "" || s.HasField("logo_url") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("logo_url")
		s.WriteString(x.LogoUrl)
	}
	if x.InfoUrl != "" || s.HasField("info_url") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("info_url")
		s.WriteString(x.InfoUrl)
	}
	if x.DocumentationUrl != "" || s.HasField("documentation_url") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("documentation_url")
		s.WriteString(x.DocumentationUrl)
	}
	if x.BaseUrl != "" || s.HasField("base_url") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("base_url")
		s.WriteString(x.BaseUrl)
	}
	if x.Headers != nil || s.HasField("headers") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("headers")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Headers {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if x.Format != "" || s.HasField("format") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("format")
		s.WriteString(x.Format)
	}
	if len(x.Fields) > 0 || s.HasField("fields") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("fields")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Fields {
			s.WriteMoreIf(&wroteElement)
			// NOTE: ApplicationWebhookTemplateField does not seem to implement MarshalProtoJSON.
			golang.MarshalMessage(s, element)
		}
		s.WriteArrayEnd()
	}
	if x.CreateDownlinkApiKey || s.HasField("create_downlink_api_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("create_downlink_api_key")
		s.WriteBool(x.CreateDownlinkApiKey)
	}
	if x.UplinkMessage != nil || s.HasField("uplink_message") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_message")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UplinkMessage)
	}
	if x.UplinkNormalized != nil || s.HasField("uplink_normalized") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_normalized")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UplinkNormalized)
	}
	if x.JoinAccept != nil || s.HasField("join_accept") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("join_accept")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.JoinAccept)
	}
	if x.DownlinkAck != nil || s.HasField("downlink_ack") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_ack")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkAck)
	}
	if x.DownlinkNack != nil || s.HasField("downlink_nack") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_nack")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkNack)
	}
	if x.DownlinkSent != nil || s.HasField("downlink_sent") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_sent")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkSent)
	}
	if x.DownlinkFailed != nil || s.HasField("downlink_failed") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_failed")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkFailed)
	}
	if x.DownlinkQueued != nil || s.HasField("downlink_queued") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_queued")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkQueued)
	}
	if x.DownlinkQueueInvalidated != nil || s.HasField("downlink_queue_invalidated") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_queue_invalidated")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkQueueInvalidated)
	}
	if x.LocationSolved != nil || s.HasField("location_solved") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("location_solved")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.LocationSolved)
	}
	if x.ServiceData != nil || s.HasField("service_data") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("service_data")
		// NOTE: ApplicationWebhookTemplate_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.ServiceData)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ApplicationWebhookTemplate to JSON.
func (x *ApplicationWebhookTemplate) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ApplicationWebhookTemplate message from JSON.
func (x *ApplicationWebhookTemplate) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ids":
			s.AddField("ids")
			if s.ReadNil() {
				x.Ids = nil
				return
			}
			// NOTE: ApplicationWebhookTemplateIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplateIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.Ids = &v
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		case "description":
			s.AddField("description")
			x.Description = s.ReadString()
		case "logo_url", "logoUrl":
			s.AddField("logo_url")
			x.LogoUrl = s.ReadString()
		case "info_url", "infoUrl":
			s.AddField("info_url")
			x.InfoUrl = s.ReadString()
		case "documentation_url", "documentationUrl":
			s.AddField("documentation_url")
			x.DocumentationUrl = s.ReadString()
		case "base_url", "baseUrl":
			s.AddField("base_url")
			x.BaseUrl = s.ReadString()
		case "headers":
			s.AddField("headers")
			if s.ReadNil() {
				x.Headers = nil
				return
			}
			x.Headers = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.Headers[key] = s.ReadString()
			})
		case "format":
			s.AddField("format")
			x.Format = s.ReadString()
		case "fields":
			s.AddField("fields")
			if s.ReadNil() {
				x.Fields = nil
				return
			}
			s.ReadArray(func() {
				// NOTE: ApplicationWebhookTemplateField does not seem to implement UnmarshalProtoJSON.
				var v ApplicationWebhookTemplateField
				golang.UnmarshalMessage(s, &v)
				x.Fields = append(x.Fields, &v)
			})
		case "create_downlink_api_key", "createDownlinkApiKey":
			s.AddField("create_downlink_api_key")
			x.CreateDownlinkApiKey = s.ReadBool()
		case "uplink_message", "uplinkMessage":
			s.AddField("uplink_message")
			if s.ReadNil() {
				x.UplinkMessage = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.UplinkMessage = &v
		case "uplink_normalized", "uplinkNormalized":
			s.AddField("uplink_normalized")
			if s.ReadNil() {
				x.UplinkNormalized = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.UplinkNormalized = &v
		case "join_accept", "joinAccept":
			s.AddField("join_accept")
			if s.ReadNil() {
				x.JoinAccept = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.JoinAccept = &v
		case "downlink_ack", "downlinkAck":
			s.AddField("downlink_ack")
			if s.ReadNil() {
				x.DownlinkAck = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkAck = &v
		case "downlink_nack", "downlinkNack":
			s.AddField("downlink_nack")
			if s.ReadNil() {
				x.DownlinkNack = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkNack = &v
		case "downlink_sent", "downlinkSent":
			s.AddField("downlink_sent")
			if s.ReadNil() {
				x.DownlinkSent = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkSent = &v
		case "downlink_failed", "downlinkFailed":
			s.AddField("downlink_failed")
			if s.ReadNil() {
				x.DownlinkFailed = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkFailed = &v
		case "downlink_queued", "downlinkQueued":
			s.AddField("downlink_queued")
			if s.ReadNil() {
				x.DownlinkQueued = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkQueued = &v
		case "downlink_queue_invalidated", "downlinkQueueInvalidated":
			s.AddField("downlink_queue_invalidated")
			if s.ReadNil() {
				x.DownlinkQueueInvalidated = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkQueueInvalidated = &v
		case "location_solved", "locationSolved":
			s.AddField("location_solved")
			if s.ReadNil() {
				x.LocationSolved = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.LocationSolved = &v
		case "service_data", "serviceData":
			s.AddField("service_data")
			if s.ReadNil() {
				x.ServiceData = nil
				return
			}
			// NOTE: ApplicationWebhookTemplate_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplate_Message
			golang.UnmarshalMessage(s, &v)
			x.ServiceData = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the ApplicationWebhookTemplate from JSON.
func (x *ApplicationWebhookTemplate) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ApplicationWebhookTemplates message to JSON.
func (x *ApplicationWebhookTemplates) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Templates) > 0 || s.HasField("templates") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("templates")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Templates {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("templates"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ApplicationWebhookTemplates to JSON.
func (x *ApplicationWebhookTemplates) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ApplicationWebhookTemplates message from JSON.
func (x *ApplicationWebhookTemplates) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "templates":
			s.AddField("templates")
			if s.ReadNil() {
				x.Templates = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Templates = append(x.Templates, nil)
					return
				}
				v := &ApplicationWebhookTemplate{}
				v.UnmarshalProtoJSON(s.WithField("templates", false))
				if s.Err() != nil {
					return
				}
				x.Templates = append(x.Templates, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the ApplicationWebhookTemplates from JSON.
func (x *ApplicationWebhookTemplates) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ApplicationWebhook message to JSON.
func (x *ApplicationWebhook) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Ids != nil || s.HasField("ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		// NOTE: ApplicationWebhookIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Ids)
	}
	if x.CreatedAt != nil || s.HasField("created_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("created_at")
		if x.CreatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.CreatedAt)
		}
	}
	if x.UpdatedAt != nil || s.HasField("updated_at") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("updated_at")
		if x.UpdatedAt == nil {
			s.WriteNil()
		} else {
			golang.MarshalTimestamp(s, x.UpdatedAt)
		}
	}
	if x.BaseUrl != "" || s.HasField("base_url") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("base_url")
		s.WriteString(x.BaseUrl)
	}
	if x.Headers != nil || s.HasField("headers") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("headers")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.Headers {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if x.Format != "" || s.HasField("format") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("format")
		s.WriteString(x.Format)
	}
	if x.TemplateIds != nil || s.HasField("template_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("template_ids")
		// NOTE: ApplicationWebhookTemplateIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.TemplateIds)
	}
	if x.TemplateFields != nil || s.HasField("template_fields") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("template_fields")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.TemplateFields {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			s.WriteString(v)
		}
		s.WriteObjectEnd()
	}
	if x.DownlinkApiKey != "" || s.HasField("downlink_api_key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_api_key")
		s.WriteString(x.DownlinkApiKey)
	}
	if x.UplinkMessage != nil || s.HasField("uplink_message") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_message")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UplinkMessage)
	}
	if x.UplinkNormalized != nil || s.HasField("uplink_normalized") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_normalized")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.UplinkNormalized)
	}
	if x.JoinAccept != nil || s.HasField("join_accept") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("join_accept")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.JoinAccept)
	}
	if x.DownlinkAck != nil || s.HasField("downlink_ack") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_ack")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkAck)
	}
	if x.DownlinkNack != nil || s.HasField("downlink_nack") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_nack")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkNack)
	}
	if x.DownlinkSent != nil || s.HasField("downlink_sent") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_sent")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkSent)
	}
	if x.DownlinkFailed != nil || s.HasField("downlink_failed") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_failed")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkFailed)
	}
	if x.DownlinkQueued != nil || s.HasField("downlink_queued") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_queued")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkQueued)
	}
	if x.DownlinkQueueInvalidated != nil || s.HasField("downlink_queue_invalidated") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("downlink_queue_invalidated")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.DownlinkQueueInvalidated)
	}
	if x.LocationSolved != nil || s.HasField("location_solved") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("location_solved")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.LocationSolved)
	}
	if x.ServiceData != nil || s.HasField("service_data") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("service_data")
		// NOTE: ApplicationWebhook_Message does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.ServiceData)
	}
	if x.HealthStatus != nil || s.HasField("health_status") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("health_status")
		// NOTE: ApplicationWebhookHealth does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.HealthStatus)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	if x.Paused || s.HasField("paused") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("paused")
		s.WriteBool(x.Paused)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ApplicationWebhook to JSON.
func (x *ApplicationWebhook) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ApplicationWebhook message from JSON.
func (x *ApplicationWebhook) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ids":
			s.AddField("ids")
			if s.ReadNil() {
				x.Ids = nil
				return
			}
			// NOTE: ApplicationWebhookIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.Ids = &v
		case "created_at", "createdAt":
			s.AddField("created_at")
			if s.ReadNil() {
				x.CreatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.CreatedAt = v
		case "updated_at", "updatedAt":
			s.AddField("updated_at")
			if s.ReadNil() {
				x.UpdatedAt = nil
				return
			}
			v := golang.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.UpdatedAt = v
		case "base_url", "baseUrl":
			s.AddField("base_url")
			x.BaseUrl = s.ReadString()
		case "headers":
			s.AddField("headers")
			if s.ReadNil() {
				x.Headers = nil
				return
			}
			x.Headers = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.Headers[key] = s.ReadString()
			})
		case "format":
			s.AddField("format")
			x.Format = s.ReadString()
		case "template_ids", "templateIds":
			s.AddField("template_ids")
			if s.ReadNil() {
				x.TemplateIds = nil
				return
			}
			// NOTE: ApplicationWebhookTemplateIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplateIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.TemplateIds = &v
		case "template_fields", "templateFields":
			s.AddField("template_fields")
			if s.ReadNil() {
				x.TemplateFields = nil
				return
			}
			x.TemplateFields = make(map[string]string)
			s.ReadStringMap(func(key string) {
				x.TemplateFields[key] = s.ReadString()
			})
		case "downlink_api_key", "downlinkApiKey":
			s.AddField("downlink_api_key")
			x.DownlinkApiKey = s.ReadString()
		case "uplink_message", "uplinkMessage":
			s.AddField("uplink_message")
			if s.ReadNil() {
				x.UplinkMessage = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.UplinkMessage = &v
		case "uplink_normalized", "uplinkNormalized":
			s.AddField("uplink_normalized")
			if s.ReadNil() {
				x.UplinkNormalized = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.UplinkNormalized = &v
		case "join_accept", "joinAccept":
			s.AddField("join_accept")
			if s.ReadNil() {
				x.JoinAccept = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.JoinAccept = &v
		case "downlink_ack", "downlinkAck":
			s.AddField("downlink_ack")
			if s.ReadNil() {
				x.DownlinkAck = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkAck = &v
		case "downlink_nack", "downlinkNack":
			s.AddField("downlink_nack")
			if s.ReadNil() {
				x.DownlinkNack = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkNack = &v
		case "downlink_sent", "downlinkSent":
			s.AddField("downlink_sent")
			if s.ReadNil() {
				x.DownlinkSent = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkSent = &v
		case "downlink_failed", "downlinkFailed":
			s.AddField("downlink_failed")
			if s.ReadNil() {
				x.DownlinkFailed = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkFailed = &v
		case "downlink_queued", "downlinkQueued":
			s.AddField("downlink_queued")
			if s.ReadNil() {
				x.DownlinkQueued = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkQueued = &v
		case "downlink_queue_invalidated", "downlinkQueueInvalidated":
			s.AddField("downlink_queue_invalidated")
			if s.ReadNil() {
				x.DownlinkQueueInvalidated = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.DownlinkQueueInvalidated = &v
		case "location_solved", "locationSolved":
			s.AddField("location_solved")
			if s.ReadNil() {
				x.LocationSolved = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.LocationSolved = &v
		case "service_data", "serviceData":
			s.AddField("service_data")
			if s.ReadNil() {
				x.ServiceData = nil
				return
			}
			// NOTE: ApplicationWebhook_Message does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhook_Message
			golang.UnmarshalMessage(s, &v)
			x.ServiceData = &v
		case "health_status", "healthStatus":
			s.AddField("health_status")
			if s.ReadNil() {
				x.HealthStatus = nil
				return
			}
			// NOTE: ApplicationWebhookHealth does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookHealth
			golang.UnmarshalMessage(s, &v)
			x.HealthStatus = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "paused":
			s.AddField("paused")
			x.Paused = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the ApplicationWebhook from JSON.
func (x *ApplicationWebhook) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ApplicationWebhooks message to JSON.
func (x *ApplicationWebhooks) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Webhooks) > 0 || s.HasField("webhooks") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("webhooks")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Webhooks {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("webhooks"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ApplicationWebhooks to JSON.
func (x *ApplicationWebhooks) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ApplicationWebhooks message from JSON.
func (x *ApplicationWebhooks) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "webhooks":
			s.AddField("webhooks")
			if s.ReadNil() {
				x.Webhooks = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Webhooks = append(x.Webhooks, nil)
					return
				}
				v := &ApplicationWebhook{}
				v.UnmarshalProtoJSON(s.WithField("webhooks", false))
				if s.Err() != nil {
					return
				}
				x.Webhooks = append(x.Webhooks, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the ApplicationWebhooks from JSON.
func (x *ApplicationWebhooks) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetApplicationWebhookRequest message to JSON.
func (x *GetApplicationWebhookRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Ids != nil || s.HasField("ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		// NOTE: ApplicationWebhookIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Ids)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetApplicationWebhookRequest to JSON.
func (x *GetApplicationWebhookRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetApplicationWebhookRequest message from JSON.
func (x *GetApplicationWebhookRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ids":
			s.AddField("ids")
			if s.ReadNil() {
				x.Ids = nil
				return
			}
			// NOTE: ApplicationWebhookIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.Ids = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the GetApplicationWebhookRequest from JSON.
func (x *GetApplicationWebhookRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListApplicationWebhooksRequest message to JSON.
func (x *ListApplicationWebhooksRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.ApplicationIds != nil || s.HasField("application_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("application_ids")
		// NOTE: ApplicationIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.ApplicationIds)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListApplicationWebhooksRequest to JSON.
func (x *ListApplicationWebhooksRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListApplicationWebhooksRequest message from JSON.
func (x *ListApplicationWebhooksRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "application_ids", "applicationIds":
			s.AddField("application_ids")
			if s.ReadNil() {
				x.ApplicationIds = nil
				return
			}
			// NOTE: ApplicationIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v ApplicationIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.ApplicationIds = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the ListApplicationWebhooksRequest from JSON.
func (x *ListApplicationWebhooksRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SetApplicationWebhookRequest message to JSON.
func (x *SetApplicationWebhookRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Webhook != nil || s.HasField("webhook") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("webhook")
		x.Webhook.MarshalProtoJSON(s.WithField("webhook"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SetApplicationWebhookRequest to JSON.
func (x *SetApplicationWebhookRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SetApplicationWebhookRequest message from JSON.
func (x *SetApplicationWebhookRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "webhook":
			s.AddField("webhook")
			if s.ReadNil() {
				x.Webhook = nil
				return
			}
			x.Webhook = &ApplicationWebhook{}
			x.Webhook.UnmarshalProtoJSON(s.WithField("webhook", false))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the SetApplicationWebhookRequest from JSON.
func (x *SetApplicationWebhookRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetApplicationWebhookTemplateRequest message to JSON.
func (x *GetApplicationWebhookTemplateRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Ids != nil || s.HasField("ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		// NOTE: ApplicationWebhookTemplateIdentifiers does not seem to implement MarshalProtoJSON.
		golang.MarshalMessage(s, x.Ids)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetApplicationWebhookTemplateRequest to JSON.
func (x *GetApplicationWebhookTemplateRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetApplicationWebhookTemplateRequest message from JSON.
func (x *GetApplicationWebhookTemplateRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "ids":
			s.AddField("ids")
			if s.ReadNil() {
				x.Ids = nil
				return
			}
			// NOTE: ApplicationWebhookTemplateIdentifiers does not seem to implement UnmarshalProtoJSON.
			var v ApplicationWebhookTemplateIdentifiers
			golang.UnmarshalMessage(s, &v)
			x.Ids = &v
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the GetApplicationWebhookTemplateRequest from JSON.
func (x *GetApplicationWebhookTemplateRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListApplicationWebhookTemplatesRequest message to JSON.
func (x *ListApplicationWebhookTemplatesRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListApplicationWebhookTemplatesRequest to JSON.
func (x *ListApplicationWebhookTemplatesRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListApplicationWebhookTemplatesRequest message from JSON.
func (x *ListApplicationWebhookTemplatesRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the ListApplicationWebhookTemplatesRequest from JSON.
func (x *ListApplicationWebhookTemplatesRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
