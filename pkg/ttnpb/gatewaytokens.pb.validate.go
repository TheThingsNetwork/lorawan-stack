// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// ValidateFields checks the field values on GatewayToken with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayToken) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GatewayTokenFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "key_id":
			// no validation rules for KeyId
		case "payload":

			if v, ok := interface{}(m.GetPayload()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GatewayTokenValidationError{
						field:  "payload",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "checksum":
			// no validation rules for Checksum
		default:
			return GatewayTokenValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GatewayTokenValidationError is the validation error returned by
// GatewayToken.ValidateFields if the designated constraints aren't met.
type GatewayTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayTokenValidationError) ErrorName() string { return "GatewayTokenValidationError" }

// Error satisfies the builtin error interface
func (e GatewayTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayTokenValidationError{}

// ValidateFields checks the field values on GatewayToken_Payload with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GatewayToken_Payload) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GatewayToken_PayloadFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "gateway_ids":

			if v, ok := interface{}(m.GetGatewayIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GatewayToken_PayloadValidationError{
						field:  "gateway_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "rights":

			if v, ok := interface{}(m.GetRights()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GatewayToken_PayloadValidationError{
						field:  "rights",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "created_at":

			if v, ok := interface{}(m.GetCreatedAt()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GatewayToken_PayloadValidationError{
						field:  "created_at",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return GatewayToken_PayloadValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GatewayToken_PayloadValidationError is the validation error returned by
// GatewayToken_Payload.ValidateFields if the designated constraints aren't met.
type GatewayToken_PayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GatewayToken_PayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GatewayToken_PayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GatewayToken_PayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GatewayToken_PayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GatewayToken_PayloadValidationError) ErrorName() string {
	return "GatewayToken_PayloadValidationError"
}

// Error satisfies the builtin error interface
func (e GatewayToken_PayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGatewayToken_Payload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GatewayToken_PayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GatewayToken_PayloadValidationError{}
